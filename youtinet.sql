-- MySQL dump 10.13  Distrib 5.7.12, for Win64 (x86_64)
--
-- Host: localhost    Database: youtinet
-- ------------------------------------------------------
-- Server version	5.7.17-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `account`
--

DROP TABLE IF EXISTS `account`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `account` (
  `account_id` varchar(20) NOT NULL COMMENT '账号',
  `password` varchar(16) NOT NULL COMMENT '密码',
  `privilege` enum('user','admin') NOT NULL DEFAULT 'user' COMMENT '角色（用户，管理员）',
  `name` varchar(20) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `phone` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`account_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `account`
--

LOCK TABLES `account` WRITE;
/*!40000 ALTER TABLE `account` DISABLE KEYS */;
INSERT INTO `account` VALUES ('admin','123456','admin',NULL,NULL,NULL),('admin2','123','admin',NULL,NULL,NULL),('admin3','test','admin',NULL,NULL,NULL),('admin4','123456','admin',NULL,NULL,NULL);
/*!40000 ALTER TABLE `account` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `demo`
--

DROP TABLE IF EXISTS `demo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `demo` (
  `id` int(11) NOT NULL,
  `content` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `demo`
--

LOCK TABLES `demo` WRITE;
/*!40000 ALTER TABLE `demo` DISABLE KEYS */;
INSERT INTO `demo` VALUES (1,'a'),(2,'b');
/*!40000 ALTER TABLE `demo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `knowledge_point`
--

DROP TABLE IF EXISTS `knowledge_point`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `knowledge_point` (
  `knowledge_point_id` int(12) unsigned NOT NULL AUTO_INCREMENT COMMENT '知识点id',
  `subject_id` int(12) unsigned NOT NULL COMMENT '所属学科id',
  `knowledge_point` varchar(255) NOT NULL COMMENT '知识点',
  PRIMARY KEY (`knowledge_point_id`),
  KEY `subject_id` (`subject_id`),
  CONSTRAINT `knowledge_point_ibfk_1` FOREIGN KEY (`subject_id`) REFERENCES `subject` (`subject_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `knowledge_point`
--

LOCK TABLES `knowledge_point` WRITE;
/*!40000 ALTER TABLE `knowledge_point` DISABLE KEYS */;
INSERT INTO `knowledge_point` VALUES (1,1,'查找'),(2,1,'排序'),(3,1,'递归'),(4,1,'贪心'),(5,1,'复杂度'),(6,2,'C/C++'),(7,2,'Java'),(8,2,'JavaScript'),(9,2,'C#'),(10,2,'Python'),(11,2,'HTML/CSS'),(12,3,'数组'),(13,3,'字符串'),(14,3,'链表'),(15,3,'栈'),(16,3,'队列'),(17,3,'树'),(18,3,'图'),(19,4,'网络基础'),(20,4,'正则表达式'),(21,4,'数据库'),(22,4,'操作系统'),(23,4,'编译和体系结构'),(24,5,'组合数学'),(25,5,'概率统计'),(26,5,'数量关系'),(27,5,'判断推理'),(28,5,'常识判断'),(29,6,'软件工程'),(30,6,'软件测试'),(31,6,'面向对象');
/*!40000 ALTER TABLE `knowledge_point` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question`
--

DROP TABLE IF EXISTS `question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `question` (
  `question_id` int(12) unsigned NOT NULL AUTO_INCREMENT COMMENT '试题id',
  `type_id` int(12) unsigned NOT NULL COMMENT '试题类型id',
  `content` varchar(10000) NOT NULL COMMENT '试题内容',
  `answer` varchar(10000) NOT NULL COMMENT '试题答案',
  `score` int(2) NOT NULL COMMENT '试题默认分值',
  `difficulty_degree` enum('5','4','3','2','1') NOT NULL COMMENT '难度（1~5）',
  `subject_id` int(12) unsigned NOT NULL COMMENT '所属科目id',
  `knowledge_point_id` int(12) unsigned NOT NULL COMMENT '知识点id',
  PRIMARY KEY (`question_id`),
  KEY `type_id` (`type_id`),
  KEY `subject_id` (`subject_id`),
  KEY `knowledge_point_id` (`knowledge_point_id`),
  CONSTRAINT `question_ibfk_1` FOREIGN KEY (`type_id`) REFERENCES `question_type` (`question_type_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `question_ibfk_2` FOREIGN KEY (`subject_id`) REFERENCES `subject` (`subject_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `question_ibfk_3` FOREIGN KEY (`knowledge_point_id`) REFERENCES `knowledge_point` (`knowledge_point_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=522 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question`
--

LOCK TABLES `question` WRITE;
/*!40000 ALTER TABLE `question` DISABLE KEYS */;
INSERT INTO `question` VALUES (107,1,'<div>对线性表进行折半查找时,要求线性表必须()<ul><li>以顺序方式存储</li><li>以顺序方式存储,且数据元素有序</li><li>以链接方式存储</li><li>以链接方式存储,且数据元素有序</li><ul></ul></ul></div>','<div>B</div>',2,'1',1,1),(108,1,'<div>折半查找法的查找速度一定比顺序查找法快()<ul><li>对</li><li>错</li><ul></ul></ul></div>','<div>B</div>',2,'1',1,1),(109,1,'<div>二分查找的时间复杂度（ ）<ul><li>O(N*log(N))</li><li>O(N)</li><li>O(log(N))</li><li>O(N^2)</li><ul></ul></ul></div>','<div>C</div>',2,'2',1,1),(110,1,'<div>查找n个元素的有序表时,最有效的查找方法是()<ul><li>顺序查找</li><li>分块查找</li><li>折半查找</li><li>二叉排序树</li><ul></ul></ul></div>','<div>C</div>',2,'2',1,1),(111,1,'<div>能用二分法进行查找的是<ul><li>顺序存储的有序线性表</li><li>线性链表</li><li>二叉链表</li><li>有序线性链表</li><ul></ul></ul></div>','<div>A</div>',2,'3',1,1),(112,1,'<div>使用二分查找算法在一个有序序列中查找一个元素的时间复杂度为（ ）<ul><li>O(N)</li><li>O(logN)</li><li>O(N*N)</li><li>O(N*logN)</li><ul></ul></ul></div>','<div>B</div>',2,'3',1,1),(113,1,'<div>公司里面有1001个员工，现在要在公司里面找到最好的羽毛球选手，也就是第一名，每个人都必须参赛，问至少要比赛多少次才能够找到最好的羽毛球员工。<ul><li>1001</li><li>1000</li><li>500</li><li>501</li><ul></ul></ul></div>','<div>B</div>',2,'3',1,1),(114,1,'<div>请问对一个排好序的数组进行查找，用平均时间复杂度最小的算法，时间复杂度为（）<ul><li>O(n)</li><li>O(lgn)</li><li>O(nlgn)</li><li>O(1)</li><ul></ul></ul></div>','<div>B</div>',2,'3',1,1),(115,1,'<div>具有12个关键字的有序表,折半查找的平均查找长度()<ul><li>3.1</li><li>4</li><li>2.5</li><li>5</li><ul></ul></ul></div>','<div>A</div>',2,'3',1,1),(116,1,'<div>在顺序表（3,6,8,10,12,15,16,18,21,25,30）中，用二分法查找关键码值11，所需的关键码比较次数为<ul><li>2</li><li>3</li><li>4</li><li>5</li><ul></ul></ul></div>','<div>C</div>',2,'3',1,1),(117,1,'<div><p>  <span>若有<span>18</span>个元素的有序表存放在一维数组<span>A[19]</span>中，第一个元素放<span>A[1]</span>中，现进行二分查找，则查找<span>A[3]</span>的比较序列的下标依次为（）</span></p><ul><li>1，2，3</li><li>9，5，3</li><li>9，5，2，3</li><li>9，4，2，3</li><ul></ul></ul></div>','<div>D</div>',2,'4',1,1),(118,1,'<div><p align=\\\"justify\\\" style=\\\"text-align: justify;\\\">  <span>下列选项中，不能构成折半查找中关键字比较序列的是</span>  <span>（）。</span></p><ul><li>500,200,450,180</li><li>500,450,200,180</li><li>180,500,200,450</li><li>180,200,500,450</li><ul></ul></ul></div>','<div>A</div>',2,'4',1,1),(119,1,'<div>在一个有8个int数据的数组中，随机给出数组的数据，找出最大和第二大元素一定需要进行（）次比较：<ul><li>8</li><li>9</li><li>10</li><li>11</li><ul></ul></ul></div>','<div>B</div>',2,'5',1,1),(120,1,'<div>二分查找树里查询一个关键字的最坏时间复杂度是______<ul><li>O(n)</li><li>O(n log n)</li><li>O(n^2)</li><li>O(n^3)</li><li>O(logn)</li><li>不确定</li><ul></ul></ul></div>','<div>A</div>',2,'5',1,1),(121,1,'<div><p>  从<span>n</span>个数里面找最大的两个数理论最少需要比较</p><ul><li>2logn</li><li>2 logn -1</li><li>n+ logn -2</li><li>2n-3</li><ul></ul></ul></div>','<div>C</div>',2,'5',1,1),(122,2,'<div>二分查找要满足顺序存储、链存储、按value有序中的哪些条件？<ul><li>顺序存储</li><li>链存储</li><li>按value有序</li><li>以上答案都不正确</li><ul></ul></ul></div>','<div>AC</div>',4,'5',1,1),(123,4,'<div>二分查找是常用的编程方法，请用完整代码实现该函数（不许调用库函数）<br>  void *bsearch(const void *key, const void *base, size_t nel, size_twidth, int (*compar) (const void *, const void *));<br></div>','<div><div>  sec_max = maxnumber;<br> maxnumber = data[i];<br> sec_max = data[i];<br></div><div><div>  二分查找完整代码： </div><div>  #include&lt;iostream&gt; </div> using namespace std;<br><br> void * bsearch(const void *key, const void *base, size_t nel, size_twidth, int (*cmp)(const void *, const void *)){<br> &nbsp;&nbsp;&nbsp;&nbsp;void *mid = NULL;<br> &nbsp;&nbsp;&nbsp;&nbsp;int sign;<br> &nbsp;&nbsp;&nbsp;&nbsp;while (nel &gt; 0) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mid = (char *)base + width*(nel/2);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sign = cmp(key, mid);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sign == 0) return mid;//找到&nbsp;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nel == 1) break;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (sign &lt; 0)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nel /= 2;//下取整&nbsp;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base = mid;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nel -= nel/2;//上取整&nbsp;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;return NULL;<br> }<br><br> int compare(const void *val1, const void *val2) {<br> &nbsp; &nbsp; int iVal1 = *(int*)val1;<br> &nbsp; &nbsp; int iVal2 = *(int*)val2;<br> &nbsp; &nbsp; if (iVal1 &gt; iVal2) {<br> &nbsp; &nbsp; &nbsp; &nbsp; return 1;<br> &nbsp; &nbsp; }<br> &nbsp; &nbsp; else if (iVal1 == iVal2) {<br> &nbsp; &nbsp; &nbsp; &nbsp; return 0;<br> &nbsp; &nbsp; }<br> &nbsp; &nbsp; return -1;<br> }<br><div>  <br></div><div>  测试用例： </div> int main(){<br><br> &nbsp; &nbsp; int a[10]={1, 2, 5, 8, 10, 11,12,13,14,15};<br> &nbsp; &nbsp; int key = 5;<br> &nbsp; &nbsp;&nbsp;<br> &nbsp;&nbsp;&nbsp;&nbsp;void* res = bsearch(&amp;key, a, 10, sizeof(int), compare);<br> &nbsp; &nbsp; if(res != NULL){<br> &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;cout &lt;&lt; “索引位置：” &lt;&lt; (int *)res - a;<br> &nbsp; &nbsp; }<br> &nbsp; &nbsp; return 0;<br> }<br></div></div>',10,'3',1,1),(124,4,'<div><div>  以下函数查找一个整数数组中第二大的数，请填空。 </div><div><div id=\\\"highlighter_880682\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">#include &lt;stdio.h&gt;</code></div><div><code class=\\\"java keyword\\\">const</code> <code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">MINNUMBER = -</code><code class=\\\"java value\\\">32767</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">find_set_max(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">data[], </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">count)</code></div><div><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">maxnumber = data[</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">];</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">sec_max = MINNUMBER;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i = </code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">; i &lt; count; i ++ )</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(maxnumber &lt; data[i])</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">{&nbsp;&nbsp;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">();</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">();</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">else</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">{</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(data[i] &nbsp;&gt; sec_max)</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">()</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number20 index19 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">sec_max;</code></div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>','<div><div>  sec_max = maxnumber;<br> maxnumber = data[i];<br> sec_max = data[i];<br></div></div>',10,'4',1,1),(125,4,'<div><span>设计一个最优算法来查找一n个元素数组中的最大值和最小值，</span> 已知一种需要比较2n次的方法，请给一个更优的算法。请特别注意优化时间复杂度的常数。 <br>  给出该算法最坏情况下的比较次数和该算法的步骤描述。</div>','<div>已知的比较2n次的方法，显然是将每个元素和最大值、最小值各比一次，要减少比较次数，可以有多种优化方法： <br>方法一：一个元素先和最大值比较，如果比最大值大，就不用再和最小值比较（或者先和最小值比较，如果比最小值小，就不用再和最大值比较），一般情况下，这种优化后的比较次数一定会少于2n<br>方法二：将数组元素按两个，两个分组，组内两元素有序存放，之后最小值跟组内较小的值比较，最大值只需跟组内较大的值比较，这样每组的比较次数是3，共n/2组，总的时间复杂度是3n/2次。</div>',10,'3',1,1),(126,4,'<div>给定一个字符串，请写一段代码找出这个字符串中首先出现两次的那个字符。 例如字符串为”qywyer23tdd“，输出为y。</div>','<div><div><div id=\\\"highlighter_434319\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">class</code> <code class=\\\"java plain\\\">Solution{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">char</code> <code class=\\\"java plain\\\">firstTwiceChar(string s){</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(s.size()&lt;=</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">)</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java string\\\">\'\'</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">unsigned </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">hashTable[</code><code class=\\\"java value\\\">256</code><code class=\\\"java plain\\\">];</code><code class=\\\"java comments\\\">//字符是8bit类型，最多有256种，开辟1k空间当做hash表</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">for</code><code class=\\\"java plain\\\">(auto i = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">; i &lt; </code><code class=\\\"java value\\\">256</code><code class=\\\"java plain\\\">; i++)hashTable[i] = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">for</code><code class=\\\"java plain\\\">(auto i = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">; i &lt; s.size(); i++){</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(++hashTable[s[i]] == </code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">)</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">s[i];</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java string\\\">\'\'</code><code class=\\\"java plain\\\">;</code><code class=\\\"java comments\\\">//没有出现两次的字符</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'3',1,1),(127,4,'<div>坐标轴上从左到右依次的点为a[0]、a[1]、a[2]……a[n-1]，设一根木棒的长度为L，求L最多能覆盖坐标轴的几个点？</div>','<div><p> 算法思想：开始时我把题目理解错了，以为是求a中最大子序列和使其等于L，实际上是求满足a[j]-a[i] &lt;= L  &amp;&amp; a[j+1]-a[i] &gt;  L这两个条件的j与i中间的所有点个数中的最大值，即j-i+1最大，这样题目就简单多了，方法也很简单：直接从左到右扫描，两个指针i和j，i从位置0开始，j从位置1开始，如果a[j]  - a[i] &lt;= L则j++并记录中间经过的点个数，如果a[j] - a[i] &gt;  L则j--回退，覆盖点个数-1回到刚好满足条件的时候，将满足条件的最大值与所求最大值比较，然后i++,j++直到求出最大的点个数。</p><p> 有两点需要注意：</p><p> （1）这里可能没有i和j使得a[j] - a[i]刚好等于L的，所以判断条件不能为a[j] - a[i] = L。</p><div>  （2）可能存在不同的覆盖点但覆盖的长度相同，此时只选第一次覆盖的点。</div><div><div id=\\\"highlighter_84606\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div><div class=\\\"line number22 index21 alt1\\\">22</div><div class=\\\"line number23 index22 alt2\\\">23</div><div class=\\\"line number24 index23 alt1\\\">24</div><div class=\\\"line number25 index24 alt2\\\">25</div><div class=\\\"line number26 index25 alt1\\\">26</div><div class=\\\"line number27 index26 alt2\\\">27</div><div class=\\\"line number28 index27 alt1\\\">28</div><div class=\\\"line number29 index28 alt2\\\">29</div><div class=\\\"line number30 index29 alt1\\\">30</div><div class=\\\"line number31 index30 alt2\\\">31</div><div class=\\\"line number32 index31 alt1\\\">32</div><div class=\\\"line number33 index32 alt2\\\">33</div><div class=\\\"line number34 index33 alt1\\\">34</div><div class=\\\"line number35 index34 alt2\\\">35</div><div class=\\\"line number36 index35 alt1\\\">36</div><div class=\\\"line number37 index36 alt2\\\">37</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp comments\\\">// 求最大覆盖点</code></div><div><code class=\\\"cpp preprocessor\\\">#include &lt;stdio.h&gt;</code></div><div><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">maxCover(</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">a[], </code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">n, </code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">L) {</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">count = 2, maxCount = 1, start;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">i = 0, j = 1;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp keyword bold\\\">while</code> <code class=\\\"cpp plain\\\">(i &lt; n &amp;&amp; j &lt; n) {</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp keyword bold\\\">while</code> <code class=\\\"cpp plain\\\">((j &lt; n) &amp;&amp; (a[j] - a[i] &lt;= L)) {</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp plain\\\">j++;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp plain\\\">count++;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp plain\\\">}</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp comments\\\">// 退回到满足条件的j &nbsp; &nbsp;</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp plain\\\">j--;</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp plain\\\">count--;</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp keyword bold\\\">if</code> <code class=\\\"cpp plain\\\">(maxCount &lt; count) {</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp plain\\\">start = i;</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp plain\\\">maxCount = count;</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp plain\\\">i++;</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp plain\\\">j++;</code></div><div class=\\\"line number20 index19 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp functions bold\\\">printf</code><code class=\\\"cpp plain\\\">(</code><code class=\\\"cpp string\\\">\\\"covered point: \\\"</code><code class=\\\"cpp plain\\\">);</code></div><div class=\\\"line number22 index21 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp keyword bold\\\">for</code> <code class=\\\"cpp plain\\\">(i = start; i &lt; start + maxCount; i++) {</code></div><div class=\\\"line number23 index22 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"cpp functions bold\\\">printf</code><code class=\\\"cpp plain\\\">(</code><code class=\\\"cpp string\\\">\\\"%d \\\"</code><code class=\\\"cpp plain\\\">, a[i]);</code></div><div class=\\\"line number24 index23 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number25 index24 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp functions bold\\\">printf</code><code class=\\\"cpp plain\\\">(</code><code class=\\\"cpp string\\\">\\\"\\n\\\"</code><code class=\\\"cpp plain\\\">);</code></div><div class=\\\"line number26 index25 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">maxCount;</code></div><div class=\\\"line number27 index26 alt2\\\"><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number28 index27 alt1\\\"><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">main() {</code></div><div class=\\\"line number29 index28 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp comments\\\">// test &nbsp;&nbsp;</code></div><div class=\\\"line number30 index29 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">a[] = { 1, 3, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 21 };</code></div><div class=\\\"line number31 index30 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp functions bold\\\">printf</code><code class=\\\"cpp plain\\\">(</code><code class=\\\"cpp string\\\">\\\"max count: %d\\n\\n\\\"</code><code class=\\\"cpp plain\\\">, maxCover(a, 13, 8));</code></div><div class=\\\"line number32 index31 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">b[] = { 1, 2, 3, 4, 5, 100, 1000 };</code></div><div class=\\\"line number33 index32 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp functions bold\\\">printf</code><code class=\\\"cpp plain\\\">(</code><code class=\\\"cpp string\\\">\\\"max count: %d\\n\\\"</code><code class=\\\"cpp plain\\\">, maxCover(b, 7, 8));</code></div><div class=\\\"line number34 index33 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">0;</code></div><div class=\\\"line number35 index34 alt2\\\"><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number36 index35 alt1\\\">&nbsp;</div><div class=\\\"line number37 index36 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;</code>&nbsp;</div></div></td></tr></tbody></table></div></div><br></div>',10,'5',1,1),(129,1,'<div>利用归并排序方法对数字序列:5,19,17,21,11,8,1进行排序，共需要进行（）次比较。<ul><li>10</li><li>12</li><li>14</li><li>11</li><ul></ul></ul></div>','<div>D</div>',2,'1',1,2),(130,1,'<div><div><div id=\\\"highlighter_919995\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp plain\\\">冒泡排序算法在非有序的序列中时间复杂度是？（ ）</code></div></div></td></tr></tbody></table></div></div><br><ul><li>O(nlogn)</li><li>O(n^2)</li><li>O(n)</li><li>O(n^2logn)</li><ul></ul></ul></div>','<div>B</div>',2,'1',1,2),(131,1,'<div>基于比较的排序算法是（）<ul><li>希尔排序</li><li>冒泡排序</li><li>桶排序</li><li>基数排序</li><ul></ul></ul></div>','<div>B</div>',2,'1',1,2),(132,1,'<div>快速排序的平均时间复杂度和最坏时间复杂度是?<ul><li>O(n^2), O(n^2)</li><li>O(n^2), O(nlgn)</li><li>O(nlgn) , O(nlgn)</li><li>O(nlgn) , O(n^2)</li><ul></ul></ul></div>','<div>D</div>',2,'1',1,2),(133,1,'<div><p style=\\排\"margin-left: 13.5pt;text-indent: -13.5pt;\\\">  <span>设一组</span>  <span>初始记录关键字序列为</span>  <span>(Q</span>  <span>，</span>  <span>H</span>  <span>，</span>  <span>C</span>  <span>，</span>  <span>Y</span>  <span>，</span>  <span>P</span>  <span>，</span>  <span>A</span>  <span>，</span>  <span>M</span>  <span>，</span>  <span>S</span>  <span>，</span>  <span>R</span>  <span>，</span>  <span>D</span>  <span>，</span>  <span>F</span>  <span>，</span>  <span>X)</span>  <span>，则按字母升序的第一趟冒泡排序结束后的结果是（</span>  <span></span>  <span>）。</span></p><ul><li>F，H，C，D，P，A，M，Q，R，S，Y，X</li><li>P，A，C，S，Q，D，F，X，R，H，M，Y</li><li>A，D，C，R，F，Q，M，S，Y，P，H，X</li><li>H，C，Q，P，A，M，S，R，D，F，X，Y</li><ul></ul></ul></div>','<div>D</div>',2,'1',1,2),(134,1,'<div>下面哪种序算法的平均时间复杂度和其他的不一样：<ul><li>堆排序</li><li>快速排序</li><li>插入排序</li><li>归并排序</li><ul></ul></ul></div>','<div>C</div>',2,'2',1,2),(135,1,'<div><span>若一组记录的排序码为（46,&nbsp;79,&nbsp;56,&nbsp;38,&nbsp;40,&nbsp;84），则利用快速排序，以第一个记录为基准得到的一次划分结果是 （） </span><ul><li>38, 40, 46, 56, 79, 84</li><li>40，38, 46 ,79, 56, 84</li><li>40, 38，46, 56, 79, 84</li><li>40, 38，46，84, 56, 79</li><ul></ul></ul></div>','<div>C</div>',2,'3',1,2),(136,1,'<div>在下列几种排序方法中，空间复杂度最高的是（）<ul><li>归并排序</li><li>快速排序</li><li>插入排序</li><li>选择排序</li><ul></ul></ul></div>','<div>A</div>',2,'3',1,2),(137,1,'<div>对关键码序列28,16,32,12,60,2,5,72快速排序（最常用的快速排序，以第一个关键码为基准）,使用挖坑法，从小到大一次划分结果为()<ul><li>(2,5,12,16)28(60,32,72)</li><li>(2,16,5,12)28(60,32,72)</li><li>(2,16,12,5)28(60,32,72)</li><li>(5,16,2,12)28(60,32,72)</li><ul></ul></ul></div>','<div>B</div>',2,'3',1,2),(138,1,'<div>对记录（54,38,96,23,15,72,60,45,83）进行直接插入排序时，当把第八个记录45插入到有序表时，为找到插入位置需比较（）次<ul><li>4</li><li>6</li><li>5</li><li>3</li><ul></ul></ul></div>','<div>C</div>',2,'4',1,2),(139,1,'<div>有一组数据(15,9,7,8,20,-1,7,4),用堆排序的筛选方法降序排序建立的初始堆为()<ul><li>-1,4,8,9,20,7,15,7</li><li>-1,7,15,7,4,8,20,9</li><li>-1,4,15,9,20,7,7,8</li><li>ABC均不对</li><ul></ul></ul></div>','<div>C</div>',2,'4',1,2),(140,1,'<div>将N条长度均为M的有序链表进行合并，合并以后的链表也保持有序，时间复杂度为()?<ul><li>O(N * M * logN)</li><li>O(N*M)</li><li>O(N)</li><li>O(M)</li><ul></ul></ul></div>','<div>A</div>',2,'4',1,2),(141,1,'<div>用某种排序方法对关键字序列（25,84,21,47,15,27,68,35,20）进行排序，序列的变化情况采样如下：<br> 20,15,21,25,47,27,68,35,84<br> 15,20,21,25,35,27,47,68,84<br> 15,20,21,25,27,35,47,68,84<br> 请问采用的是以下哪种排序算法（）<br><div>  <br></div><ul><li>选择排序</li><li>希尔排序</li><li>归并排序</li><li>快速排序</li><ul></ul></ul></div>','<div>D</div>',2,'4',1,2),(142,1,'<div><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\">  <span>能实现\\\"在</span> <span>n</span> <span>个数中选出最大的</span> <span>m</span> <span>个数（</span> <span>3&lt;m&lt;n</span> <span>）\\\"的算法中，时间复杂度最小的算法是？</span>  </p><ul><li>O(n)</li><li>O(nlogn)</li><li>O(mlogn)</li><li>O(logn)</li><ul></ul></ul></div>','<div>C</div>',2,'5',1,2),(143,1,'<div>对n个记录的线性表进行快速排序为减少算法的递归深度,以下叙述正确的是()<ul><li>每次分区后,先处理较短的部分</li><li>每次分区后,先处理较长的部分</li><li>与算法每次分区后的处理顺序无关</li><li>以上三者都不对</li><ul></ul></ul></div>','<div>A</div>',2,'5',1,2),(144,1,'<div>在一个元素个数为N的数组里，找到升序排在N/5位置的元素的最优算法时间复杂度是<ul><li>O(n)</li><li>O(n log n)</li><li>O(n (log n)2)</li><li>O(n 3/2)</li><ul></ul></ul></div>','<div>A</div>',2,'5',1,2),(145,2,'<div>使下列算法的时间复杂度描述错误的有？<ul><li>冒泡排序：O(n*n)</li><li>选择排序: O(n*n)</li><li>插入排序: O(n*n*n)</li><li>快速排序: O(nlogn)</li><li>堆排序: O(nlogn)</li><li>归并排序:O(n * n)</li><ul></ul></ul></div>','<div>CF</div>',4,'5',1,2),(146,2,'<div><p>  <span>以下排序算法时间复杂度为</span>  <span>O(nlogn)</span>  <span>的是（）</span></p><ul><li>冒泡排序</li><li>快速排序</li><li>堆排序</li><li>插入排序</li><ul></ul></ul></div>','<div>BC</div>',4,'5',1,2),(147,2,'<div>基于比较的排序算法是（）<ul><li>基数排序</li><li>冒泡排序</li><li>桶排序</li><li>希尔排序</li><ul></ul></ul></div>','<div>BD</div>',4,'2',1,2),(148,2,'<div>下列排序算法的常规实现中，哪些空间复杂度是O(1)<ul><li>冒泡</li><li>选择</li><li>归并</li><li>快排</li><li>堆排序</li><ul></ul></ul></div>','<div>ABE</div>',4,'3',1,2),(149,2,'<div>0~999999之间的所有数字中，任何一位都不包括数字3的数字的总数为____。<ul><li>99999</li><li>262144</li><li>381041</li><li>524288</li><li>531441</li><li>900000</li><ul></ul></ul></div>','<div>E</div>',4,'3',1,2),(150,2,'<div>如果在一个排序算法的执行过程中，没有一对元素被比较过两次或以上，则称该排序算法为节俭排序算法，以下算法中是节俭排序算法的有________。<ul><li>插入排序</li><li>选择排序</li><li>堆排序</li><li>归并排序</li><ul></ul></ul></div>','<div>AD</div>',4,'4',1,2),(151,2,'<div>在排序方法中，元素比较次数与元素的初始排列无关的是（）<ul><li>Shell 排序</li><li>归并排序</li><li>直接插入排序</li><li>选择排序</li><ul></ul></ul></div>','<div>D</div>',4,'4',1,2),(152,2,'<div>在下列表述中,()是错误的<ul><li>含有一个或多个空格字符的串称为空串</li><li>对n(n&gt;0)个顶点的网,求出权最小的n-1条边便可构成其最小生成树</li><li>选择排序算法是不稳定的</li><li>平衡二叉树的左右子树的结点数之差的绝对值不超过1</li><ul></ul></ul></div>','<div>ABD</div>',4,'4',1,2),(153,3,'<div>设有序表中有1000个元素，则用二分查找元素X最多需要比较<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>次可知道所查找元素查找序列中。</div>','<div>10</div>',4,'4',1,2),(154,3,'<div><div>  设有字母序列{Q,D,F,X,A,P,N,B,Y,M,C,W}，请写出按二路归并方法对该序列进行一趟扫描后的结果为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。 </div><div>  (输出结果请按照以下格式：ABCDEFG，字母之间没有逗号) </div></div>','<div>DQFXAPBNMYCW</div>',4,'4',1,2),(155,3,'<div>最坏情况下，合并两个大小为n的已排序数组所需要的比较次数为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></div>','<div>2n-1</div>',4,'3',1,2),(156,3,'<div>a）ABCDEFG七人站队，要求A必须在B的左边（可不相邻），共有<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>种排法?<br>  b）在a的条件下若AB必须相邻，有<span class=\\\"blank-num\\\">2</span>种排法？<br></div>','<div><div>  a)  七人的全排列有A(7,7)=5040种排法，由于A，B是对等的，也就是说A在B的左边和B在A的左边的站法数量是相同的，所以有A（7,7）/2=2520种 </div><div>  b) 先把A拿出来，让B等其余6人全排列，有A（6,6）=720种，然后将A插队在B的左侧相邻位置，插队方法唯一，所以总共有<span>A（6,6）=720种</span></div></div>',4,'3',1,2),(157,3,'<div><div>  请补全下面的快速排序代码，答案中请不要包含空格。 </div><div>  void qsort(int *array, int len)<br> {<br> &nbsp; &nbsp; int value, start,  end;<br> &nbsp; &nbsp; if (len &lt;= 1)&nbsp;<br> &nbsp; &nbsp; &nbsp; &nbsp; return;&nbsp;<br> &nbsp; &nbsp; value =  array[0];&nbsp;<br> &nbsp; &nbsp; start = 0;&nbsp;<br> &nbsp; &nbsp; end = len - 1;&nbsp;<br> &nbsp; &nbsp; while  (start &lt; end) {&nbsp;<br> &nbsp; &nbsp; &nbsp; &nbsp; for (; start &lt; end; --end) {&nbsp;<br> &nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (array[end] &lt; value) {&nbsp;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  <u>&nbsp;&nbsp;&nbsp;&nbsp;</u>&nbsp;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;&nbsp;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }&nbsp;<br> &nbsp; &nbsp; &nbsp; &nbsp;  }&nbsp;<br> &nbsp; &nbsp; &nbsp; &nbsp; for (; start &lt; end; ++start) {&nbsp;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if  (array[start] &gt; value)<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  <u>&nbsp;&nbsp;&nbsp;&nbsp;</u><br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; break;<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br> &nbsp; &nbsp; &nbsp; &nbsp; }<br>  &nbsp; &nbsp; }<br> &nbsp; &nbsp; <u>&nbsp;&nbsp;&nbsp;&nbsp;</u><br> &nbsp; &nbsp; qsort(array, <u>&nbsp;&nbsp;&nbsp;&nbsp;</u>);<br> &nbsp; &nbsp;  qsort(<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>, <u>&nbsp;&nbsp;&nbsp;&nbsp;</u>);<br> }<br>  <br></div></div>','<div><p>  答案：</p><p></p><div><div id=\\\"highlighter_595930\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp plain\\\">array[start++] = array[end];</code></div><div><code class=\\\"cpp plain\\\">array[end--] = array[start];</code></div><div><code class=\\\"cpp plain\\\">array[start] = value;</code></div><div><code class=\\\"cpp plain\\\">start</code></div><div><code class=\\\"cpp plain\\\">array+start+1, len-start-1</code></div></div></td></tr></tbody></table></div></div><p></p></div>',4,'5',1,2),(158,4,'<div><div>  假设基本数据为整型，输入为一串无序的整数，请用堆排序的方式对该整数串排序（增序），有重复时保留重复的数。 </div> <div>  &nbsp;测试数据:[3,6,23,4,3,2,9,10,18,11]&nbsp; </div> <div>  （1）堆排序的思想，使用情况一般是什么？ </div> <div>  （2）算法所需要的数据结构？&nbsp; </div> <div>  （3）用你习惯的语言或者伪代码实现你的算法？ </div></div>','<div><div>  1.堆排序的目的是建立一种树结构，使得子节点总是大于（或小于）父节点。<br> 堆排序多用于实现优先队列。<br>  当排序可能终止，并且需要从已处理的数据选出最大的几个数据时，可以使用堆排序。<br> 2.使用线性数据结构比如数组就可以实现堆排序<br> 3.<br>  <div><div id=\\\"highlighter_999226\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div><div class=\\\"line number22 index21 alt1\\\">22</div><div class=\\\"line number23 index22 alt2\\\">23</div><div class=\\\"line number24 index23 alt1\\\">24</div><div class=\\\"line number25 index24 alt2\\\">25</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp preprocessor\\\">#define LeftChild(i) (2*(i)+1)</code></div><div><code class=\\\"cpp keyword bold\\\">void</code> <code class=\\\"cpp plain\\\">perc_down(</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">a[], </code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">i, </code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">N)</code></div><div><code class=\\\"cpp plain\\\">{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">child;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">tmp;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">for</code><code class=\\\"cpp plain\\\">(tmp = a[i]; LeftChild(i) &lt; N; i = child)</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">child = LeftChild(i);</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">if</code><code class=\\\"cpp plain\\\">(child!=N-1 &amp;&amp; A[child+1]&gt;A[child])&nbsp; child++;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">if</code><code class=\\\"cpp plain\\\">(tmp &lt; a[child]; a[i] = a[child];</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">else</code> <code class=\\\"cpp keyword bold\\\">break</code><code class=\\\"cpp plain\\\">;</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">A[i] = tmp;</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number15 index14 alt2\\\">&nbsp;</div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"cpp keyword bold\\\">void</code> <code class=\\\"cpp plain\\\">headsort(</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">a[], </code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">N)</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"cpp plain\\\">{</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">i;</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">for</code><code class=\\\"cpp plain\\\">(i = N/2; i &gt;= 0; i--) perc_down(A, i, N);</code></div><div class=\\\"line number20 index19 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">for</code><code class=\\\"cpp plain\\\">(i = N-1; i &gt; 0; i--)</code></div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">{</code></div><div class=\\\"line number22 index21 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">swap(&amp;A[0], &amp;A[i]);</code></div><div class=\\\"line number23 index22 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">perc_down(A, 0, i);</code></div><div class=\\\"line number24 index23 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number25 index24 alt2\\\"><code class=\\\"cpp plain\\\">}</code></div></div></td></tr></tbody></table></div></div>  <br></div></div>',10,'1',1,2),(159,4,'<div>编一个程序，输入10个整数，并放在数组中，先降序输出所有的数，再统计并输出其中正数、负数和零的个数。</div>','<div>考基本功夫<br><div><div id=\\\"highlighter_882483\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div><div class=\\\"line number22 index21 alt1\\\">22</div><div class=\\\"line number23 index22 alt2\\\">23</div><div class=\\\"line number24 index23 alt1\\\">24</div><div class=\\\"line number25 index24 alt2\\\">25</div><div class=\\\"line number26 index25 alt1\\\">26</div><div class=\\\"line number27 index26 alt2\\\">27</div><div class=\\\"line number28 index27 alt1\\\">28</div><div class=\\\"line number29 index28 alt2\\\">29</div><div class=\\\"line number30 index29 alt1\\\">30</div><div class=\\\"line number31 index30 alt2\\\">31</div><div class=\\\"line number32 index31 alt1\\\">32</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">void</code> &nbsp;<code class=\\\"java plain\\\">test22() {</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">const</code> <code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">num = </code><code class=\\\"java value\\\">10</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">a[num];</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java comments\\\">//接受输入</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">; i &lt; num; i++) {</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">scanf(</code><code class=\\\"java string\\\">\\\"%d\\\"</code><code class=\\\"java plain\\\">, &amp; a[i]);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">}</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java comments\\\">//排序</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">temp = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">; i &lt; num - </code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">; i++) {</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">j = i + </code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">; j &lt; num; j++) {</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(a[i] &gt; a[j]) {</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">temp = a[i];</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">a[i] = a[j];</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">a[j] = temp;</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number19 index18 alt2\\\">&nbsp;</div><div class=\\\"line number20 index19 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java comments\\\">//统计`</code></div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">int</code> &nbsp;<code class=\\\"java plain\\\">x = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">, y = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">, z = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;</code></div><div class=\\\"line number22 index21 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">; i &lt; num; i++) {</code></div><div class=\\\"line number23 index22 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(a[i] &lt; </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">)</code></div><div class=\\\"line number24 index23 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">x++;</code></div><div class=\\\"line number25 index24 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">else</code> <code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(a[i] == </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">)</code></div><div class=\\\"line number26 index25 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">y++;</code></div><div class=\\\"line number27 index26 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">else</code></div><div class=\\\"line number28 index27 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">z++;</code></div><div class=\\\"line number29 index28 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">printf(</code><code class=\\\"java string\\\">\\\" %d \\\"</code><code class=\\\"java plain\\\">, a[i]);</code></div><div class=\\\"line number30 index29 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number31 index30 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">printf(</code><code class=\\\"java string\\\">\\\"x=%d, y=%d, z=%d \\\"</code><code class=\\\"java plain\\\">, x, y, z);</code></div><div class=\\\"line number32 index31 alt1\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'2',1,2),(160,4,'<div>写一段代码，尝试在以下文本中搜索并打印出包含单词\\\"your\\\"(不区分大小写)的句子，并且按照出现次数从高到低排序 。<br> Make yourself at home.<br> None of your business.<br> I will be more careful.<br> How about going to a move?<br> Your life is your own affair<br> ...<br></div>','<div><div><div id=\\\"highlighter_728505\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div><div class=\\\"line number22 index21 alt1\\\">22</div><div class=\\\"line number23 index22 alt2\\\">23</div><div class=\\\"line number24 index23 alt1\\\">24</div><div class=\\\"line number25 index24 alt2\\\">25</div><div class=\\\"line number26 index25 alt1\\\">26</div><div class=\\\"line number27 index26 alt2\\\">27</div><div class=\\\"line number28 index27 alt1\\\">28</div><div class=\\\"line number29 index28 alt2\\\">29</div><div class=\\\"line number30 index29 alt1\\\">30</div><div class=\\\"line number31 index30 alt2\\\">31</div><div class=\\\"line number32 index31 alt1\\\">32</div><div class=\\\"line number33 index32 alt2\\\">33</div><div class=\\\"line number34 index33 alt1\\\">34</div><div class=\\\"line number35 index34 alt2\\\">35</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">#include&lt;iostream&gt;</code></div><div><code class=\\\"java plain\\\">#include&lt;map&gt;</code></div><div><code class=\\\"java plain\\\">#include&lt;string&gt;</code></div><div><code class=\\\"java plain\\\">#include&lt;algorithm&gt;</code></div><div><code class=\\\"java plain\\\">using namespace std;</code></div><div><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">main()</code></div><div><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">string strText[] = {</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java string\\\">\\\"Make yourself at home.\\\"</code><code class=\\\"java plain\\\">,</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java string\\\">\\\"None of your business.\\\"</code><code class=\\\"java plain\\\">,</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java string\\\">\\\"I will be more careful.\\\"</code><code class=\\\"java plain\\\">,</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java string\\\">\\\"How about going to a move?\\\"</code><code class=\\\"java plain\\\">,</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java string\\\">\\\"Your life is your own affair\\\"</code><code class=\\\"java plain\\\">};</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;</code>&nbsp;</div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</code><code class=\\\"java plain\\\">map&lt;string,</code><code class=\\\"java keyword\\\">int</code><code class=\\\"java plain\\\">&gt; my_map;</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">count_of_word;</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</code>&nbsp;</div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">for</code><code class=\\\"java plain\\\">(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i=</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;i&lt;sizeof(strText)/sizeof(string);i++)</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">{</code></div><div class=\\\"line number20 index19 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">string result(strText[i]);</code></div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">count_of_word=</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;</code></div><div class=\\\"line number22 index21 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">c =</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;</code></div><div class=\\\"line number23 index22 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">transform(strText[i].begin(),strText[i].end(),result.begin(),::tolower);</code></div><div class=\\\"line number24 index23 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">while</code><code class=\\\"java plain\\\">((c=result.find(</code><code class=\\\"java string\\\">\\\"your\\\"</code><code class=\\\"java plain\\\">,c))!=string::npos)</code></div><div class=\\\"line number25 index24 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">{</code></div><div class=\\\"line number26 index25 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">count_of_word++;</code></div><div class=\\\"line number27 index26 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">c++;</code></div><div class=\\\"line number28 index27 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number29 index28 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">my_map.insert(map&lt;string,</code><code class=\\\"java keyword\\\">int</code><code class=\\\"java plain\\\">&gt;::value_type(strText[i],count_of_word));</code></div><div class=\\\"line number30 index29 alt1\\\">&nbsp;</div><div class=\\\"line number31 index30 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number32 index31 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;</code>&nbsp;</div><div class=\\\"line number33 index32 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">for</code><code class=\\\"java plain\\\">(map&lt;string,</code><code class=\\\"java keyword\\\">int</code><code class=\\\"java plain\\\">&gt;::iterator item = my_map.begin();item != my_map.end();item++)</code></div><div class=\\\"line number34 index33 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">cout &lt;&lt; item-&gt;second &lt;&lt; </code><code class=\\\"java string\\\">\\\" \\\"</code><code class=\\\"java plain\\\">&lt;&lt; item-&gt;first &lt;&lt; endl;</code></div><div class=\\\"line number35 index34 alt2\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'3',1,2),(161,1,'<div><div>  有函数int func(int i)的实现为 </div><div><div id=\\\"highlighter_423055\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">func(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i)</code></div><div><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(i &gt; </code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">)</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">i * func(i - </code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">else</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java plain\\\">}</code></div><div>&nbsp;</div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;</code>&nbsp;</div></div></td></tr></tbody></table></div></div>  请问函数调用func(5)的返回值是多少（）<ul><li>5</li><li>15</li><li>20</li><li>120</li><ul></ul></ul></div>','<div>D</div>',2,'1',1,3),(162,1,'<div>任何一个递归过程都可以转换成非递归过程()<ul><li>对</li><li>错</li><ul></ul></ul></div>','<div>A</div>',2,'2',1,3),(163,1,'<div>4个圆盘的Hanoi塔,总的移动次数为()<ul><li>7</li><li>8</li><li>15</li><li>16</li><ul></ul></ul></div>','<div>C</div>',2,'3',1,3),(164,1,'<div>设有递归算法如下，<br><div><div id=\\\"highlighter_981880\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">x(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">n)</code></div><div><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(n&lt;=</code><code class=\\\"java value\\\">3</code><code class=\\\"java plain\\\">)</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java keyword\\\">else</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">x(n-</code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">)+x(n-</code><code class=\\\"java value\\\">4</code><code class=\\\"java plain\\\">)+</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div> 试问计算x(x(8))时需要计算（）次x函数。<br><ul><li>8</li><li>9</li><li>16</li><li>18</li><ul></ul></ul></div>','<div>D</div>',2,'4',1,3),(165,1,'<div>对n个记录的线性表进行快速排序为减少算法的递归深度,以下叙述正确的是()<ul><li>每次分区后,先处理较短的部分</li><li>每次分区后,先处理较长的部分</li><li>与算法每次分区后的处理顺序无关</li><li>以上三者都不对</li><ul></ul></ul></div>','<div>A</div>',2,'5',1,3),(166,3,'<div><div><div id=\\\"highlighter_373117\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">Recurse(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">a, </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">b)</code></div><div><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(a &gt;= b)</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(a == b)</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">a;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">else</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">}</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">else</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">{</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">Recurse(a + </code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">, b - </code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">) + a + b;</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div>  假设a=8，b=2012，Recurse函数的返回值是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></div>','<div>a,b会等于(2012+8)/2=1010, 结果1010+（2012+8）*（1010-8）=2025050</div>',4,'3',1,3),(167,4,'<div>一列数的规则如下:1、1、2、3、5、8、13、21、34......求第30位数是多少， 用递归算法实现。</div>','<div><div><div id=\\\"highlighter_46037\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp preprocessor\\\">#include&lt;stdio.h&gt;</code></div><div><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">fib(</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">n){</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">if</code><code class=\\\"cpp plain\\\">(n&lt;=2) {</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">1;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">} </code><code class=\\\"cpp keyword bold\\\">else</code> <code class=\\\"cpp plain\\\">{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">fib(n-1) + fib(n-2);</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div><code class=\\\"cpp plain\\\">}</code></div><div><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">main(){</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp functions bold\\\">printf</code><code class=\\\"cpp plain\\\">(</code><code class=\\\"cpp string\\\">\\\"%d\\n\\\"</code><code class=\\\"cpp plain\\\">,fib(30));</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">0;</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"cpp plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'5',1,3),(168,4,'<div>反转二叉树，即交换所有结点的左右子树，但不能使用递归方法。<br> 二叉树结构如下：<br><div><div id=\\\"highlighter_828518\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">TreeNode{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">TreeNode left,right; &nbsp; </code><code class=\\\"java comments\\\">//左右子树</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">DataType data; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java comments\\\">//数据</code></div><div><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>','<div><div><div id=\\\"highlighter_175113\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">void</code> <code class=\\\"java plain\\\">NonRecursive_Exchange(TreeNode *T)</code></div><div><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">Stack s;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">TreeNode *p;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(NULL == T)</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">return</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">InitStack(&amp;s);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">Push(&amp;s, T);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">while</code> <code class=\\\"java plain\\\">(!isEmpty(&amp;s))</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">T = Pop(&amp;s);</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">p = T-&gt;left;</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">T-&gt;left = T-&gt;right;</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">T-&gt;right = p;</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(T-&gt;right )</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">Push(&amp;s, T-&gt;right );</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(T-&gt;left )</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">Push(&amp;s, T-&gt;left );</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number20 index19 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">DestroyStack(&amp;s);</code></div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'3',1,3),(169,4,'<div><div>  写程序找出二叉树的深度&nbsp; </div><div>  一个树的深度等于max（左子树深度，右子树深度）+1.可以使用递归实现。 </div></div>','<div><div>  假设节点为定义为</div><div> <br></div><div><div id=\\\"highlighter_204696\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">struct Node</code></div><div><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">Node *left;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">Node *right;</code></div><div>&nbsp;</div><div><code class=\\\"java plain\\\">};</code></div><div><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">GetDepth(Node *root)</code></div><div><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(NULL == root)</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;</code></div><div class=\\\"line number12 index11 alt1\\\">&nbsp;</div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">left_depth = GetDepth(root-&gt;left);</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">right_depth = GetDepth(root-&gt;right);</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">left_depth &gt; right_depth ? left_depth + </code><code class=\\\"java value\\\">1</code> <code class=\\\"java plain\\\">: right_depth + </code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">;</code></div><div class=\\\"line number17 index16 alt2\\\">&nbsp;</div><div class=\\\"line number18 index17 alt1\\\">&nbsp;</div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'4',1,3),(170,1,'<div>计算三个稠密矩阵 A、B、C 的乘积 ABC，假定三个矩阵的尺寸分别为 m*n, n*p,p*q，且 m&lt;n&lt;p&lt;q,以下计算效率最高的是<br><ul><li>(AB)C</li><li>A(BC)</li><li>(AC)B</li><li>(BC)A</li><li>(CA)B</li><ul></ul></ul></div>','<div>A</div>',2,'4',1,4),(171,2,'<div>下面使用贪心算法的是？<ul><li>单元最短路径 Dijkstra 算法</li><li>最小生成树 Prim 算法</li><li>最小生成树 Kruskal 算法</li><li>计算每对顶点最短路径的 Floyd-Warshall 算法</li><ul></ul></ul></div>','<div>ABC</div>',4,'3',1,4),(172,3,'<div>7*7的方格， 在左下角格子走到右上角格子，跨一方格为1步，最短路径前提下一共有<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>种不同路径？</div>','<div>924</div>',4,'3',1,4),(173,4,'<div>任意2n个整数，从其中选出n个整数，使得选出的n个整数和同剩下的n个整数之和的差最小。</div>','<div><div><div id=\\\"highlighter_232697\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">int</code>&nbsp; <code class=\\\"java plain\\\">solve() </code></div><div><code class=\\\"java plain\\\">{ </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">int</code>&nbsp; <code class=\\\"java plain\\\">i&nbsp;,&nbsp;j&nbsp;,&nbsp;s; </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">int</code>&nbsp; <code class=\\\"java plain\\\">dp[N+</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">][SUM/</code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">+</code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">]; </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">memset(dp,</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">,sizeof (dp)); </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(i&nbsp;=&nbsp;</code><code class=\\\"java value\\\">1</code>&nbsp;<code class=\\\"java plain\\\">;&nbsp;i&nbsp;&lt;=&nbsp;</code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">*N&nbsp;;&nbsp;++i) </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">{ </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(j&nbsp;=&nbsp;</code><code class=\\\"java value\\\">1</code>&nbsp;<code class=\\\"java plain\\\">;&nbsp;j&nbsp;&lt;=&nbsp;min(i,N)&nbsp;;&nbsp;++j) </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">{ </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(s&nbsp;=&nbsp;SUM/</code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">+</code><code class=\\\"java value\\\">1</code>&nbsp;<code class=\\\"java plain\\\">;&nbsp;s&nbsp;&gt;=&nbsp;arr[i]&nbsp;;&nbsp;--s) </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">{ </code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">dp[j][s]&nbsp;=&nbsp;max(dp[j-</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">][s-arr[i]]+arr[i]&nbsp;,&nbsp;dp[j][s]); </code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">} </code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">} </code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">} </code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">return</code>&nbsp; <code class=\\\"java plain\\\">dp[N][SUM/</code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">+</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">]; </code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><p>  <br></p><p></p></div>',10,'4',1,4),(175,1,'<div>哈夫曼树、平衡二叉树都是数据的逻辑结构()<ul><li>对</li><li>错</li><ul></ul></ul></div>','<div>A</div>',2,'2',1,5),(176,1,'<div>在顺序表（3,6,8,10,12,15,16,18,21,25,30）中，用二分法查找关键码值11，所需的关键码比较次数为<ul><li>2</li><li>3</li><li>4</li><li>5</li><ul></ul></ul></div>','<div>C</div>',2,'3',1,5),(177,1,'<div>假定x=500，求下面函数的返回值______ 。<br><div><div id=\\\"highlighter_936537\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">fun(</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">x)</code></div><div><code class=\\\"cpp plain\\\">{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">countx = 0;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">while</code> <code class=\\\"cpp plain\\\">(x)</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">countx++;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">x = x &amp; (x – 1);</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">countx;</code></div><div><code class=\\\"cpp plain\\\">｝</code></div></div></td></tr></tbody></table></div></div><ul><li>2</li><li>3</li><li>5</li><li>6</li><ul></ul></ul></div>','<div>D</div>',2,'4',1,5),(178,1,'<div>求 2n 个数中的最大值和最小值，最少的比较次数是？<ul><li>4n/3</li><li>2n-2</li><li>3n-2</li><li>3n/2</li><ul></ul></ul></div>','<div>C</div>',2,'5',1,5),(179,2,'<div>关于堆排序复杂度分析的叙述中正确的是（）<ul><li>整个构建堆的时间复杂度为O(n)</li><li>堆排序是一种不稳定的排序算法</li><li>堆排序的时间复杂度为O(nlogn)</li><li>堆排序的空间复杂度为O(1)</li><ul></ul></ul></div>','<div>ABCD</div>',4,'1',1,5),(180,2,'<div>以下哪些算法可用于遍历网络图？<ul><li>广度优先搜索</li><li>深度优先搜索</li><li>线性规划策略</li><li>决策树</li><ul></ul></ul></div>','<div>AB</div>',4,'2',1,5),(181,2,'<div>已知一段文本有1382个字符，使用了1382个字节存储，这段文本全部是由a、b、c、d、e字符组成，a 354次，b 483次，c 227次，d96次，e 222次，对这5个字符使用哈夫曼编码。则以下说法正确的是？<ul><li>使用哈夫曼编码后，使用编码值来存储这段文本将花费最少的存储空间、</li><li>使用哈夫曼编码后，a b c d e 这5个字符对应的编码值是唯一确定的</li><li>使用哈夫曼编码后，a b c d e 这5个字符对应的编码值可以有多套，但每个字符的编码位数是确定的</li><li>b这个字符的编码位数最短，d这个字符的哈夫曼编码位数应该最长</li><ul></ul></ul></div>','<div>ACD</div>',4,'3',1,5),(182,2,'<div>存在以下字母串：AGDCCDDDGFBBFFGGDDDGGGEFFDDCCCDDDFGAAA现在需要对该串进行huffman编码，那么字母F对应bit值（二进制格式为）（）<ul><li>10</li><li>11</li><li>110</li><li>101</li><ul></ul></ul></div>','<div>CD</div>',4,'4',1,5),(183,3,'<div>假设我们有三个箱子，分别是红色，蓝色和绿色。在红色箱子中有3个苹果，4个橘子，3个柠檬。在蓝色箱子中有1个苹果，1个橘子和0个柠檬，在绿色箱子中有3个苹果，3个橘子和4个柠檬。如果我们选择箱子的概率是红色0.2，蓝色0.2，绿色0.6，并且选择一个箱子后，以均匀的概率随机移除一个水果。如果我们发现移除的水果是橘子，那么这个橘子来自绿色箱子的概率是多少<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>？<br></div>','<div>0.5</div>',4,'3',1,5),(184,3,'<div>12个元素的排序数组进行二分查找，每个元素被查找的概率是相等的，平均比较次数为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。（分数作答）</div>','<div>37/12</div>',4,'4',1,5),(185,4,'<div>写一个函数找出一个整数数组中，第二大的数</div>','<div><div><div id=\\\"highlighter_331751\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">Find_Second_Max(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">data[],</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">n)</code></div><div><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(n&lt;</code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">) </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">-</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">max_num = max(data[</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">],data[</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">]);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">sec_num = min(data[</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">],data[</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">]);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">for</code><code class=\\\"java plain\\\">(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i=</code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">;i&lt;n;i++)</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(data[i]&gt;=max_num);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">sec_num = max_num;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">max_num = data[i];</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">else</code> <code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(data[i] &gt; sec_num)</code><code class=\\\"java comments\\\">//排除等于情况</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">sec_num = data[i];</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">sec_num;</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><div></div></div>',10,'2',1,5),(186,4,'<div>请设计一个函数可以把10进制的正整数转换为4位定长的36进制字符串。<br><br> 36进制的规则为：\\\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\";<br><br> 举例说明：<br> 1=\\\"0001\\\"<br> 10=\\\"000A\\\"<br> 20=\\\"000K\\\"<br> 35=\\\"000Z\\\"<br> 36=\\\"0010\\\"<br> 100=\\\"002S\\\"<br> 2000=\\\"01JK\\\"<br></div>','<div><div>  解题思路：对于进制这种题目，只需一直将输入的10进制数pint除以36，得到结果a1和余数b1，然后再次将结果a1除以36来获取结果a2和余数b2，如此循环直到ax为0，此时的bx...b2b1即为最终结果。 </div><div>  <br></div><div>  完整代码如下： </div><div><div id=\\\"highlighter_298198\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div><div class=\\\"line number22 index21 alt1\\\">22</div><div class=\\\"line number23 index22 alt2\\\">23</div><div class=\\\"line number24 index23 alt1\\\">24</div><div class=\\\"line number25 index24 alt2\\\">25</div><div class=\\\"line number26 index25 alt1\\\">26</div><div class=\\\"line number27 index26 alt2\\\">27</div><div class=\\\"line number28 index27 alt1\\\">28</div><div class=\\\"line number29 index28 alt2\\\">29</div><div class=\\\"line number30 index29 alt1\\\">30</div><div class=\\\"line number31 index30 alt2\\\">31</div><div class=\\\"line number32 index31 alt1\\\">32</div><div class=\\\"line number33 index32 alt2\\\">33</div><div class=\\\"line number34 index33 alt1\\\">34</div><div class=\\\"line number35 index34 alt2\\\">35</div><div class=\\\"line number36 index35 alt1\\\">36</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">#include&lt;iostream&gt;</code></div><div><code class=\\\"java plain\\\">#include&lt;string&gt;</code></div><div><code class=\\\"java plain\\\">#include&lt;cmath&gt;</code></div><div>&nbsp;</div><div><code class=\\\"java plain\\\">using namespace std;</code></div><div>&nbsp;</div><div><code class=\\\"java plain\\\">string pint_to_36str(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">pint);</code></div><div>&nbsp;</div><div><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">main() {</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">pint;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">cin&gt;&gt;pint;</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">cout&lt;&lt;pint_to_36str(pint)&lt;&lt;endl;</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number15 index14 alt2\\\">&nbsp;</div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"java plain\\\">string pint_to_36str(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">pint) {</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(pint &lt; </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">) {</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java string\\\">\\\"输入必须大于0\\\"</code><code class=\\\"java plain\\\">;</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number20 index19 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">else</code> <code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(pint &gt; pow(</code><code class=\\\"java value\\\">36</code><code class=\\\"java plain\\\">,</code><code class=\\\"java value\\\">4</code><code class=\\\"java plain\\\">) - </code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">) {</code></div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java string\\\">\\\"输入必须小于36^4\\\"</code><code class=\\\"java plain\\\">;</code></div><div class=\\\"line number22 index21 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number23 index22 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">else</code> <code class=\\\"java plain\\\">{</code></div><div class=\\\"line number24 index23 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">string sym(</code><code class=\\\"java string\\\">\\\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\"</code><code class=\\\"java plain\\\">);</code></div><div class=\\\"line number25 index24 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">string rlt(</code><code class=\\\"java string\\\">\\\"0000\\\"</code><code class=\\\"java plain\\\">);</code></div><div class=\\\"line number26 index25 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">a = pint, b;&nbsp;&nbsp;&nbsp; </code><code class=\\\"java comments\\\">//a代表当前结果, b代表当前余数</code></div><div class=\\\"line number27 index26 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i = </code><code class=\\\"java value\\\">3</code><code class=\\\"java plain\\\">;</code></div><div class=\\\"line number28 index27 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">while</code><code class=\\\"java plain\\\">(a &gt; </code><code class=\\\"java value\\\">0</code> <code class=\\\"java plain\\\">&amp;&amp; i &gt;= </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">) {</code></div><div class=\\\"line number29 index28 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">b = a % </code><code class=\\\"java value\\\">36</code><code class=\\\"java plain\\\">;</code></div><div class=\\\"line number30 index29 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">a = a / </code><code class=\\\"java value\\\">36</code><code class=\\\"java plain\\\">;</code></div><div class=\\\"line number31 index30 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">rlt[i] = sym[b];</code></div><div class=\\\"line number32 index31 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">i--;</code></div><div class=\\\"line number33 index32 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number34 index33 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">rlt;</code></div><div class=\\\"line number35 index34 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number36 index35 alt1\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'4',1,5),(187,1,'<div><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\">  <span>不考虑反射，关于私有访问控制符</span> <span>private</span> <span>修饰的成员变量，以下说法正确的是（）</span>  </p><ul><li>可以三种类所引用：该类自身、与它在同一包中的其他类，在其他包中的该类的子类</li><li>可以被两种类访问和引用：该类本身、该类的所有子类</li><li>只能被该类自身所访问和修改</li><li>只能被同一个包中的类访问</li><ul></ul></ul></div>','<div>C</div>',2,'1',2,6),(188,1,'<div><div>  <span>执行下列语句后，y的值是（ &nbsp;&nbsp;&nbsp;）。</span>  </div> <div>  <span>  <div><div id=\\\"highlighter_723321\\\" class=\\\"syntaxhighlighter  css\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"css plain\\\">int x, y;</code></div><div><code class=\\\"css plain\\\">x=y=</code><code class=\\\"css value\\\">1</code><code class=\\\"css plain\\\">; </code></div><div><code class=\\\"css plain\\\">++x || ++y;</code></div></div></td></tr></tbody></table></div></div> <br> </span>  </div><ul><li>不确定</li><li>0</li><li>1</li><li>2</li><ul></ul></ul></div>','<div>C</div>',2,'2',2,6),(189,1,'<div><div>  int &nbsp;i, sum=0; </div><div>  for(i=0;i&lt;10;++i,sum+=i); i 的最终结果是？ </div><ul><li>10</li><li>9</li><li>11</li><li>以上答案都不正确</li><ul></ul></ul></div>','<div>A</div>',2,'3',2,6),(190,1,'<div><p>  若使用数组作函数实参，则以下正确的说法是（）。 </p><ul><li>必须在主调函数中说明此数组的大小</li><li>实参数组类型与形参数组类型可以不匹配</li><li>在被调用函数中，不需要考虑形参数组的大小</li><li>实参数组名与形参数组名必须一致</li><ul></ul></ul></div>','<div>C</div>',2,'4',2,6),(191,1,'<div><div>  下面程序段的输出结果是 </div> <div><div id=\\\"highlighter_461191\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">char</code> <code class=\\\"java plain\\\">*p1 = ”</code><code class=\\\"java value\\\">123</code><code class=\\\"java plain\\\">”, *p2 = ”ABC”, str[</code><code class=\\\"java value\\\">50</code><code class=\\\"java plain\\\">] = “xyz”;</code></div><div><code class=\\\"java plain\\\">strcpy(str + </code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">, strcat(p1, p2));</code></div><div><code class=\\\"java plain\\\">printf(“%s\\n”, str);</code></div></div></td></tr></tbody></table></div></div> <br><ul><li>xyz123ABC</li><li>z123ABC</li><li>xy123ABC</li><li>出错</li><ul></ul></ul></div>','<div>D</div>',2,'5',2,6),(192,2,'<div>一个C语言程序在一台32位机器上运行，定义了两个变量x,y，其中x的数据类型为int、y的数据类型为float。已知x=2013，y=201.3，则在一个32位机器中执行下列表达式时，结果为“真”的有（）。<ul><li>y=(float)(double)y</li><li>y=(float)(int)y</li><li>x=(int)(float)x</li><li>x=(float)(int)x</li><ul></ul></ul></div>','<div>ABCD</div>',4,'1',2,6),(193,2,'<div>下面的说明汇总，正确的函数定义有（）。<ul><li>void f(void)</li><li>void f(void){}</li><li>f(int s){}</li><li>f(int s){return s+1;}</li><li>double f(){return 0.0;}</li><ul></ul></ul></div>','<div>BE</div>',4,'2',2,6),(194,2,'<div><p>  <span>若指针</span><span>p</span><span>已正确定义，要使</span><span>p</span><span>指向两个连续的整型动态存储单元，不正确的语句是（</span> <span> </span><span>）。</span>  </p><ul><li>p=2*(int*)malloc(sizeof(int));</li><li>p=(int*)malloc(2*sizeof(int));</li><li>p=(int*)malloc(2*2);</li><li>p=(int*)calloc(2,sizeof(int));</li><ul></ul></ul></div>','<div>AC</div>',4,'3',2,6),(195,2,'<div>下述有关c++的虚类和java接口的描述，说法错误的是？<ul><li>c++虚类相当与java里面的抽象类</li><li>c++中没有接口的概念，与之对应的是纯虚类，对应的是java的接口</li><li>纯虚函数和虚函数的区别在于前者只包含定义，而后者还可以包含函数体。</li><li>一个抽象类和接口中的方法必须是抽象方法</li><ul></ul></ul></div>','<div>CD</div>',4,'4',2,6),(196,2,'<div>以下数字在表示为double（8字节的双精度浮点数）时存在舍入误差的有（）。<ul><li>2的平方根</li><li>10的30次方</li><li>0.1</li><li>0.5</li><li>100</li><ul></ul></ul></div>','div>ABC</div>',4,'5',2,6),(197,3,'<div>32位环境下,char *p=\\\"helloword\\\"; sizeof(p)的值是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。</div>','<div>4</div>',4,'1',2,6),(198,3,'<div><div>  在 VS编译器以下程序的输出结果是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></div><div><div id=\\\"highlighter_801493\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">char</code> <code class=\\\"java plain\\\">s[] = </code><code class=\\\"java string\\\">\\\"123\\\"</code><code class=\\\"java plain\\\">, *p;&nbsp;</code></div><div><code class=\\\"java plain\\\">p = s;&nbsp;</code></div><div><code class=\\\"java plain\\\">printf(</code><code class=\\\"java string\\\">\\\"%c\\n\\\"</code><code class=\\\"java plain\\\">, *p++);</code></div></div></td></tr></tbody></table></div></div></div>','<div>1</div>',4,'2',2,6),(199,3,'<div>运算（93&amp;-8）的结果为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></div>','<div>88</div>',4,'3',2,6),(200,3,'<div><div>  在32位机器上 </div><div>  设有以下说明和定义： </div><div><div id=\\\"highlighter_619443\\\" class=\\\"syntaxhighlighter  js\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"js plain\\\">typedef union {</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">long i; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">int k[5]; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">char c;</code></div><div><code class=\\\"js plain\\\">} DATE;</code></div><div><code class=\\\"js plain\\\">struct data { </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">int cat; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">DATE cow; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">double dog;</code></div><div><code class=\\\"js plain\\\">} too;</code></div><div><code class=\\\"js plain\\\">DATE max;</code></div></div></td></tr></tbody></table></div></div>  则语句 printf(\\\"%d\\\",sizeof(struct data)+sizeof(max));的执行结果是：<u>&nbsp;&nbsp;&nbsp;&nbsp;</u><br></div>','<div>20</div>',4,'4',2,6),(201,3,'<div>&nbsp;阅读下列函数说明和C代码，将应填进（n）处的字句写在答题纸的对应栏内。<br>  【说明】设有一个带表头结点的双向循环链表L,每个结点有4个数据成员：指向先驱结点的指针prior、指向后继结点的指针next、存放数据的成员data和访问频度freq。所有结点的freq初始时都为0.每当在链表上进行一次L.Locate（x）操纵时，令元素值x的结点的访问频度freq加1，并将该结点前移，链接到现它的访问频度相等的结点后面，使得链表中所有结点保持按访问频度递减的顺序排列，以使频繁访问的结点总是靠近表头。<br>  【函数】<br>  void Locate(int &amp;x)<br>  {<br>  &lt; 结点类型说明 &gt;<br>  *p = first-&gt;next;<br>  while (p != first &amp;&amp; &nbsp;<u>&nbsp;&nbsp;&nbsp;&nbsp;</u> ) p = p-&gt;next;<br>  if (p != first)<br>  {<br>  <u>&nbsp;&nbsp;&nbsp;&nbsp;</u>;<br>  &lt; 结点类型说明 &gt;<br>  *current = p;<br>  current-&gt;prior-&gt;next = current-&gt;next;<br>  current-&gt;next-&gt;prior = current-&gt;prior;<br>  p = current-&gt;prior;<br>  while (p != first &amp;&amp; <u>&nbsp;&nbsp;&nbsp;&nbsp;</u>) p = p-&gt;prior;<br>  current-&gt;next = <u>&nbsp;&nbsp;&nbsp;&nbsp;</u>;<br>  current-&gt;prior = p;<br>  p-&gt;next-&gt;prior = current;<br>  p-&gt;next = <u>&nbsp;&nbsp;&nbsp;&nbsp;</u>;<br>  }<br>  else<br>  printf(\\\"Sorry. Not find!\\n\\\"); &nbsp;\\*没找到*\\<br>  }<br><br></div>','<div><div> 分析一下： </div><div>  <div>    <span>首先要找到这个x值，所以在1的位置应该填入：p-&gt;data!=x</span>  </div>  <div>    <span>找到x以后，需要对该值对应的频率值加1，也就是应该在2的位置应该对p-&gt;freq进行加1操作</span>  </div>  <div>    <span>然后是进行排序，因为默认前面的是已经排好序的了，所以只要向前遍历找第一个大于当前被更改的freq的结点就行，所以在3的位置应该填入：current-&gt;freq      &gt; p-&gt;freq</span>  </div>  <div>    <span>接下来进行结点的交换：</span>  </div>  <div>    <span>在4填入：p-&gt;next</span>  </div>  <div>    <span>在5填入：current</span>  </div>  <br></div></div>',4,'5',2,6),(202,4,'<div>成员函数与友元函数之间的区别是什么？</div>','<div>成员函数是类定义的一部分，通过特定的对象来调用。成员函数可以隐式访问调用对象的成员，而无需使用成员运算符。友元函数 不是类的组成部分，因此被称为直接函数调用。友元函数不能隐式访问类成员，而必须将成员运算符用于作为参数传递的对象</div>',10,'1',2,6),(203,4,'<div>请找出下面用于拷贝内存的代码中的逻辑错误，并修正。<br><div><div id=\\\"highlighter_191786\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">void</code> <code class=\\\"java plain\\\">memcpy(</code><code class=\\\"java keyword\\\">const</code> <code class=\\\"java keyword\\\">char</code><code class=\\\"java plain\\\">* src,</code><code class=\\\"java keyword\\\">char</code><code class=\\\"java plain\\\">* dest){</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">len=strlen(src);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">dest=(</code><code class=\\\"java keyword\\\">char</code><code class=\\\"java plain\\\">*)malloc(len);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">char</code><code class=\\\"java plain\\\">* d=dest;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">char</code><code class=\\\"java plain\\\">* s=src;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">while</code><code class=\\\"java plain\\\">(len--!=</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">){</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">*d=*s;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">d++;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">s++;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><div>  <br></div></div>','<div><div>  答案： </div><div>  主要两个问题，一是没有为字符串结束符‘\\0’申请空间，一是没有拷贝结束符。 </div><div>  代码如下 </div><div>  <div><div id=\\\"highlighter_788745\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">void</code> <code class=\\\"java plain\\\">memcpy(</code><code class=\\\"java keyword\\\">const</code> <code class=\\\"java keyword\\\">char</code><code class=\\\"java plain\\\">* src,</code><code class=\\\"java keyword\\\">char</code><code class=\\\"java plain\\\">* dest){ &nbsp;&nbsp;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">len=strlen(src); &nbsp; &nbsp;</code></div><div><code class=\\\"java plain\\\">dest=(</code><code class=\\\"java keyword\\\">char</code><code class=\\\"java plain\\\">*)malloc(len+</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">); &nbsp; &nbsp;</code></div><div><code class=\\\"java keyword\\\">char</code><code class=\\\"java plain\\\">* d=dest; &nbsp; &nbsp;</code></div><div><code class=\\\"java keyword\\\">char</code><code class=\\\"java plain\\\">* s=src; &nbsp; &nbsp;</code></div><div><code class=\\\"java keyword\\\">while</code><code class=\\\"java plain\\\">(len--!=</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">)</code></div><div><code class=\\\"java plain\\\">{ &nbsp; &nbsp; &nbsp; &nbsp;</code></div><div><code class=\\\"java plain\\\">*d=*s; &nbsp; &nbsp; &nbsp; &nbsp;</code></div><div><code class=\\\"java plain\\\">d++; &nbsp; &nbsp; &nbsp;&nbsp;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">s++; &nbsp; &nbsp;</code></div><div><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java plain\\\">*d=’\\</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">’;</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div>  <br></div></div>',10,'2',2,6),(204,4,'<div>指出下面代码有什么问题？ <div>  <div><div id=\\\"highlighter_431813\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp keyword bold\\\">void</code>&nbsp;<code class=\\\"cpp plain\\\">test3(</code><code class=\\\"cpp color1 bold\\\">char</code><code class=\\\"cpp plain\\\">*&nbsp;str1) </code></div><div><code class=\\\"cpp plain\\\">{ </code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp keyword bold\\\">if</code><code class=\\\"cpp plain\\\">(str1 == NULL){</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp color1 bold\\\">char</code>&nbsp;<code class=\\\"cpp plain\\\">string[10]; </code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp keyword bold\\\">if</code><code class=\\\"cpp plain\\\">(&nbsp;</code><code class=\\\"cpp functions bold\\\">strlen</code><code class=\\\"cpp plain\\\">(&nbsp;str1&nbsp;)&nbsp;&lt;=&nbsp;10&nbsp;) </code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp plain\\\">{ </code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp functions bold\\\">strcpy</code><code class=\\\"cpp plain\\\">(&nbsp;string,&nbsp;str1&nbsp;); </code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp plain\\\">} </code></div><div><code class=\\\"cpp plain\\\">}</code></div></div></td></tr></tbody></table></div></div></div></div>','<div><span style=\\\"color: rgb(51,51,51);\\\">if(strlen(str1)&nbsp;&lt;=&nbsp;10)应改为if(strlen(str1)&nbsp;&lt;&nbsp;10)，因为strlen的结果未统计’\\0’所占用的1个字节。</span><span style=\\\"color: rgb(51,51,51);\\\">&nbsp;</span></div>',10,'3',2,6),(205,4,'<div><div>  分析下面代码有什么问题？ </div><div>  <div><div id=\\\"highlighter_629282\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp keyword bold\\\">void</code>&nbsp;<code class=\\\"cpp plain\\\">test1() </code></div><div><code class=\\\"cpp plain\\\">{ </code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp color1 bold\\\">char</code>&nbsp;<code class=\\\"cpp plain\\\">string[10]; </code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp color1 bold\\\">char</code><code class=\\\"cpp plain\\\">*&nbsp;str1&nbsp;=&nbsp;</code><code class=\\\"cpp string\\\">\\\"0123456789\\\"</code><code class=\\\"cpp plain\\\">; </code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp functions bold\\\">strcpy</code><code class=\\\"cpp plain\\\">(&nbsp;string,&nbsp;str1&nbsp;); </code></div><div><code class=\\\"cpp plain\\\">}</code></div></div></td></tr></tbody></table></div></div></div></div>','<div><span style=\\\"color: rgb(51,51,51);\\\">字符串str1需要11个字节才能存放下（包括末尾的’\\0’），而string只有10个字节的空间，strcpy会导致数组越界；</span><span style=\\\"color: rgb(51,51,51);\\\">&nbsp;</span></div>',10,'4',2,6),(206,1,'<div><p>  <span>下面不是类及类成员的访问控制符的是<span>(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )。（不考虑内部类的情况）</span></span>  </p><ul><li>public</li><li>private</li><li>static</li><li>protected</li><ul></ul></ul></div>','<div>C</div>',2,'1',2,7),(207,1,'<div><span>下列程序段的输出结果是：（</span> <span>）</span> <span> <br> public void complicatedexpression_r(){<br> &nbsp;&nbsp;&nbsp;&nbsp;int x=20, y=30;<br> &nbsp;&nbsp;&nbsp;&nbsp;boolean   b;<br> &nbsp;&nbsp;&nbsp;&nbsp;b = x &gt; 50 &amp;&amp; y &gt; 60 || x &gt; 50 &amp;&amp; y &lt; -60 || x &lt; -50 &amp;&amp; y &gt; 60 || x &lt; -50 &amp;&amp; y &lt; -60;<br> &nbsp;&nbsp;&nbsp;&nbsp;System.out.println(b);<br> }<br> </span><ul><li>true</li><li>false</li><li>1</li><li>0</li><ul></ul></ul></div>','<div>B</div>',2,'1',2,7),(208,1,'<div><div><div id=\\\"highlighter_615679\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp keyword bold\\\">public</code> <code class=\\\"cpp plain\\\">boolean returnTest()</code></div><div><code class=\\\"cpp plain\\\">{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">try</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp keyword bold\\\">true</code><code class=\\\"cpp plain\\\">;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">catch</code> <code class=\\\"cpp plain\\\">(Exception e)</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">{</code></div><div>&nbsp;</div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">finally</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">{</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp keyword bold\\\">false</code><code class=\\\"cpp plain\\\">;</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"cpp plain\\\">}</code></div></div></td></tr></tbody></table></div></div> 以上代码返回值是什么？<br><ul><li>true</li><li>false</li><ul></ul></ul></div>','<div>B</div>',2,'2',2,7),(209,1,'<div><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\">  <span>A</span>  <span>派生出子类</span>  <span>B</span>  <span>，</span>  <span>B</span>  <span>派生出子类</span>  <span>C</span>  <span>，并且在</span>  <span>java</span>  <span>源代码有如下声明：</span></p><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\">  <span>1. </span>  <span>A a0=new A();</span></p><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\">  <span>2. </span>  <span>A a1=new B();</span></p><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\">  <span>3. </span>  <span>A a2=new C();</span></p><p>  <span>问以下哪个说法是正确的？（）</span></p><ul><li>只有第一行能通过编译</li><li>第1、2行能通过编译，但第3行编译出错</li><li>第1、2、3行能通过编译，但第2、3行运行时出错</li><li>第1行，第2行和第3行的声明都是正确的</li><ul></ul></ul></div>','<div>D</div>',2,'2',2,7),(210,1,'<div>检查程序，是否存在问题，如果存在指出问题所在，如果不存在，说明输出结果。<br><div><div id=\\\"highlighter_560930\\\" class=\\\"syntaxhighlighter  js\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"js plain\\\">package algorithms.com.guan.javajicu;&nbsp; </code></div><div><code class=\\\"js plain\\\">public class Example {&nbsp; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;</code><code class=\\\"js plain\\\">String str = </code><code class=\\\"js keyword\\\">new</code> <code class=\\\"js plain\\\">String(</code><code class=\\\"js string\\\">\\\"good\\\"</code><code class=\\\"js plain\\\">);&nbsp; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;</code><code class=\\\"js plain\\\">char[] ch = {</code><code class=\\\"js string\\\">\'a\'</code><code class=\\\"js plain\\\">,</code><code class=\\\"js string\\\">\'b\'</code><code class=\\\"js plain\\\">,</code><code class=\\\"js string\\\">\'c\'</code><code class=\\\"js plain\\\">};&nbsp; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;</code><code class=\\\"js plain\\\">public static void main(String[] args) {&nbsp; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">Example ex = </code><code class=\\\"js keyword\\\">new</code> <code class=\\\"js plain\\\">Example();&nbsp; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">ex.change(ex.str, ex.ch);&nbsp; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">System.out.print(ex.str +</code><code class=\\\"js string\\\">\\\"and\\\"</code><code class=\\\"js plain\\\">);&nbsp; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">System.out.print(ex.ch);&nbsp;&nbsp; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;</code><code class=\\\"js plain\\\">}&nbsp; </code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;</code><code class=\\\"js plain\\\">public void change(String str, char ch[]){&nbsp; </code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">str= </code><code class=\\\"js string\\\">\\\"test ok\\\"</code><code class=\\\"js plain\\\">;&nbsp; </code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">ch[0]= </code><code class=\\\"js string\\\">\'g\'</code><code class=\\\"js plain\\\">;&nbsp; </code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;</code><code class=\\\"js plain\\\">}&nbsp; </code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"js plain\\\">}&nbsp; </code></div></div></td></tr></tbody></table></div></div><ul><li>test okandabc</li><li>test okandgbc</li><li>goodandabc</li><li>goodandgbc</li><ul></ul></ul></div>','<div>D</div>',2,'2',2,7),(211,1,'<div><p>  <span>如下代码的</span><span>输出结果是什么？</span>  </p> <div><div id=\\\"highlighter_36017\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">public</code> <code class=\\\"java keyword\\\">class</code> <code class=\\\"java plain\\\">Test { </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">public</code> <code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">aMethod(){</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">static</code> <code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">i++; </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">i;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">} </code></div><div><code class=\\\"java keyword\\\">public</code> <code class=\\\"java keyword\\\">static</code> <code class=\\\"java keyword\\\">void</code> <code class=\\\"java plain\\\">main(String args[]){</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">Test test = </code><code class=\\\"java keyword\\\">new</code> <code class=\\\"java plain\\\">Test(); </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">test.aMethod(); </code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">j = test.aMethod();</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">System.out.println(j);</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">} </code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div> <br><ul><li>0</li><li>1</li><li>2</li><li>编译失败</li><ul></ul></ul></div>','<div>D</div>',2,'4',2,7),(212,1,'<div>在创建派生类对象，构造函数的执行顺序（）<ul><li>基类构造函数，派生类对象成员构造函数，派生类本身的构造函数</li><li>派生类本身的构造函数，基类构造函数，对象成员构造函数</li><li>基类构造函数，派生类本身的构造函数，派生类对象成员构造函数</li><li>对象成员构造函数，基类构造函数，派生类本身的构造函数</li><ul></ul></ul></div>','<div>A</div>',2,'5',2,7),(213,1,'<div><div>  代码片段：&nbsp; </div><div><div id=\\\"highlighter_757792\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">byte</code> <code class=\\\"java plain\\\">b1=</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">,b2=</code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">,b3,b6;&nbsp; </code></div><div><code class=\\\"java keyword\\\">final</code> <code class=\\\"java keyword\\\">byte</code> <code class=\\\"java plain\\\">b4=</code><code class=\\\"java value\\\">4</code><code class=\\\"java plain\\\">,b5=</code><code class=\\\"java value\\\">6</code><code class=\\\"java plain\\\">;&nbsp; </code></div><div><code class=\\\"java plain\\\">b6=b4+b5;&nbsp; </code></div><div><code class=\\\"java plain\\\">b3=(b1+b2);&nbsp; </code></div><div><code class=\\\"java plain\\\">System.out.println(b3+b6);</code></div></div></td></tr></tbody></table></div></div><div>  关于上面代码片段叙述正确的是（） </div><ul><li>输出结果：13</li><li>语句：b6=b4+b5编译出错</li><li>语句：b3=b1+b2编译出错</li><li>运行期抛出异常</li><ul></ul></ul></div>','<div>C</div>',2,'5',2,7),(214,2,'<div><p>  <span>已知</span> <span>boolean result</span>&nbsp; = false<span>，则下面哪个选项是合法的：</span>  </p><ul><li>result=1</li><li>result=true;</li><li>if(result!=0) {//so something…}</li><li>if(result) {//do something…}</li><ul></ul></ul></div>','<div>BD</div>',4,'1',2,7),(215,2,'<div>下面哪些可能是重载的基本条件（）（注意：是可能为重载的基本条件）<ul><li>参数的类型不同</li><li>参数的顺序不同</li><li>函数的返回值类型不同</li><li>参数的个数不同</li><ul></ul></ul></div>','<div>ABD</div>',4,'2',2,7),(216,2,'<div><div>  在Java中,下列说法错误的有（ ） </div><ul><li>数组是一种对象</li><li>数组属于一种原生类</li><li>int number = []{31,23,33,43,35,63};</li><li>数组的大小可以任意改变</li><ul></ul></ul></div>','<div>BCD</div>',4,'3',2,7),(217,2,'<div>下列说法错误的有（ ）<ul><li>在类方法中可用this来调用本类的类方法</li><li>在类方法中调用本类的类方法时可直接调用</li><li>在类方法中只能调用本类中的类方法</li><li>在类方法中绝对不能调用实例方法</li><ul></ul></ul></div>','<div>ACD</div>',4,'4',2,7),(218,3,'<div><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\">  <span>Java</span>  <span>源文件最多只能有一个</span><u>&nbsp;&nbsp;&nbsp;&nbsp;</u><span>类，其他的类个数不限。</span></p></div>','<div>public</div>',4,'1',2,7),(219,3,'<div><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\">  <span>过滤字节流输出都是</span><u>&nbsp;&nbsp;&nbsp;&nbsp;</u><span>类的子类</span>  </p></div>','<div>FilterOutputStream</div>',4,'1',2,7),(220,4,'<div>简述final，finalize，finally的区别？</div>','<div>1. final是关键字，final可以修饰类、方法、属性。    如果一个类被final修饰，那么这个类就是最终类，不能派生出新的子类，不能作为父类被继承，该类中的所有方法都不能被重写，但是final类中的成员变量是可以改变的，要想final类中的成员变量的不可以改变，必须给成员变量添加final修饰。因此，一个类不能同时被final和abstract修饰，这两个关键字相互矛盾。    如果final修饰方法，那么这个方法是最终方法，不允许任何子类重写该方法，但子类仍可以使用该方法，注意：final参数用来表示这个参数在这个函数内部不允许被修改。    final修饰属性，被final修饰的变量不可变。这里的不可变有两重含义：引用不可变和对象不可变。final指的是引用不可变，即它只能指向初始化时指向的那个对象，而不关心指向对象内容的变化。因此，被final修饰的变量必须初始化，该变量其实就是常量。2. finally作为异常处理的一部分，只能用在try/catch语句快中，finally代码块中的语句一定会被执行，经常被用来释放资源，如IO流和数据库资源的释放。3. finalize是Object类的一个方法，该方法在Object类中声明：        protected void finalize() throws Throwable { }     在垃圾回收器执行时会调用被回收对象的finalize()方法，可以覆盖此方法来实现对其资源的回收。注意：一旦垃圾回收器准备释放某个对象占用的空间，将首先调该对象的finalize()方法，并且在下一次垃圾回收动作发生时，才真正将该对象占用的内存回收。<br></div>',10,'1',2,7),(221,4,'<div>请问JAVA线程操作中sleep()和wait()有什么区别？</div>','<div>1. sleep是Thread类的方法，是线程用来 控制自身流程的。wait是Object类的方法，用来线程间的通 &nbsp; &nbsp; &nbsp;信，这个方法会使当前拥有该对象锁的进程等待知道其他线程，主要是用于不同线程之间的调度的。<br> 2. 每个对象都有一个锁来控制同步访问。Synchronized关键字可以和对象的锁交互，来实现线程的同 &nbsp; &nbsp; &nbsp;步。sleep方法没有释放锁，而wait方法释放了锁，使得其他线程可以使用同步控制块或者方法。&nbsp;<br> 3. wait只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用&nbsp;<br> 4. sleep必须捕获异常，而wait不需要捕获异常&nbsp;<br></div>',10,'2',2,7),(222,1,'<div>在JavaScript中，文本域不支持的事件包括（）<ul><li>onLostFocused</li><li>onFocus</li><li>onChange</li><li>onBlur</li><ul></ul></ul></div>','<div>A</div>',2,'1',2,8),(223,1,'<div><div><div id=\\\"highlighter_135274\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp plain\\\">javascript中document.getElementById的返回值的类型为（）</code></div></div></td></tr></tbody></table></div></div> <br><ul><li>Array</li><li>Object</li><li>String</li><li>Function</li><ul></ul></ul></div>','<div>B</div>',2,'2',2,8),(224,1,'<div><div>  下列js可以让一个input的背景颜色变成红色的是？ </div><ul><li>inputElement.style.backgroundColor = \'red\';</li><li>inputElement.backgroundColor = \'red\';</li><li>inputElement.style.backgroundColor = \'#0000\';</li><li>inputElement.backgroundColor = \'#0000\';</li><ul></ul></ul></div>','<div>A</div>',2,'2',2,8),(225,1,'<div><div>  请给出这段代码的运行结果（ ） </div><div><div id=\\\"highlighter_132299\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">&lt;SCRIPT LANGUAGE=</code><code class=\\\"java string\\\">\\\"JavaScript\\\"</code><code class=\\\"java plain\\\">&gt;</code></div><div><code class=\\\"java plain\\\">var bb = </code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java plain\\\">function aa(bb) {</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">bb = </code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">alert(bb);</code></div><div><code class=\\\"java plain\\\">};</code></div><div><code class=\\\"java plain\\\">aa(bb);</code></div><div><code class=\\\"java plain\\\">alert(bb);</code></div><div><code class=\\\"java plain\\\">&lt;/SCRIPT&gt;</code></div></div></td></tr></tbody></table></div></div><br><ul><li>1 1</li><li>1 2</li><li>2 1</li><li>2 2</li><ul></ul></ul></div>','<div>C</div>',2,'3',2,8),(227,1,'<div><div>  请阅读以下代码： </div> <div> <div><div id=\\\"highlighter_675349\\\" class=\\\"syntaxhighlighter  js\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"js plain\\\">&lt;div style=”width:400px;height:200px;”&gt;</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;</code><code class=\\\"js plain\\\">&lt;span style=”float:left;width:auto;height:100%;”&gt;</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code><code class=\\\"js plain\\\">&lt;i style=”position:absolute;float:left;width:100px;height:50px;”&gt;hello&lt;/i&gt;</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;</code><code class=\\\"js plain\\\">&lt;/span&gt;</code></div><div><code class=\\\"js plain\\\">&lt;/div&gt;</code></div></div></td></tr></tbody></table></div></div> <br> </div> <div>  问题：span标签的width和height分别为多少？ </div><ul><li>width = 0px，height = 0px</li><li>width = 400px，height = 200px</li><li>width = 100px，height = 50px</li><li>width = 0px，height = 200px</li><ul></ul></ul></div>','<div>D</div>',2,'4',2,8),(228,1,'<div>现有如下html结构<br><div><div id=\\\"highlighter_683411\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">&lt;ul&gt;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">&lt;li&gt;click me&lt;/li&gt;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">&lt;li&gt;click me&lt;/li&gt;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">&lt;li&gt;click me&lt;/li&gt;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">&lt;li&gt;click me&lt;/li&gt;</code></div><div><code class=\\\"java plain\\\">&lt;/ul&gt;</code></div></div></td></tr></tbody></table></div></div> 运行如下代码：<br><div><div id=\\\"highlighter_153653\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">var elements=document.getElementsByTagName(</code><code class=\\\"java string\\\">\'li\'</code><code class=\\\"java plain\\\">);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">var length=elements.length;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">for</code><code class=\\\"java plain\\\">(var i=</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;i&lt;length;i++){</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">elements[i].onclick=function(){</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">alert(i);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div> 依次点击4个li标签，哪一个选项是正确的运行结果（）?<br><ul><li>依次弹出1，2，3，4</li><li>依次弹出0，1，2，3</li><li>依次弹出3，3，3，3</li><li>依次弹出4，4，4，4</li><ul></ul></ul></div>','<div>D</div>',2,'4',2,8),(229,1,'<div><div>  以下代码的输出结果是 </div><div><div id=\\\"highlighter_635761\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">var f = function g() {</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java value\\\">23</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">};</code></div><div><code class=\\\"java plain\\\">typeof g();</code></div></div></td></tr></tbody></table></div></div><ul><li>\\\"number\\\"</li><li>\\\"undefined\\\"</li><li>\\\"function\\\"</li><li>Error</li><ul></ul></ul></div>','<div>D</div>',2,'5',2,8),(230,2,'<div>以下哪些是javascript的<span style=\\\"color: rgb(51,51,51);\\\">基本数据类型</span>（）<ul><li>String</li><li>Number</li><li>Undefined</li><li>Date</li><ul></ul></ul></div>','<div>ABC</div>',4,'1',2,8),(231,2,'<div>下列哪些会返回false？<ul><li>null</li><li>undefined</li><li>0</li><li>‘0\'</li><ul></ul></ul></div>','<div>ABC</div>',4,'2',2,8),(232,2,'<div>下面哪些属于JavaScript的typeof运算符的可能结果：（）<ul><li>symbol</li><li>NaN</li><li>boolean</li><li>null</li><li>array</li><li>undefined</li><li>string</li><ul></ul></ul></div>','<div>ACFG</div>',4,'4',2,8),(233,3,'<div><p>  <span>我们需要实现动态加载一个</span>  <span>JavaScript</span>  <span>资源，但是有几处不知道如何处理，需要您的帮助完成这一项工作</span></p><p>  <span>var script = document.createElement(“script”);</span></p><p>  <span>var head = document.getElementsByTagName(“head”)[0];</span></p><p>  <br></p><p>  <span>script.type = “text/javascript”;</span></p><p>  <span>script.src = “//i.alicdn.com/resource.js”;</span></p><p>  <br></p><p>  <span>//</span>  <span>绑定资源加载成功事件</span></p><p>  <span>script.<u>&nbsp;&nbsp;&nbsp;&nbsp;</u> = function( ){</span></p><p>  <span> //</span>  <span>判断资源加载状态是否为加载成功或加载完成</span></p><p>  <span> if(<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>. test (script.<u>&nbsp;&nbsp;&nbsp;&nbsp;</u> &nbsp;) &nbsp;) {</span></p><p>  <span> script.onreadystatechange = null;</span></p><p>  <span> . . . .</span></p><p style=\\\"text-indent: 21.0pt;\\\">  <span>}</span></p><p>  <span>};</span></p><p>  <br></p><p>  <span>//</span>  <span>绑定资源加载失败事件</span></p><p>  <span>script.<u>&nbsp;&nbsp;&nbsp;&nbsp;</u> = function( ) {</span></p><p>  <span> . . . . </span></p><p>  <span>};</span></p><p>  <br></p><p>  <span>head.insertBefore (script , head.firstChild)</span></p></div>','<div><p>  <span>1</span>  <span>、</span>  <span>onreadystatechange</span></p><p>  <span>2</span>  <span>、</span>  <span>/^(loaded|complete)$/ </span></p><p>  <span>3</span>  <span>、</span>  <span>readyState</span></p><p>  <span>4</span>  <span>、</span>  <span>onerror</span></p></div>',4,'1',2,8),(234,3,'<div><p style=\\\"margin-left: 21.0pt;text-indent: 0.0cm;\\\">  <span>非严格模式下写出下面表达式结果</span></p><p style=\\\"margin-left: 21.0pt;text-indent: 0.0cm;\\\">  <span> parseInt(“123a”)=<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span></p></div>','<div>123</div>',4,'2',2,8),(237,4,'<div>写个JavaScript函数来判断是否大于18岁，比如传入1993-6-3，返回true，传递2001-6-3返回false；</div>','<div><div><div id=\\\"highlighter_556652\\\" class=\\\"syntaxhighlighter  js\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div><div class=\\\"line number22 index21 alt1\\\">22</div><div class=\\\"line number23 index22 alt2\\\">23</div><div class=\\\"line number24 index23 alt1\\\">24</div><div class=\\\"line number25 index24 alt2\\\">25</div><div class=\\\"line number26 index25 alt1\\\">26</div><div class=\\\"line number27 index26 alt2\\\">27</div><div class=\\\"line number28 index27 alt1\\\">28</div><div class=\\\"line number29 index28 alt2\\\">29</div><div class=\\\"line number30 index29 alt1\\\">30</div><div class=\\\"line number31 index30 alt2\\\">31</div><div class=\\\"line number32 index31 alt1\\\">32</div><div class=\\\"line number33 index32 alt2\\\">33</div><div class=\\\"line number34 index33 alt1\\\">34</div><div class=\\\"line number35 index34 alt2\\\">35</div><div class=\\\"line number36 index35 alt1\\\">36</div><div class=\\\"line number37 index36 alt2\\\">37</div><div class=\\\"line number38 index37 alt1\\\">38</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"js comments\\\">/* 分割时间字符串 */</code></div><div><code class=\\\"js keyword\\\">function</code> <code class=\\\"js plain\\\">dateFormat(date) {</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">var</code> <code class=\\\"js plain\\\">dateArr = date.split(</code><code class=\\\"js string\\\">\'-\'</code><code class=\\\"js plain\\\">);</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">return</code> <code class=\\\"js plain\\\">dateArr;</code></div><div><code class=\\\"js plain\\\">}</code></div><div>&nbsp;</div><div><code class=\\\"js comments\\\">/* 补0操作 */</code></div><div><code class=\\\"js keyword\\\">function</code> <code class=\\\"js plain\\\">zeroFormat(date) {</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">return</code> <code class=\\\"js plain\\\">date &gt; 10 ? date : </code><code class=\\\"js string\\\">\'0\'</code> <code class=\\\"js plain\\\">+ date;</code></div><div><code class=\\\"js plain\\\">}</code></div><div>&nbsp;</div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"js comments\\\">/* 判断是否大于18 */</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"js keyword\\\">function</code> <code class=\\\"js plain\\\">isYear(year) {</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">var</code> <code class=\\\"js plain\\\">currentDate = </code><code class=\\\"js keyword\\\">new</code> <code class=\\\"js plain\\\">Date();</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">var</code> <code class=\\\"js plain\\\">flagDate = dateFormat(year);</code></div><div class=\\\"line number16 index15 alt1\\\">&nbsp;</div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">var</code> <code class=\\\"js plain\\\">currentYear = currentDate.getFullYear();</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">var</code> <code class=\\\"js plain\\\">currentMon = zeroFormat(currentDate.getMonth() + 1);</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">var</code> <code class=\\\"js plain\\\">currentDay = zeroFormat(currentDate.getDate());</code></div><div class=\\\"line number20 index19 alt1\\\">&nbsp;</div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">var</code> <code class=\\\"js plain\\\">flagYear = flagDate[0];</code></div><div class=\\\"line number22 index21 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">var</code> <code class=\\\"js plain\\\">flagMon = flagDate[1];</code></div><div class=\\\"line number23 index22 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">var</code> <code class=\\\"js plain\\\">flagDay = flagDate[2];</code></div><div class=\\\"line number24 index23 alt1\\\">&nbsp;</div><div class=\\\"line number25 index24 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">if</code> <code class=\\\"js plain\\\">(currentYear - flagYear &gt; 18) {</code></div><div class=\\\"line number26 index25 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">return</code> <code class=\\\"js keyword\\\">true</code><code class=\\\"js plain\\\">;</code></div><div class=\\\"line number27 index26 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">} </code><code class=\\\"js keyword\\\">else</code> <code class=\\\"js keyword\\\">if</code> <code class=\\\"js plain\\\">(currentYear - flagYear === 18 &amp;&amp; currentMon &gt; flagMon) {</code></div><div class=\\\"line number28 index27 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">return</code> <code class=\\\"js keyword\\\">true</code><code class=\\\"js plain\\\">;</code></div><div class=\\\"line number29 index28 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">} </code><code class=\\\"js keyword\\\">else</code> <code class=\\\"js keyword\\\">if</code> <code class=\\\"js plain\\\">(currentYear - flagYear === 18 &amp;&amp; currentMon === flagMon &amp;&amp; currentDay &gt; flagDay) {</code></div><div class=\\\"line number30 index29 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">return</code> <code class=\\\"js keyword\\\">true</code><code class=\\\"js plain\\\">;</code></div><div class=\\\"line number31 index30 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">} </code><code class=\\\"js keyword\\\">else</code> <code class=\\\"js plain\\\">{</code></div><div class=\\\"line number32 index31 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">return</code> <code class=\\\"js keyword\\\">false</code><code class=\\\"js plain\\\">;</code></div><div class=\\\"line number33 index32 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">}</code></div><div class=\\\"line number34 index33 alt1\\\"><code class=\\\"js plain\\\">}</code></div><div class=\\\"line number35 index34 alt2\\\"><code class=\\\"js plain\\\">console.log(isYear(</code><code class=\\\"js string\\\">\'2000-01-05\'</code><code class=\\\"js plain\\\">));</code></div><div class=\\\"line number36 index35 alt1\\\"><code class=\\\"js plain\\\">console.log(isYear(</code><code class=\\\"js string\\\">\'1999-02-14\'</code><code class=\\\"js plain\\\">));</code></div><div class=\\\"line number37 index36 alt2\\\"><code class=\\\"js plain\\\">console.log(isYear(</code><code class=\\\"js string\\\">\'1999-02-13\'</code><code class=\\\"js plain\\\">));</code></div><div class=\\\"line number38 index37 alt1\\\"><code class=\\\"js plain\\\">console.log(isYear(</code><code class=\\\"js string\\\">\'1989-12-26\'</code><code class=\\\"js plain\\\">));</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'1',2,8),(238,4,'<div>使用JavaScript深度克隆一个对象？</div>','<div><div><div id=\\\"highlighter_307561\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp plain\\\">function Object.prototype.cloneObj()</code></div><div><code class=\\\"cpp plain\\\">{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp plain\\\">　　function NEWOBJECT(){};</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp plain\\\">　　NEWOBJECT. prototype = </code><code class=\\\"cpp keyword bold\\\">this</code><code class=\\\"cpp plain\\\">;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp plain\\\">　　var anObj = </code><code class=\\\"cpp keyword bold\\\">new</code> <code class=\\\"cpp plain\\\">NEWOBJECT();</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp plain\\\">　　</code><code class=\\\"cpp keyword bold\\\">for</code> <code class=\\\"cpp plain\\\">( var ele in anObj )</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp plain\\\">　　{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp plain\\\">　　　　 </code><code class=\\\"cpp keyword bold\\\">if</code> <code class=\\\"cpp plain\\\">( typeof anObj[ele] == “object” ) </code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">anObj[ele]. cloneObj();</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp plain\\\">　　}</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code><code class=\\\"cpp plain\\\">　　</code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">anObj;</code></div><div><code class=\\\"cpp plain\\\">} </code></div></div></td></tr></tbody></table></div></div></div>',10,'2',2,8),(239,4,'<div><div>  请实现一个fibonacci函数，要求其参数和返回值如下所示： </div><div><div id=\\\"highlighter_311998\\\" class=\\\"syntaxhighlighter  js\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"js comments\\\">/**</code></div><div><code class=\\\"js spaces\\\">&nbsp;</code><code class=\\\"js comments\\\">*@desc: fibonacci</code></div><div><code class=\\\"js spaces\\\">&nbsp;</code><code class=\\\"js comments\\\">*@param: count {Number}</code></div><div><code class=\\\"js spaces\\\">&nbsp;</code><code class=\\\"js comments\\\">*@return: result {Number} 第count个fibonacci值，计数从0开始</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;</code><code class=\\\"js comments\\\">fibonacci数列为：[1, 1, 2, 3, 5, 8, 13, 21, 34 …]</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;</code><code class=\\\"js comments\\\">则getNthFibonacci(0)返回值为1</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;</code><code class=\\\"js comments\\\">则getNthFibonacci(4)返回值为5</code></div><div><code class=\\\"js spaces\\\">&nbsp;</code><code class=\\\"js comments\\\">*/</code></div><div><code class=\\\"js keyword\\\">function</code> <code class=\\\"js plain\\\">getNthFibonacci(count) {</code></div><div><code class=\\\"js plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>','<div><div>  此题应该避免使用递归的方法，因为当count较大时，递归的方法耗时较长。 </div><div>  故考虑使用迭代法，可以使用数组记录每一项。 </div><div>  但此题只需要用到前面两项，从节约空间的角度讲不需要开辟数组。 </div><div><div id=\\\"highlighter_154608\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">function getNthFibonacci(count) {</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(count&lt;</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">) </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(count&lt;=</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">) </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">var first =&nbsp;</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">var second =&nbsp;</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">var third =&nbsp;</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">for</code><code class=\\\"java plain\\\">(var i =&nbsp;</code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">; i &lt;= count; i++) {</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">third = first + second;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">first = second;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">second = third;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">third;</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'3',2,8),(241,1,'<div>C#的数据类型有？<br><ul><li>值类型和调用类型</li><li>值类型和引用类型</li><li>引用类型和关系类型</li><li>关系类型和调用类型</li><ul></ul></ul></div>','<div>B</div>',2,'1',2,9),(242,1,'<div>C#程序段的结果： int[][] array = new int[3][]{       new int[3]{5,6,2}, newint[5]{6,9,7,8,3},       new int[2]{3,2}  }; array[2][2] 返回（）<ul><li>9</li><li>6</li><li>2</li><li>溢出</li><ul></ul></ul></div>','<div>D</div>',2,'3',2,9),(243,1,'<div>下面不是面向对象的基本原则的是？<ul><li>单一职责原则（Single-Resposibility Principle）</li><li>开放封闭原则（Open-Closed principle）</li><li>抽象类原则（Abstract-Class principle）</li><li>依赖倒置原则（Dependecy-Inversion Principle）</li><li>接口隔离原则（Interface-Segregation Principle）</li><ul></ul></ul></div>','<div>C</div>',2,'4',2,9),(244,2,'<div>面向对象的三个基本元素是什么？<ul><li>封装</li><li>继承</li><li>重载</li><li>多态</li><ul></ul></ul></div>','<div>ABD</div>',4,'1',2,9),(245,4,'<div><p style=\\\"text-indent: 0.0pt;\\\">  <b><span style=\\\"color: rgb(255,0,0);\\\">两数组找相同的元素</span></b>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span> </span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <b><span>【</span></b><b><span>题目描述</span></b><b><span>】</span></b><span>给两个整数</span><span>(int)</span><span>数组，输出相同的元素。</span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span> </span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <b><span style=\\\"color: rgb(84,141,212);\\\">输入格式</span></b>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span>m n</span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span>a1 a2 … am</span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span>b1 b2 … bn</span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span> </span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <b><span style=\\\"color: rgb(84,141,212);\\\">输出格式</span></b>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <b><span> </span></b>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span>相同的的元素，用空白分开</span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span style=\\\"color: rgb(84,141,212);\\\"> </span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <b><span style=\\\"color: rgb(84,141,212);\\\">输入样例</span></b>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <b><span> </span></b>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span>5 4</span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span>11 15 9 12 3</span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span>1 8 3 7</span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span> </span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <b><span style=\\\"color: rgb(84,141,212);\\\">输出样例</span></b>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <b><span> </span></b>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span>3</span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span> </span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <b><span style=\\\"color: rgb(84,141,212);\\\">数据规模</span></b>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <b><span> </span></b>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span>对于</span><span>30%</span><span>的数据</span><span>, &nbsp;0 &lt; m &lt; 30, 0 &lt; n &lt; 30</span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span> </span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span>对于</span><span>100%</span><span>的数据，</span><span>0 &lt; m &lt; 100000, 0 &lt; n &lt; 100000</span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span> </span>  </p> <p style=\\\"text-indent: 0.0pt;\\\">  <span>想考察当</span><span>m,n</span><span> 超过一定规模之后不能直接用暴力求解</span>  </p></div>','<div><p>  <br> </p> <div><div id=\\\"highlighter_452704\\\" class=\\\"syntaxhighlighter  js\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"js preprocessor\\\">#include &lt;bits/stdc++.h&gt;</code></div><div><code class=\\\"js plain\\\">using namespace std;</code><code class=\\\"js comments\\\">//插入set,然后对于每个元素在set里面查找。。数据量比较大用scanf</code></div><div><code class=\\\"js plain\\\">int main() {</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">int n, m;</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">int x;</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">bool first = </code><code class=\\\"js keyword\\\">true</code><code class=\\\"js plain\\\">;</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">set&lt;int&gt; a;</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">scanf(</code><code class=\\\"js string\\\">\\\"%d\\\"</code><code class=\\\"js plain\\\">, &amp;n);</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">for</code> <code class=\\\"js plain\\\">(int i = 0; i &lt; n; ++i) scanf(</code><code class=\\\"js string\\\">\\\"%d\\\"</code><code class=\\\"js plain\\\">, &amp;x), a.insert(x);</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">scanf(</code><code class=\\\"js string\\\">\\\"%d\\\"</code><code class=\\\"js plain\\\">, &amp;m);</code></div><div><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">for</code> <code class=\\\"js plain\\\">(int i = 0; i &lt; m; ++i) {</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">scanf(</code><code class=\\\"js string\\\">\\\"%d\\\"</code><code class=\\\"js plain\\\">, &amp;x);</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">if</code> <code class=\\\"js plain\\\">(a.find(x) != a.end()) {</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">if</code> <code class=\\\"js plain\\\">(first) first = </code><code class=\\\"js keyword\\\">false</code><code class=\\\"js plain\\\">; </code><code class=\\\"js keyword\\\">else</code> <code class=\\\"js plain\\\">printf(</code><code class=\\\"js string\\\">\\\" \\\"</code><code class=\\\"js plain\\\">);</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">printf(</code><code class=\\\"js string\\\">\\\"%d\\\"</code><code class=\\\"js plain\\\">, x);</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">}</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js plain\\\">}</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"js spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"js keyword\\\">return</code> <code class=\\\"js plain\\\">0;</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"js plain\\\">}</code></div></div></td></tr></tbody></table></div></div> <br></div>',10,'1',2,9),(246,4,'<div><p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <b><span style=\\\"color: rgb(255,0,0);\\\">找出函数的最宽尖峰</span></b>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <span> </span><span>【</span><span>题目描述</span><span>】</span><span>按数组的形式给出函数</span><span>f(x)</span><span>的取值，即数组</span><span>A</span><span>的</span><span>A[0]</span><span>元素为</span><span>f(0)</span><span>的取值，数组的取值都为整数，函数在每个点都是严格单调递增或者严格递减（即</span><span>A[i-1] != A[i] != A[i+1]</span><span>），要求找出最宽的先上升后下降的区间（这个区间内函数的值必须先上升到一个点然后下降，区间的上升段和下降段长度必须都大于</span><span>0</span><span>）。</span>  </p> <p style=\\\"margin-left: 36.0pt;text-indent: -18.0pt;vertical-align: baseline;\\\">  <span>1. </span><span>如果找到符合条件的最大区间输出数组对应的左右下标（保证只有一个最大区间）</span>  </p> <p style=\\\"margin-left: 36.0pt;text-indent: -18.0pt;vertical-align: baseline;\\\">  <span>2. </span><span>找不到那么输出</span><span>-1 -1</span>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <b><span style=\\\"color: rgb(84,141,212);\\\">输入格式</span></b>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <span>n</span>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <span>n</span><span>长度的整数数组</span>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <span> </span>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <b><span style=\\\"color: rgb(84,141,212);\\\">输出格式</span></b>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <span>区间的范围</span>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <span> </span>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <b><span style=\\\"color: rgb(84,141,212);\\\">输入样例</span></b>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <span>10</span>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <span>1 3 1 2 5 4 3 1 9 10</span>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <span> </span>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <b><span style=\\\"color: rgb(84,141,212);\\\">输出样例</span></b>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <span>2 7</span>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <span> </span>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <b><span style=\\\"color: rgb(84,141,212);\\\">数据规模</span></b>  </p> <p style=\\\"margin-left: 0.0pt;text-indent: 0.0pt;\\\">  <span>对于 </span><span>100%</span><span> 的数据，</span><span>1 &lt;=n &lt;=10, 000, 000</span>  </p></div>','<div><div><div id=\\\"highlighter_705154\\\" class=\\\"syntaxhighlighter  vb\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div><div class=\\\"line number22 index21 alt1\\\">22</div><div class=\\\"line number23 index22 alt2\\\">23</div><div class=\\\"line number24 index23 alt1\\\">24</div><div class=\\\"line number25 index24 alt2\\\">25</div><div class=\\\"line number26 index25 alt1\\\">26</div><div class=\\\"line number27 index26 alt2\\\">27</div><div class=\\\"line number28 index27 alt1\\\">28</div><div class=\\\"line number29 index28 alt2\\\">29</div><div class=\\\"line number30 index29 alt1\\\">30</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"vb preprocessor\\\">#include &lt;bits/stdc++.h&gt;</code></div><div><code class=\\\"vb plain\\\">using namespace std;//预处理左右各做一遍最长上升子串, 然后维护一个最大和即可</code></div><div><code class=\\\"vb plain\\\">int main() {</code></div><div><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">int n;</code></div><div><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">cin &gt;&gt; n;</code></div><div><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">vector&lt;int&gt; x(n, 0);</code></div><div><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">vector&lt;int&gt; l(n, 0);</code></div><div><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">vector&lt;int&gt; r(n, 0);</code></div><div><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">for(int i = 0; i &lt; n; i++) scanf(</code><code class=\\\"vb string\\\">\\\"%d\\\"</code><code class=\\\"vb plain\\\">, &amp;x[i]);</code></div><div><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">for(int i = 1; i &lt; n; i++) {</code></div><div><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"vb plain\\\">if(x[i] &gt; x[i - 1]) {</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"vb plain\\\">l[i] = l[i - 1] + 1;</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"vb plain\\\">}</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">}</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">for(int i = n - 2; i &gt;= 0; i--) {</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"vb plain\\\">if(x[i] &gt; x[i + 1]) {</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"vb plain\\\">r[i] = r[i + 1] + 1;</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"vb plain\\\">}</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">}</code></div><div class=\\\"line number20 index19 alt1\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">int mx = 0, ll = -1, rr = -1;</code></div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">for(int i = 0; i &lt; n; i++) {</code></div><div class=\\\"line number22 index21 alt1\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"vb plain\\\">if(l[i] &gt; 0 &amp;&amp; r[i] &gt; 0 &amp;&amp; l[i] + r[i] &gt; mx) {</code></div><div class=\\\"line number23 index22 alt2\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"vb plain\\\">mx = l[i] + r[i];</code></div><div class=\\\"line number24 index23 alt1\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"vb plain\\\">ll = i - l[i];</code></div><div class=\\\"line number25 index24 alt2\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"vb plain\\\">rr = i + r[i];</code></div><div class=\\\"line number26 index25 alt1\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"vb plain\\\">}</code></div><div class=\\\"line number27 index26 alt2\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">}</code></div><div class=\\\"line number28 index27 alt1\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">cout &lt;&lt; ll &lt;&lt; </code><code class=\\\"vb string\\\">\\\" \\\"</code> <code class=\\\"vb plain\\\">&lt;&lt; rr &lt;&lt; endl;</code></div><div class=\\\"line number29 index28 alt2\\\"><code class=\\\"vb spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"vb plain\\\">return 0;</code></div><div class=\\\"line number30 index29 alt1\\\"><code class=\\\"vb plain\\\">}</code></div></div></td></tr></tbody></table></div></div> <div>  <br> </div></div>',10,'4',2,9),(247,1,'<div>从运行层面上来看，从四个选项选出不同的一个。<ul><li>JAVA</li><li>Python</li><li>objectC</li><li>C#</li><ul></ul></ul></div>','<div>B</div>',2,'4',2,10),(248,2,'<div><div><div id=\\\"highlighter_827652\\\" class=\\\"syntaxhighlighter  py\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"py value\\\">1.bit</code> <code class=\\\"py keyword\\\">=</code> <code class=\\\"py functions\\\">input</code><code class=\\\"py plain\\\">(</code><code class=\\\"py string\\\">\\\"Enter a binary digit:\\\"</code><code class=\\\"py plain\\\">)</code></div><div><code class=\\\"py value\\\">2.if</code> <code class=\\\"py plain\\\">bit </code><code class=\\\"py keyword\\\">=</code> <code class=\\\"py value\\\">0</code> <code class=\\\"py keyword\\\">or</code> <code class=\\\"py value\\\">1</code><code class=\\\"py plain\\\">:</code></div><div><code class=\\\"py value\\\">3.</code>&nbsp;&nbsp;&nbsp; <code class=\\\"py functions\\\">print</code> <code class=\\\"py string\\\">\\\"your input is\\\"</code> <code class=\\\"py plain\\\">,bit</code></div><div><code class=\\\"py value\\\">4.else</code></div><div><code class=\\\"py value\\\">5.</code>&nbsp;&nbsp;&nbsp; <code class=\\\"py functions\\\">print</code> <code class=\\\"py string\\\">\\\"your input is invalid\\\"</code></div></div></td></tr></tbody></table></div></div> <div>  以上程序要求用户输入二进制数字0/1并显示之，请指出程序中代码第几行存在错误：（） </div><ul><li>4</li><li>5</li><li>3</li><li>2</li><ul></ul></ul></div>','<div>AD</div>',4,'3',2,10),(249,2,'<div>解释型语言的特性有什么？<br><ul><li>非独立</li><li>效率低</li><li>独立</li><li>效率高性</li><ul></ul></ul></div>','<div>AB</div>',4,'3',2,10),(251,4,'<div><p style=\\\"text-indent: 21.0pt;\\\">  <span>编写函数，模拟内置函数sorted()。</span>  </p></div>','<div><p style=\\\"text-indent: 21.0pt;\\\">  <span>这里给出Python 3.4.2代码，如果使用Python 2.7.8的话只需要修改其中的print()函数为print语句即可。</span>  </p> <div><div id=\\\"highlighter_518156\\\" class=\\\"syntaxhighlighter  py\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"py keyword\\\">def</code> <code class=\\\"py functions\\\">Sorted</code><code class=\\\"py plain\\\">(v):</code></div><div><code class=\\\"py spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"py plain\\\">t </code><code class=\\\"py keyword\\\">=</code> <code class=\\\"py plain\\\">v[::]</code></div><div><code class=\\\"py spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"py plain\\\">r </code><code class=\\\"py keyword\\\">=</code> <code class=\\\"py plain\\\">[]</code></div><div><code class=\\\"py spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"py keyword\\\">while</code> <code class=\\\"py plain\\\">t:</code></div><div><code class=\\\"py spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"py plain\\\">tt </code><code class=\\\"py keyword\\\">=</code> <code class=\\\"py functions\\\">min</code><code class=\\\"py plain\\\">(t)</code></div><div><code class=\\\"py spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"py plain\\\">r.append(tt)</code></div><div><code class=\\\"py spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"py plain\\\">t.remove(tt)</code></div><div><code class=\\\"py spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"py keyword\\\">return</code> <code class=\\\"py plain\\\">r</code></div><div><code class=\\\"py plain\\\">x </code><code class=\\\"py keyword\\\">=</code> <code class=\\\"py plain\\\">[</code><code class=\\\"py value\\\">1</code><code class=\\\"py plain\\\">,</code><code class=\\\"py value\\\">3</code><code class=\\\"py plain\\\">,</code><code class=\\\"py value\\\">5</code><code class=\\\"py plain\\\">,</code><code class=\\\"py value\\\">2</code><code class=\\\"py plain\\\">,</code><code class=\\\"py value\\\">1</code><code class=\\\"py plain\\\">,</code><code class=\\\"py value\\\">0</code><code class=\\\"py plain\\\">,</code><code class=\\\"py value\\\">9</code><code class=\\\"py plain\\\">,</code><code class=\\\"py value\\\">7</code><code class=\\\"py plain\\\">]</code></div><div><code class=\\\"py functions\\\">print</code><code class=\\\"py plain\\\">(x)</code></div><div><code class=\\\"py functions\\\">print</code><code class=\\\"py plain\\\">(</code><code class=\\\"py functions\\\">Sorted</code><code class=\\\"py plain\\\">(x))</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"py spaces\\\">&nbsp;</code>&nbsp;</div></div></td></tr></tbody></table></div></div> <br></div>',10,'2',2,11),(252,1,'<div><p style=\\\"margin-left: 21.0pt;\\\">  <span>CSS</span>  <span>样式，边距：</span>  <span>10px 20px 40px 30px</span>  <span>；哪一个是底边距？</span></p><ul><li>10px</li><li>40px</li><li>30px</li><li>20px</li><ul></ul></ul></div>','<div>B</div>',2,'1',2,11),(254,1,'<div>表示新开一个标签页的超链接代码是：（）<ul><li>&lt;a href=URL target=_new&gt;..&lt;/a&gt;</li><li>&lt;a href=URL target=_self&gt;..&lt;/a&gt;</li><li>&lt;a href=URL target=_blank&gt;..&lt;/a&gt;</li><li>&lt;a href=URL target=_parent&gt;..&lt;/a&gt;</li><ul></ul></ul></div>','<div>C</div>',2,'2',2,11),(255,1,'<div><div>  对于li这个节点，下列哪个CSS选择器的优先级最高？ </div><ul><li>li#app</li><li>li.cnt</li><li>li.cnt:hover</li><li>#app.cnt</li><ul></ul></ul></div>','<div>D</div>',2,'3',2,11),(256,1,'<div>超链接访问过后hover样式就不出现了，被点击访问过的超链接样式不再具有hover和active了，解决方法是改变CSS属性的排列顺序？（）<ul><li>a:link {} a:visited {} a:hover {} a:active {}</li><li>a:visited {} a:link {} a:hover {} a:active {}</li><li>a:active {} a:link {} a:hover {} a:visited {}</li><li>a:link {} a:active {} a:hover {} a:visited {}</li><ul></ul></ul></div>','<div>A</div>',2,'4',2,11),(257,1,'<div><p>  <span>DHTML</span>  <span>的动态样式的作用是 &nbsp;()</span></p><ul><li>可使开发人员改变显示在一页上的文本或图像，以便内容能够交互地对用户的鼠标和键盘操作做出响应</li><li>让页面制作者以自动方式或对用户的操作做出响应的方式移动页面上的文本和图像</li><li>可实现客户端与服务端动态的信息资源交换</li><li>使网页作者改变内容的外部特征而不强制用户再次下载全部内容</li><ul></ul></ul></div>','<div>D</div>',2,'5',2,11),(258,2,'<div><span>默认情况下，以下哪些元素时行内元素（）</span><ul><li>&lt;p&gt;</li><li>&lt;span&gt;</li><li>&lt;a&gt;</li><li>&lt;h2&gt;</li><ul></ul></ul></div>','<div>BC</div>',4,'1',2,11),(259,2,'<div>去掉文本超级链接的下划线，下列正确的是（）<ul><li>a {underline:noen}</li><li>a {text-decoration:no underline}</li><li>a {text-decoration:none}</li><li>a {decoration:no underline}</li><ul></ul></ul></div>','<div>C</div>',4,'1',2,11),(260,2,'<div>下面有关html结构描述正确的有？<ul><li>&lt;ul&gt; &lt;li&gt; &lt;/li&gt; &lt;/ul&gt;</li><li>&lt;ol&gt; &lt;li&gt; &lt;/li&gt; &lt;/ol&gt;</li><li>&lt;dl&gt;&lt;dt&gt;&lt;dd&gt;&lt;/dd&gt;&lt;/dt&gt;&lt;/dl&gt;</li><li>&lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;</li><ul></ul></ul></div>','<div>ABD</div>',4,'2',2,11),(261,2,'<div>在不考虑H5的情况下,下列哪些值是可以作为标签的type属性的属性值。（）<ul><li>text</li><li>submit</li><li>button</li><li>date</li><ul></ul></ul></div>','<div>ABC</div>',4,'2',2,11),(262,2,'<div>问一份标准的HTML文档有哪几个必须的HTML标签？<ul><li>&lt;html&gt;</li><li>&lt;head&gt;</li><li>&lt;title&gt;</li><li>&lt;body&gt;</li><ul></ul></ul></div>','<div>ABCD</div>',4,'3',2,11),(263,2,'<div>下述有关border:none以及border:0的区别，描述错误的是？&nbsp;<ul><li>border:none表示边框样式无</li><li>border:0表示边框宽度为0</li><li>当定义了border:none，即隐藏了边框的显示，实际就是边框宽度为0</li><li>当定义边框时，仅设置边框宽度也可以达到显示的效果</li><ul></ul></ul></div>','<div>CD</div>',4,'3',2,11),(264,2,'<div>哪些可以给文字加上背景？<ul><li>bg-primary</li><li>bg-success</li><li>bg-info</li><li>bg-warning</li><ul></ul></ul></div>','<div>ABCD</div>',4,'3',2,11),(265,2,'<div>常见的浏览器端的存储技术有哪些？<ul><li>cookie</li><li>localStorage</li><li>session</li><li>userData</li><ul></ul></ul></div>','<div>ABD</div>',4,'4',2,11),(266,3,'<div><p>  <span>以下代码，分别给节点</span>  <span>#box</span>  <span>增加如下样式，问节点</span>  <span>#box</span>  <span>距离</span>  <span>body</span>  <span>的上边距是多少？</span></p><p>  <span>&lt;body style=”margin:0;padding:0”&gt;</span></p><p>  <span> &lt;div id=”box” style=”top:10px;margin:20px 10px;”&gt;</span></p><p>  <span> &lt;/div&gt;</span></p><p>  <span>&lt;/body&gt;</span></p><p>  <span>如果设置</span>  <span>position: static ; </span>  <span>则上边距为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span>  <span>px</span></p><p>  <span>如果设置</span>  <span>position: relative ; </span>  <span>则上边距为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span>  <span>px</span></p><p>  <span>如果设置</span>  <span>position: absolute ; </span>  <span>则上边距为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span>  <span>px</span></p><p>  <span>如果设置</span>  <span>position: sticky ; </span>  <span>则滚动起来上边距为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span>  <span>px</span></p></div>','<div><span>position: static ; </span><span>则上边距为(&nbsp; 20 )</span><span>px&nbsp; 静态定位 top值无效</span><div>  <span>position: relative ; </span>  <span>则上边距为(&nbsp; 30 )</span>  <span>px 移动的时候会包括margin<br> position: absolute ; </span>  <span>则上边距为(&nbsp; 30 )</span>  <span>px 移动的时候会包括margin<br>  </span>  <span>position: fixed ; </span>  <span>则上边距为(&nbsp; 30 )</span>  <span>px&nbsp; 固定定位的margin也会生效&nbsp; 移动的时候也会包括margin<br>  </span>  <span>position: sticky ; </span>  <span>则上边距为(&nbsp; 20 )</span>  <span>px，页面滚动起来为（10）px，margin会无效；页面没滚动的 时候是静态定位<br>  </span></div></div>',4,'1',2,11),(267,3,'<div>设置CSS属性float的值为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>时可取消元素的浮动。</div>','<div>none</div>',4,'3',2,11),(268,3,'<div>文字居中的CSS代码是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>； 。</div>','<div>text-align:center</div>',4,'3',2,11),(269,4,'<div>Input标签的type属性可以设置哪些值？（请至少列出6个）.</div>','<div>text   radio checkbox password submit button</div>',10,'1',2,11),(271,4,'<div>用css、html编写一个两列布局的网页，要求右侧宽度为200px，左侧自动扩展。</div>','<div><p align=\\\"left\\\"> #right{<br><span>float:right;<br></span> <span>width:200px;<br>}<br>#left{<br></span> <span>marin-right:200px;<br>}</span> </p><p align=\\\"left\\\"> HTML代码中<span>#right</span>必须写在<span>#left</span>前面<span></span> </p><p align=\\\"left\\\">  <br><span></span></p><div id=\\\"”right”\\\"> …</div><br><span><div id=\\\"”left”\\\">  …</div><br></span> <p>  <br></p><br></div>',10,'2',2,11),(272,4,'<div>请用JavaScript实现，控制一个文本框只能输入正整数，如输入不符合条件则文本框全部字体标红。要求写出完整的文本框HTML代码和JavaScript逻辑代码。</div>','<div><div>  HTML: </div><div><div id=\\\"highlighter_117858\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">&lt;input type=</code><code class=\\\"java string\\\">\\\"text\\\"</code> <code class=\\\"java plain\\\">/&gt;</code></div></div></td></tr></tbody></table></div></div><div>  <br></div><div>  JavaScript: </div><div><div id=\\\"highlighter_773250\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">document.getElementsByTagName(</code><code class=\\\"java string\\\">\'input\'</code><code class=\\\"java plain\\\">)[</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">].onkeyup = function(){</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java keyword\\\">if</code><code class=\\\"java plain\\\">(</code><code class=\\\"java keyword\\\">this</code><code class=\\\"java plain\\\">.value &amp;&amp; !/^\\d+$/.test(</code><code class=\\\"java keyword\\\">this</code><code class=\\\"java plain\\\">.value)){</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">this</code><code class=\\\"java plain\\\">.style.color = </code><code class=\\\"java string\\\">\'red\'</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java keyword\\\">else</code><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">this</code><code class=\\\"java plain\\\">.style.color = </code><code class=\\\"java string\\\">\'black\'</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'3',2,11),(274,4,'<div>用户从手机的浏览器访问www.baidu.com，看到的可能跟桌面PC电脑，是不太一样的网页效果，会更适合移动设备使用。请简要分析一下，实现这种网页区分显示的原因及技术原理。</div>','<div><p align=\\\"left\\\">  手机的网速问题、屏幕大小、内存、<span>CPU</span>等。通过不同设备的特征，实现不同的网页展现或输出效果。根据useragent、屏幕大小信息、IP、网速、css  media Query等原理，实现前端或后端的特征识别和行为改变。 </p></div>',10,'4',2,11),(275,1,'<div><div>  32系统，函数 </div><div><div id=\\\"highlighter_544611\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">void</code> <code class=\\\"java plain\\\">Func(</code><code class=\\\"java keyword\\\">char</code> <code class=\\\"java plain\\\">str[</code><code class=\\\"java value\\\">100</code><code class=\\\"java plain\\\">]){}</code></div></div></td></tr></tbody></table></div></div><div>  中sizeof(str)= </div><ul><li>4</li><li>5</li><li>6</li><li>7</li><ul></ul></ul></div>','<div>A</div>',2,'1',2,12),(276,1,'<div>对线性表进行折半查找时,要求线性表必须()<ul><li>以顺序方式存储</li><li>以顺序方式存储,且数据元素有序</li><li>以链接方式存储</li><li>以链接方式存储,且数据元素有序</li><ul></ul></ul></div>','<div>B</div>',2,'1',3,12),(277,1,'<div><p>  <span>要表示<span>10</span>个学生的成绩，下列声明并初始化数组<b>正确</b>的是（）</span></p><ul><li>int[] score=new int[ ]</li><li>int score[10]</li><li>int score[]=new int[9]</li><li>int score[]=new int[10]</li><ul></ul></ul></div>','<div>D</div>',2,'2',3,12),(278,1,'<div>线性表中每个元素都有一个直接前驱和一个直接后继()<ul><li>对</li><li>错</li><ul></ul></ul></div>','<div>B</div>',2,'2',3,12),(279,1,'<div><div>  32系统，函数 </div><div><div id=\\\"highlighter_544611\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">void</code> <code class=\\\"java plain\\\">Func(</code><code class=\\\"java keyword\\\">char</code> <code class=\\\"java plain\\\">str[</code><code class=\\\"java value\\\">100</code><code class=\\\"java plain\\\">]){}</code></div></div></td></tr></tbody></table></div></div><div>  中sizeof(str)= </div><ul><li>4</li><li>5</li><li>6</li><li>7</li><ul></ul></ul></div>','<div>A</div>',2,'3',3,12),(280,1,'<div>假设要存储一个数据集，数据维持有序，对其的操作只有插入、删除和顺序遍历，综合存储效率和运行速度，下列哪种数据结构是最适合的是？<ul><li>数组</li><li>链表</li><li>哈希表</li><li>队列</li><ul></ul></ul></div>','<div>B</div>',2,'3',3,12),(281,1,'<div>给出以下定义: <br> char acX[]=\\\"abcdefg\\\"; <br> char acY[]={\'a\', \'b\', \'c\', &nbsp;\'d\', \'e\', \'f\', \'g\'}; <br> 则正确的叙述为<ul><li>数组acX和数组acY等价</li><li>数组acX和数组acY的长度相同</li><li>数组acX的长度大于数组acY的长度</li><li>数组acX的长度小于数组acY的长度</li><ul></ul></ul></div>','<div>C</div>',2,'3',3,12),(282,1,'<div>Which statement is true for the class java.util.ArrayList?<ul><li>The elements in the collection are ordered.</li><li>The collection is guaranteed to be immutable.</li><li>The elements in the collection are guaranteed to be unique.</li><li>The elements in the collection are accessed using a unique key.</li><li>The elements in the collections are guaranteed to be synchronized.</li><ul></ul></ul></div>','<div>A</div>',2,'4',3,12),(283,1,'<div>设有数组A[i,j],数组的每个元素长度为3字节,i的值为1到8,j的值为1到10,数组从内存首地址BA开始顺序存放,当用以列为主存放时,元素A[5,8]的存储首地址为()<ul><li>BA+141</li><li>BA+180</li><li>BA+222</li><li>BA+225</li><ul></ul></ul></div>','<div>B</div>',2,'4',3,12),(284,1,'<div>下面有关数据结构的说法是正确的？<ul><li>数组和链表都可以随机访问</li><li>数组的插入和删除可以 O(1)</li><li>哈希表没有办法做范围检查</li><li>以上说法都不正确</li><ul></ul></ul></div>','<div>B</div>',2,'5',3,12),(285,1,'<div>在一个有8个int数据的数组中，随机给出数组的数据，找出最大和第二大元素一定需要进行（）次比较：<ul><li>8</li><li>9</li><li>10</li><li>11</li><ul></ul></ul></div>','<div>B</div>',2,'5',3,12),(286,2,'<div><div>  在Java中,下列说法错误的有（ ） </div><ul><li>数组是一种对象</li><li>数组属于一种原生类</li><li>int number = []{31,23,33,43,35,63};</li><li>数组的大小可以任意改变</li><ul></ul></ul></div>','<div>BCD</div>',4,'3',3,12),(287,2,'<div>下面的说法那个正确 <div><div id=\\\"highlighter_372573\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp preprocessor\\\">#define NUMA 10000000</code></div><div><code class=\\\"cpp preprocessor\\\">#define NUMB 1000</code></div><div><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">a[NUMA], b[NUMB];</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;</code>&nbsp;</div><div><code class=\\\"cpp keyword bold\\\">void</code> <code class=\\\"cpp plain\\\">pa()</code></div><div><code class=\\\"cpp plain\\\">{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">i, j;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">for</code><code class=\\\"cpp plain\\\">(i = 0; i &lt; NUMB; ++i) </code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">for</code><code class=\\\"cpp plain\\\">(j = 0; j &lt; NUMA; ++j) </code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">++a[j]; </code></div><div><code class=\\\"cpp plain\\\">} </code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"cpp keyword bold\\\">void</code> <code class=\\\"cpp plain\\\">pb() </code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"cpp plain\\\">{ </code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">i, j; </code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">for</code><code class=\\\"cpp plain\\\">(i = 0; i &lt; NUMA; ++i) </code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">for</code><code class=\\\"cpp plain\\\">(j = 0; j &lt; NUMB; ++j) </code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">++b[j]; </code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"cpp plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br><ul><li>pa 和 pb 运行的一样快</li><li>pa 比 pb 快</li><li>pb 比 pa 快</li><li>无法判断</li><ul></ul></ul></div>','<div>C</div>',4,'4',3,12),(288,2,'<div>数组指针和指针数组有什么区别 ？<ul><li>数组指针只是一个指针变量，它占有内存中一个指针的存储空间</li><li>指针数组只是一个指针变量，它占有内存中一个指针的存储空间</li><li>指针数组是多个指针变量，以数组形式存在内存当中，占有多个指针的存储空间</li><li>数组指针是多个指针变量，以数组形式存在内存当中，占有多个指针的存储空间</li><ul></ul></ul></div>','<div>AC</div>',4,'1',3,12),(289,2,'<div>线性结构的是（）<ul><li>串</li><li>链式存储栈</li><li>顺序存储栈</li><li>顺序存储二叉树</li><ul></ul></ul></div>','<div>ABC</div>',4,'2',3,12),(290,3,'<div><div>  设有字母序列{Q,D,F,X,A,P,N,B,Y,M,C,W}，请写出按二路归并方法对该序列进行一趟扫描后的结果为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。 </div><div>  (输出结果请按照以下格式：ABCDEFG，字母之间没有逗号) </div></div>','<div>DQFXAPBNMYCW，解析：二路归并：如果序列中有n 个记录，可以先把它看成n个子序列，每个子序列中只包含一个记录，因而都是排好序的。二路归并排序先将每相邻的两个子序列合并，得到n/2(向上取整)个较大的有序子序列，每个子序列包含2个记录。再将这些子序列两两合并。如此反复，直到最后合并成一个有序序列，排序即告完成。</div>',4,'2',3,12),(291,3,'<div>有个二维数组 A(6*8)，每个元素占 6 字节，起始地址为 1000，请问最后一个元素 A[5][7]的起始地址为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>，数组A占内存大小为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>字节，假设以行优先，则A[1][4]起始地址为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u> </div>','<div><div>  1:1282<br> 2:288：<br> 3:1072<br>  <br> A[5][7]之前，一共有5*8+7个元素，所以起始的地址为1000+6*（5*8+7） = 1000 +  6*47=1282；<br> 数组一共有6*8个元素，即48个元素，占用内存大小为48*6=288；<br> 因为是按行优先，A[1][4]之前有1*8+4=12个元素，所以其起始地址为1000+12*6=1072；<br></div></div>',4,'3',3,12),(292,3,'<div>有一个二维数组a[1...100 ,1...65]有100行，65列，我们以行序为主序，如果该数组的基地址是10000，且每个元素占2个存储单元，请问a[56 ,  22]的存储地址是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。<span style=\\\"color: rgb(102,102,102);\\\">注意是下标是从1开始的</span></div>','<div>10000 + ((56 - 1) * 65 -1 + 22) * 2 = 17192</div>',4,'4',3,12),(293,4,'<div><div><div id=\\\"highlighter_962645\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">char</code> <code class=\\\"java plain\\\">a[</code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">][</code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">][</code><code class=\\\"java value\\\">3</code><code class=\\\"java plain\\\">] = {{{</code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">, </code><code class=\\\"java value\\\">6</code><code class=\\\"java plain\\\">, </code><code class=\\\"java value\\\">3</code><code class=\\\"java plain\\\">}, {</code><code class=\\\"java value\\\">5</code><code class=\\\"java plain\\\">, </code><code class=\\\"java value\\\">4</code><code class=\\\"java plain\\\">, </code><code class=\\\"java value\\\">15</code><code class=\\\"java plain\\\">}}, {{</code><code class=\\\"java value\\\">3</code><code class=\\\"java plain\\\">, </code><code class=\\\"java value\\\">5</code><code class=\\\"java plain\\\">, </code><code class=\\\"java value\\\">33</code><code class=\\\"java plain\\\">}, {</code><code class=\\\"java value\\\">23</code><code class=\\\"java plain\\\">, </code><code class=\\\"java value\\\">13</code><code class=\\\"java plain\\\">, </code><code class=\\\"java value\\\">7</code><code class=\\\"java plain\\\">}}};</code></div><div><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">; i &lt; </code><code class=\\\"java value\\\">12</code><code class=\\\"java plain\\\">; i++)</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">printf(</code><code class=\\\"java string\\\">\\\"%d\\\"</code><code class=\\\"java plain\\\">, &nbsp;() ）;</code></div></div></td></tr></tbody></table></div></div><p class=\\\"p0\\\">  在空格处填上合适的语句，顺序打印出<span>a</span>  <span>中的数字</span></p></div>','<div>数组名代表第一个数组元素的首地址，故填入*（a[0][0] + i）</div>',10,'1',3,12),(294,4,'<div><div>  以下函数查找一个整数数组中第二大的数，请填空。 </div><div><div id=\\\"highlighter_668971\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">#include &lt;stdio.h&gt;</code></div><div><code class=\\\"java keyword\\\">const</code> <code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">MINNUMBER = -</code><code class=\\\"java value\\\">32767</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">find_set_max(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">data[], </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">count)</code></div><div><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">maxnumber = data[</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">];</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">sec_max = MINNUMBER;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i = </code><code class=\\\"java value\\\">1</code><code class=\\\"java plain\\\">; i &lt; count; i ++ )</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(maxnumber &lt; data[i])</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">{&nbsp;&nbsp;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">();</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">();</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">else</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">{</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(data[i] &nbsp;&gt; sec_max)</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">()</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number20 index19 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">sec_max;</code></div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>','<div><div>  sec_max = maxnumber;<br> maxnumber = data[i];<br> sec_max = data[i];<br></div></div>',10,'2',3,12),(295,4,'<div>程序设计：给定2个大小分别为n, m的整数集合，分别存放在两个数组中 int A[n], B[m]，输出两个集合的交集。</div>','<div><div>  Java code： </div><div>  <br></div><div>  public static int[]&nbsp;intersection(int[] a,int[] b){ </div><div>  &nbsp; int aLen = a.length; </div><div>  &nbsp; int bLen = b.length; </div><div>  <div>   &nbsp; int aIndex = 0;  </div>  <div>   &nbsp; int bIndex = 0;  </div>  <div>   &nbsp; int cIndex = 0;  </div></div><div>  &nbsp; int[] c = new int[aLen]; </div><div>  <br></div><div>  &nbsp; Arrays.sort(a); </div><div>  &nbsp;&nbsp;Arrays.sort(b); </div><div>  <br></div><div>  &nbsp; while(aIndex != aLen &amp;&amp; bIndex != bLen){ </div><div>  &nbsp; &nbsp; if(a[aIndex] == b[bIndex]){ </div><div>  &nbsp; &nbsp; &nbsp; c[cIndex++] = a[aIndex]; </div><div>  <br></div><div>  &nbsp; &nbsp; &nbsp;aIndex++; </div><div>  &nbsp; &nbsp; &nbsp;bIndex++; </div><div>  &nbsp; &nbsp; }else if(<span>a[aIndex</span>  <span>] &lt; b[bIndex]</span>){ </div><div>  <span>&nbsp; &nbsp; &nbsp;aIndex++;</span>  <br></div><div>  &nbsp; &nbsp;&nbsp;}else{ </div><div>  &nbsp; &nbsp; &nbsp;<span>bIndex++;</span></div><div>  &nbsp; &nbsp; } </div><div>  &nbsp; } </div><div>  <br></div><div>  &nbsp; if(cIndex != aLen){ </div><div>  &nbsp; &nbsp; c = Arrays.copyOf(c ,cIndex); </div><div>  &nbsp; } </div><div>  <br></div><div>  &nbsp; return c; </div><div>  } </div><div>  <br></div><div>  <br></div></div>',10,'3',3,12),(298,1,'<div>串长度是指串中不同字符的个数()<ul><li>对</li><li>错</li><ul></ul></ul></div>','<div>B</div>',2,'1',3,13),(299,1,'<div>下面选项中合法的字符常量是？<ul><li>\\\"X\\\"</li><li>\'X\'</li><li>\'abc\'</li><li>\'\\\'</li><ul></ul></ul></div>','<div>B</div>',2,'2',3,13),(300,1,'<div><span>若串</span><span>=’software’</span><span>，其子串数目为：</span><ul><li>8</li><li>37</li><li>36</li><li>9</li><ul></ul></ul></div>','<div>B</div>',2,'3',3,13),(301,1,'<div><div>  若有以下定义和语句： </div><div><div id=\\\"highlighter_943947\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">char</code> <code class=\\\"java plain\\\">s1[]=</code><code class=\\\"java string\\\">\\\"12345\\\"</code><code class=\\\"java plain\\\">,*s2=</code><code class=\\\"java string\\\">\\\"1234\\\"</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">printf(</code><code class=\\\"java string\\\">\\\"%d\\n\\\"</code> <code class=\\\"java plain\\\">,strlen(strcpy(s1,s2)));</code></div></div></td></tr></tbody></table></div></div><div>  则输出结果是 </div><ul><li>4</li><li>5</li><li>9</li><li>10</li><ul></ul></ul></div>','<div>A</div>',2,'4',3,13),(302,1,'<div><div>  下面程序段的输出结果是 </div> <div><div id=\\\"highlighter_140229\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">char</code> <code class=\\\"java plain\\\">*p1 = ”</code><code class=\\\"java value\\\">123</code><code class=\\\"java plain\\\">”, *p2 = ”ABC”, str[</code><code class=\\\"java value\\\">50</code><code class=\\\"java plain\\\">] = “xyz”;</code></div><div><code class=\\\"java plain\\\">strcpy(str + </code><code class=\\\"java value\\\">2</code><code class=\\\"java plain\\\">, strcat(p1, p2));</code></div><div><code class=\\\"java plain\\\">printf(“%s\\n”, str);</code></div></div></td></tr></tbody></table></div></div> <br><ul><li>xyz123ABC</li><li>z123ABC</li><li>xy123ABC</li><li>出错</li><ul></ul></ul></div>','<div>D</div>',2,'5',3,13),(303,2,'<div>在一个存放字符串的数组char &nbsp;p_str[]，要把字符串中第4个字符的值改为\'a\'，正确的做法是？<ul><li>p_str[3]=\'a\'</li><li>*(p_str+3)=\'a\'</li><li>p_str[4]=\'a\'</li><li>*(p_str+4)=\'a\'</li><ul></ul></ul></div>','<div>AB</div>',4,'2',3,13),(304,2,'<div>有如下语句序列：<br> char str[10]；cin&gt;&gt;str；<br> 当从键盘输入”I love this game”时，str中的字符串是<br><br><ul><li>\\\"I love this game\\\"</li><li>\\\"I love thi\\\"</li><li>\\\"I love\\\"</li><li>\\\"I\\\"</li><ul></ul></ul></div>','<div>D</div>',4,'3',3,13),(305,2,'<div>在下列表述中,()是错误的<ul><li>含有一个或多个空格字符的串称为空串</li><li>对n(n&gt;0)个顶点的网,求出权最小的n-1条边便可构成其最小生成树</li><li>选择排序算法是不稳定的</li><li>平衡二叉树的左右子树的结点数之差的绝对值不超过1</li><ul></ul></ul></div>','<div>ABD</div>',4,'4',3,13),(306,3,'<div>中缀表达式(a+b)*c*(d-e/f) 转成后缀<u>&nbsp;&nbsp;&nbsp;&nbsp;</u> </div>','<div>ab+c*def/-*</div>',4,'3',3,13),(307,3,'<div>若初始序列为gbfcdae，那么至少需要<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>次两两交换，才能使该序列变为abcdefg。任给一个自由a--g这7个字母组成的排列，最坏的情况下需要至少<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>次两两交换，才能使序列变为abcdefg。<br></div>','<div>答案：<br> 次数最少的交换方法是：每次两两交换至少要使一个字符到达最终位置。<br> 第一次交换a,g结果为：abfcdge<br> 第一次交换c,f结果为：abcfdge<br> 第一次交换f,d结果为：abcdfge<br> 第一次交换e,f结果为：abcdegf<br> 第一次交换g,f结果为：abcdefg<br> 完成，一共交换了5次<br> 上面的交换中，由于b正好在最终位置，因此省去了一次交换<br> 任给一个自由a--g这7个字母组成的排列，最坏情况需要交换7-1=6次<br> 这种最坏情况是每个字符都需要交换一次来达到最终位置，最后一次交换使的两个字符同时到达最终位置。N个字符最坏情况需要至少N-1次交换<br></div>',4,'4',3,13),(308,4,'<div>编写一个方法，求一个字符串的字节长度。</div>','<div><div>  java代码如下： </div><div>  <div><div id=\\\"highlighter_107810\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">strlen(String str){</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java keyword\\\">byte</code><code class=\\\"java plain\\\">[] strb=str.getBytes();</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">strb.length;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div>  <br></div></div>',10,'1',3,13),(309,4,'<div>字符串abcdefg，要求按逆序输出为gfedcba</div>','<div><div> 根据栈的后进先出特性，先把abcdefg入栈，然后再依次出栈即可</div><div> java代码如下</div><div><div id=\\\"highlighter_651053\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">import</code> <code class=\\\"java plain\\\">java.util.Stack;</code></div><div>&nbsp;</div><div><code class=\\\"java keyword\\\">public</code> <code class=\\\"java keyword\\\">class</code> <code class=\\\"java plain\\\">StringReverse</code></div><div><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java keyword\\\">public</code> <code class=\\\"java keyword\\\">static</code> <code class=\\\"java keyword\\\">void</code> <code class=\\\"java plain\\\">main(String[] args)</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">{</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java comments\\\">// TODO Auto-generated method stub</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">Stack&lt;Character&gt; stack = </code><code class=\\\"java keyword\\\">new</code> <code class=\\\"java plain\\\">Stack&lt;Character&gt;();</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">String str = </code><code class=\\\"java string\\\">\\\"abcdefg\\\"</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">char</code><code class=\\\"java plain\\\">[] cc = str.toCharArray();</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">; i &lt; cc.length; i++)</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">{</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">stack.push(cc[i]);</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(</code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">i = </code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">; i &lt; cc.length; i++)</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">{</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">System.out.print(stack.pop());</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number20 index19 alt1\\\">&nbsp;</div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'3',3,13),(310,4,'<div>在写一个函数，根据两文件的绝对路径算出相对路径。如 a=\\\"/qihoo/app/a/b/c/d/new.c\\\",b=\\\"/qihoo/app/1/2/test.c\'，那么b相对于a的相对路径是\\\"../../../../1/2/test.c\\\"</div>','<div><div><div id=\\\"highlighter_471975\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">public</code> <code class=\\\"java keyword\\\">class</code> <code class=\\\"java plain\\\">PathCal {</code></div><div>&nbsp;</div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java keyword\\\">public</code> <code class=\\\"java keyword\\\">static</code> <code class=\\\"java keyword\\\">void</code> <code class=\\\"java plain\\\">main(String[] args) </code><code class=\\\"java keyword\\\">throws</code> <code class=\\\"java plain\\\">Exception { &nbsp;&nbsp;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;</code>&nbsp;</div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp; &nbsp; </code><code class=\\\"java plain\\\">String pathA = </code><code class=\\\"java string\\\">\\\"/qihoo/app/a/b/c/d/new.c\\\"</code><code class=\\\"java plain\\\">; &nbsp;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp; &nbsp; </code><code class=\\\"java plain\\\">String pathB = </code><code class=\\\"java string\\\">\\\"/qihoo/app/1/2/test.c\\\"</code><code class=\\\"java plain\\\">; &nbsp;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp; &nbsp; </code><code class=\\\"java plain\\\">System.out.println(pathRelative(pathB,pathA,</code><code class=\\\"java string\\\">\\\"\\\"</code><code class=\\\"java plain\\\">)); &nbsp;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">} &nbsp;&nbsp;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;</code>&nbsp;</div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java preprocessor\\\">/**&nbsp;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;</code><code class=\\\"java preprocessor\\\">* pathA相对于pathB的相对路径 递归算法:&nbsp;</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;</code><code class=\\\"java preprocessor\\\">*/</code> &nbsp;</div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java keyword\\\">public</code> <code class=\\\"java keyword\\\">static</code> <code class=\\\"java plain\\\">String pathRelative(String pathA,String pathB, String tempPath) { &nbsp;</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp; &nbsp; </code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(pathA.startsWith(pathB)) &nbsp;</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">pathA.replaceFirst(pathB+</code><code class=\\\"java string\\\">\\\"/\\\"</code><code class=\\\"java plain\\\">,tempPath.substring(</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">,tempPath.length()-</code><code class=\\\"java value\\\">3</code><code class=\\\"java plain\\\">)); &nbsp;</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp; &nbsp; </code><code class=\\\"java keyword\\\">else</code> &nbsp;</div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; </code><code class=\\\"java keyword\\\">return</code> <code class=\\\"java plain\\\">pathRelative(pathA, pathB.substring(</code><code class=\\\"java value\\\">0</code><code class=\\\"java plain\\\">, pathB.lastIndexOf(</code><code class=\\\"java string\\\">\\\"/\\\"</code><code class=\\\"java plain\\\">)), </code><code class=\\\"java string\\\">\\\"../\\\"</code> <code class=\\\"java plain\\\">+ tempPath); &nbsp;</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">} &nbsp;</code></div><div class=\\\"line number19 index18 alt2\\\">&nbsp;</div><div class=\\\"line number20 index19 alt1\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'4',3,13),(311,1,'<div>设散列表的长度为8，散列函数H(k)=kmod 7，初始记录关键字序列为(32,24,15,27,20,13)，计算用链地址法作为解决冲突方法的平均查找长度是（）<ul><li>1.5</li><li>1.6</li><li>1.4</li><li>2</li><ul></ul></ul></div>','<div>A</div>',2,'1',3,14),(312,1,'<div>ArrayList和LinkList的描述，下面说法错误的是？<ul><li>LinkedeList和ArrayList都实现了List接口</li><li>ArrayList是可改变大小的数组，而LinkedList是双向链接串列</li><li>LinkedList不支持高效的随机元素访问</li><li>在LinkedList的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在ArrayList的中间插入或删除一个元素的开销是固定的</li><ul></ul></ul></div>','<div>D</div>',2,'2',3,14),(313,1,'<div>假设要存储一个数据集，数据维持有序，对其的操作只有插入、删除和顺序遍历，综合存储效率和运行速度，下列哪种数据结构是最适合的是？<ul><li>数组</li><li>链表</li><li>哈希表</li><li>队列</li><ul></ul></ul></div>','<div>B</div>',2,'3',3,14),(314,1,'<div>线性表的顺序存储结构是一种()<ul><li>随机存取的存储结构</li><li>顺序存取的存储结构</li><li>索引存取的存储结构</li><li>Hash存取的存储结构</li><ul></ul></ul></div>','<div>A</div>',2,'4',3,14),(315,1,'<div><div>  NumberList是一个顺序容器，以下代码执行后，NumberList里的元素依次为： </div> <div> <div><div id=\\\"highlighter_592911\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp plain\\\">List&lt;</code><code class=\\\"cpp color1 bold\\\">int</code><code class=\\\"cpp plain\\\">&gt; NumberList = </code><code class=\\\"cpp keyword bold\\\">new</code> <code class=\\\"cpp plain\\\">List&lt;</code><code class=\\\"cpp color1 bold\\\">int</code><code class=\\\"cpp plain\\\">&gt;(){2,4,1,3,5};</code></div><div><code class=\\\"cpp keyword bold\\\">for</code><code class=\\\"cpp plain\\\">(</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">i = 0;i&lt;NumberList.Count;++i)</code></div><div><code class=\\\"cpp plain\\\">{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">v = NumberList[i];</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">if</code><code class=\\\"cpp plain\\\">(v%2 = = 0)</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">NumberList.Remove(v);</code><code class=\\\"cpp comments\\\">//删除的是元素，而非下标</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div><code class=\\\"cpp plain\\\">}</code></div></div></td></tr></tbody></table></div></div> </div><ul><li>2,4,1,3,5</li><li>2,1,3,5</li><li>4,1,3,5</li><li>1,3,5</li><ul></ul></ul></div>','<div>C</div>',2,'5',3,14),(316,1,'<div>下面有关数据结构的说法是正确的？<ul><li>数组和链表都可以随机访问</li><li>数组的插入和删除可以 O(1)</li><li>哈希表没有办法做范围检查</li><li>以上说法都不正确</li><ul></ul></ul></div>','<div>B</div>',2,'5',3,14),(317,2,'<div>在一个单链表中，若p所指结点不是最后结点，在p之后插入s所指结点，则执行？<ul><li>s-&gt;next=p ; p-&gt;next=s ;</li><li>s-&gt;next=p-&gt;next; p-&gt;next=s;</li><li>s-&gt;next=p-&gt;next ; p=s;</li><li>p-&gt;next=s ; s-&gt;next=p;</li><ul></ul></ul></div>','<div>B</div>',4,'1',3,14),(318,2,'<div>下列哪两个数据结构，同时具有较高的查找和删除性能？（）<ul><li>有序数组</li><li>有序链表</li><li>AVL树</li><li>Hash表</li><ul></ul></ul></div>','<div>CD</div>',4,'3',3,14),(319,2,'<div>以下操作中，数组比链表速度更快的是____<ul><li>原地逆序</li><li>头部插入</li><li>返回中间节点</li><li>返回头部节点</li><li>选择随机节点</li><ul></ul></ul></div>','<div>ACE</div>',4,'4',3,14),(320,3,'<div>对长度为n的线性表进行顺序查找，在最坏情况下所需要的比较次数为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u> </div>','<div>n</div>',4,'2',3,14),(321,3,'<div>下列给定程序中，函数fun的功能是：统计带头结点的单向链表中结点的个数，并存放在形参n所指的存储单元中。 <br> 请在程序的下画线处填入正确的内容并将下画线删除，使程序得出正确的结果。 <br> 试题程序： <br> #define N 8<br> typedef struct list<br> {<br> &nbsp; &nbsp; int data;<br> &nbsp; &nbsp; struct list *next;<br> } SLIST;<br> SLIST *creatlist (int *a);<br> void outlist(SLIST *);<br> void fun (SLIST *h, int *n)<br> {<br> &nbsp; &nbsp; SLTST *p;<br> &nbsp; &nbsp; <u>&nbsp;&nbsp;&nbsp;&nbsp;</u> = 0;<br> &nbsp; &nbsp; p = h -&gt; next;<br> &nbsp; &nbsp; while (p)<br> &nbsp; &nbsp; {<br> &nbsp; &nbsp; &nbsp; &nbsp; (* n ) ++;<br> &nbsp; &nbsp; &nbsp; &nbsp; p = p -&gt; <u>&nbsp;&nbsp;&nbsp;&nbsp;</u>;<br> &nbsp; &nbsp; }<br> }<br> main ( )<br> {<br> &nbsp; &nbsp; SLIST *head ;<br> &nbsp; &nbsp; int a [ N ] = {12 , 87 , 45 , 32 , 91 , 16 , 20, 48}, num;<br> &nbsp; &nbsp; head = creatlist (a);<br> &nbsp; &nbsp; outlist (head);<br> &nbsp; &nbsp; fun(<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>, &amp; num);<br> &nbsp; &nbsp; printf ( \\\" \\ nnumber = d \\ n \\\", num);<br> }<br> SLIST *creatlist (int a [])<br> {<br> &nbsp; &nbsp; SLTST *h , * p , * q ; &nbsp; &nbsp;int i;<br> &nbsp; &nbsp; h = p = (SLIST *) malloc(sizeof(SLIST));<br> &nbsp; &nbsp; for ( i = 0 ; i &lt; N ; i + + )<br> &nbsp; &nbsp; {<br> &nbsp; &nbsp; &nbsp; &nbsp; q = ( SLIST *) malloc ( sizeof ( SLIST ) );<br> &nbsp; &nbsp; &nbsp; &nbsp; q -&gt; data = a [ i ] ;<br> &nbsp; &nbsp; &nbsp; &nbsp; p -&gt; next = q ;<br> &nbsp; &nbsp; &nbsp; &nbsp; p = q ;<br> &nbsp; &nbsp; }<br> &nbsp; &nbsp; p - &gt; next = 0 ;<br> &nbsp; &nbsp; return h;<br> }<br> void outlist ( SLIST *h )<br> {<br> &nbsp; &nbsp; SLIST &nbsp; &nbsp;*P ;<br> &nbsp; &nbsp; p = h -&gt; next ;<br> &nbsp; &nbsp; if &nbsp;(p == NULL )<br> &nbsp; &nbsp; &nbsp; &nbsp; printf ( \\\"The list is NULL ! \\ n \\\");<br> &nbsp; &nbsp; else<br> &nbsp; &nbsp; {<br> &nbsp; &nbsp; &nbsp; &nbsp; printf ( \\\"\\nHead \\\" );<br> &nbsp; &nbsp; &nbsp; &nbsp; do<br> &nbsp; &nbsp; &nbsp; &nbsp; {<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; printf ( \\\" -&gt; % d\\\", p -&gt; data );<br> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p = p-&gt;next ;<br> &nbsp; &nbsp; &nbsp; &nbsp; }<br> &nbsp; &nbsp; &nbsp; &nbsp; while ( p != NULL );<br> &nbsp; &nbsp; &nbsp; &nbsp; printf ( \\\" -&gt; End \\ n \\\");<br> &nbsp; &nbsp; }<br> }&nbsp;<br><br></div>','<div><div>  答案：*n,next,head </div><div>  1, 初始化统计链表节点个数的（*n）值为0 </div><div>  2，指向下一个结点 </div><div>  3，把链表头指针传递给fun函数 </div></div>',4,'3',3,14),(322,3,'<div>两个无环点链表L1，L2，其长度分别为m和n(m&gt;n),判定L1,L2是否相交的时间复杂度是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>，空间复杂度是（不包括原始链表L1,L2）<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。</div>','<div><span style=\\\"color: rgb(102,102,102);font-family: &quot;Helvetica Neue&quot; , STHeiti , &quot;Microsoft YaHei&quot; , Helvetica , Arial , sans-serif;line-height: 25.2px;background-color: rgb(255,255,255);\\\">如果两个没有环的链表相交于某个节点，那么在这个节点之后的所有节点都是两个链表所共有的。</span><br><span style=\\\"color: rgb(102,102,102);font-family: &quot;Helvetica Neue&quot; , STHeiti , &quot;Microsoft YaHei&quot; , Helvetica , Arial , sans-serif;line-height: 25.2px;background-color: rgb(255,255,255);\\\">（1）遍历链表A，记录其长度len1，遍历链表B，记录其长度len2。</span><br><span style=\\\"color: rgb(102,102,102);font-family: &quot;Helvetica Neue&quot; , STHeiti , &quot;Microsoft YaHei&quot; , Helvetica , Arial , sans-serif;line-height: 25.2px;background-color: rgb(255,255,255);\\\">（2）按尾部对齐，如果两个链表的长度不相同，让长度更长的那个链表从头节点先遍历abs(len1-en2),这样两个链表指针指向对齐的位置。</span><br><span style=\\\"color: rgb(102,102,102);font-family: &quot;Helvetica Neue&quot; , STHeiti , &quot;Microsoft YaHei&quot; , Helvetica , Arial , sans-serif;line-height: 25.2px;background-color: rgb(255,255,255);\\\">（3）然后两个链表齐头并进，当它们相等时，就是交集的节点。</span><br><span style=\\\"color: rgb(102,102,102);font-family: &quot;Helvetica Neue&quot; , STHeiti , &quot;Microsoft YaHei&quot; , Helvetica , Arial , sans-serif;line-height: 25.2px;background-color: rgb(255,255,255);\\\">时间复杂度O(n+m)，空间复杂度O(1)</span></div>',4,'4',3,14),(323,4,'<div>请用C++实现以下print函数,打印链表I中的所有元素, 每个元素单独成一行<br><div><div id=\\\"highlighter_367480\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp keyword bold\\\">void</code> <code class=\\\"cpp plain\\\">print(</code><code class=\\\"cpp keyword bold\\\">const</code> <code class=\\\"cpp plain\\\">std::list&lt;</code><code class=\\\"cpp color1 bold\\\">int</code><code class=\\\"cpp plain\\\">&gt; &amp;l){</code></div><div><code class=\\\"cpp plain\\\">}</code></div></div></td></tr></tbody></table></div></div></div>','<div><div><div id=\\\"highlighter_896559\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">void</code> <code class=\\\"java plain\\\">print(</code><code class=\\\"java keyword\\\">const</code> <code class=\\\"java plain\\\">std::list&lt;</code><code class=\\\"java keyword\\\">int</code><code class=\\\"java plain\\\">&gt; &amp;l){</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">list &lt; </code><code class=\\\"java keyword\\\">int</code> <code class=\\\"java plain\\\">&gt; ::const_iterator it = l.begin();</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java keyword\\\">for</code> <code class=\\\"java plain\\\">(; it != l.end(); ++it)</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java plain\\\">cout &lt;&lt; *it&lt;&lt; </code><code class=\\\"java string\\\">\\\"\\n \\\"</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><br></div>',10,'2',3,14),(324,4,'<div>说出ArrayList,Vector, LinkedList的存储性能和特性？</div>','<div>ArrayList 采用的是数组形式来保存对象的，这种方式将对象放在连续的位置中，所以最大的缺点就是插入删除时非常麻烦 LinkedList采用的将对象存放在独立的空间中，而且在每个空间中还保存下一个链接的索引 但是缺点就是查找非常麻烦 要丛第一个索引开始<br> ArrayList和Vector都是用数组方式存储数据,此数组元素数要大于实际的存储空间以便进行元素增加和插入操作,他们都允许直接用序号索引元素,但是插入数据元素涉及到元素移动等内存操作,所以索引数据快而插入数据慢.<br> Vector使用了sychronized方法(线程安全),所以在性能上比ArrayList要差些.<br> LinkedList使用双向链表方式存储数据,按序号索引数据需要前向或后向遍历数据，所以索引数据慢,是插入数据时只需要记录前后项即可,所以插入的速度快。<br></div>',10,'3',3,14),(325,1,'<div>已知一个栈的入栈序列是m，n ,x,y,z,则不可能出现的出栈顺序是？<ul><li>mnxyz</li><li>xnyzm</li><li>nymxz</li><li>nmyzx</li><ul></ul></ul></div>','<div>C</div>',2,'1',3,15),(326,1,'<div>设输入序列为1,2,3，则经过栈的作用后可以得到（）中不同的输出序列。<ul><li>3</li><li>7</li><li>8</li><li>5</li><ul></ul></ul></div>','<div>D</div>',2,'2',3,15),(327,1,'<div>如果一个堆栈的入栈序列是A,B,C,D,E,则堆栈的不可能输出顺序是（）。<ul><li>EDCBA</li><li>DECBA</li><li>DCEAB</li><li>ABCDE</li><ul></ul></ul></div>','<div>C</div>',2,'3',3,15),(328,1,'<div>下列数据结构具有记忆功能的是？<ul><li>队列</li><li>循环队列</li><li>栈</li><li>顺序表</li><ul></ul></ul></div>','<div>C</div>',2,'4',3,15),(329,1,'<div>以下与数据的存储结构无关的术语是()<ul><li>循环队列</li><li>链表</li><li>哈希表</li><li>栈</li><ul></ul></ul></div>','<div>D</div>',2,'5',3,15),(330,2,'<div>全局变量和局部变量在内存中的区别是什么？<ul><li>二者没有区别</li><li>生存周期不同</li><li>作用范围不同</li><li>占用的内存大小一样</li><ul></ul></ul></div>','<div>BC</div>',4,'1',3,15),(331,2,'<div>输入序列ABCABC经过栈操作变成ABCCBA，下面哪些是可能的栈操作？<ul><li>push pop push pop push pop push push push pop pop pop</li><li>push push push push push push pop pop pop pop pop pop</li><li>push push push pop pop pop pushpush pop pop push pop</li><li>push push push push pop pushpop push pop pop pop pop</li><ul></ul></ul></div>','<div>AD</div>',4,'2',3,15),(332,2,'<div><span>There is a sequence of n numbers 1, 2, 3,.., n and a stack which  can keep m numbers at most. Push the n numbers into the stack  following the sequence and pop out randomly.  Suppose n is 2 and m is  3, the output sequence may be 1, 2 or 2, 1, so we get 2 different  sequences. Suppose n is 7 and m is 5, please choose the output  sequences of the stack:</span><ul><li>1, 2, 3, 4, 5, 6, 7</li><li>7, 6, 5, 4, 3, 2, 1</li><li>5, 6, 4, 3, 7, 2, 1</li><li>4, 5, 6, 3, 7, 2, 1</li><li>1, 7, 6, 5, 4, 3, 2</li><li>3, 2, 1, 7, 6,5, 4</li><ul></ul></ul></div>','<div>ACDF</div>',4,'3',3,15),(333,2,'<div><span>便于插入和删除的容器是（）</span><ul><li>list</li><li>vector</li><li>map</li><li>set</li><ul></ul></ul></div>','<div>ACD</div>',4,'4',3,15),(334,3,'<div>设输入序列为1,2,3，则经过栈的作用后可以得到<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>种不同的输出序列。</div>','<div>答案：5种<br> 分别是：<br> 123，入栈一个就出栈一个<br> 132，1入栈出栈，23依次入栈，再出栈<br> 213，12依次入栈，依次出栈，3出栈，3出栈，<br> 231，12入栈，2出栈，3入栈，依次出栈<br> 321，依次全部入栈，依次出栈<br></div>',4,'2',3,15),(335,4,'<div>判断一个括号字符串是否匹配正确，如果括号有多种，怎么做？如（（[]））正确，[[(()错误。</div>','<div>用栈来出现，凡是左括号就压栈，凡是右括号就出栈，最后如果栈为空就匹配正确</div>',10,'2',3,15),(336,4,'<div><p align=\\\"justify\\\" style=\\\"text-align: justify;\\\">  <span>一般情况下，当一个算法中需要建立多个堆栈时可以选用下列三种处理方案之一。问：这三种方案之间相比较各有什么优点和缺点？</span></p><p align=\\\"justify\\\" style=\\\"text-align: justify;\\\">  <span>（1）</span>  <span>多个堆栈共享一个连续的存储空间；</span></p><p align=\\\"justify\\\" style=\\\"text-align: justify;\\\">  <span>（2）</span>  <span>分别建立多个采用顺序存储结构的堆栈；</span></p><p align=\\\"justify\\\" style=\\\"text-align: justify;\\\">  <span>（3）</span>  <span>分别建立多个采用链式存储结构的堆栈。</span></p></div>','<div><div>  （1）多个堆栈共享一个连续的存储空间 </div> <div>  &nbsp; &nbsp; &nbsp; &nbsp; 优点：充分利用存储空间，只有在整个存储空间都用完时才能产生溢出。 </div> <div>  缺点：当一个堆栈溢出时需要向左、右栈查询有无空闲单元。如有，则需要移动相应的元素和修改栈顶、栈底的指针，当各个堆栈接近溢出时，查询空闲单元、移动元素和修改栈底栈顶指针位置的操作频繁，计算复杂，并且耗费时间。 </div> <div>  （2）<span style=\\\"color: rgb(51,51,51);\\\">分别建立多个采用顺序存储结构的堆栈；</span> </div> <div>  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 优点：每个堆栈仅用一个顺序存储空间时，操作简便 </div> <div>  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 缺点：难以确定初始分配存储空间的大小，空间分配少了，容易产生溢出，空间分配多了，容易造成空间浪费；并且各个堆栈不能共享空间。 </div> <div>  <span><span style=\\\"color: rgb(51,51,51);\\\">（3）</span><span style=\\\"color: rgb(51,51,51);\\\">&nbsp;</span><span style=\\\"color: rgb(51,51,51);\\\">分别建立多个采用链式存储结构的堆栈</span></span> </div> <div>  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 优点：不考虑堆栈的溢出 </div> <div>  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 缺点：堆栈中各元素要通过指针链接，比顺序存储结构多占用存储空间 </div></div>',10,'3',3,15),(337,1,'<div>假设某个循环队列采用数组Q【0<span style=\\\"color: rgb(51,51,51);\\\">…9</span>】表示，当前的队头指针front和队尾指针rear分别为4和8。首先执行两次入队操作，然后再执行两次出队操作，队头指针<span>front<span>和队尾指针rear应该分别变为</span>（ &nbsp;）</span><ul><li>5，9</li><li>6，0</li><li>0，6</li><li>6，4</li><ul></ul></ul></div>','<div >B</div>',2,'1',3,16),(338,1,'<div><p>  现有初始状态均为空的栈X和队列Y，元素a、b、c、d、e、f、g依次进入栈X，每个元素出栈后即进入队列Y，如果出队列的顺序为b、c、f、e、g、d、a，则要求栈X最小容量为（） </p><ul><li>6</li><li>5</li><li>4</li><li>3</li><ul></ul></ul></div>','<div >C</div>',2,'2',3,16),(339,1,'<div><br> <br> <p>  某队列允许在其两端进行入队操作，但仅允许在一端进行出队操作。若元素a、b、c、d、e依次入此队列后再进行出队操作，则不可能得到的出队序列是（）。 </p><ul><li>b a c d e</li><li>d b a c e</li><li>d b c a e</li><li>e c b a d</li><ul></ul></ul></div>','<div >D</div>',2,'3',3,16),(340,1,'<div><br> <br> <p>  已知循环队列存储在一维数组A[0...n-1]中，且队列非空时front和rear分别指向队头元素和队尾元素。若初始时队列为空，且要求第1个进入队列的元素存储在A[0]处，则初始时front和rear的值分别是（）。 </p><ul><li>0，0</li><li>0，n-1</li><li>n-1，0</li><li>n-1，n-1</li><ul></ul></ul></div>','<div>B</div>',2,'4',3,16),(341,1,'<div>假设某个循环队列采用数组Q【0<span style=\\\"color: rgb(51,51,51);\\\">…9</span>】表示，当前的队头指针front和队尾指针rear分别为4和8。首先执行两次入队操作，然后再执行两次出队操作，队头指针<span>front<span>和队尾指针rear应该分别变为</span>（ &nbsp;）</span><ul><li>5，9</li><li>6，0</li><li>0，6</li><li>6，4</li><ul></ul></ul></div>','<div >B</div>',2,'5',3,16),(342,1,'<div>设循环队列为Q(1:m)，其初始状态为front=rear=m，经过一系列入列与退队运算后，front=15，rear=20，现要在该循环队列中寻找最大的元素，最坏情况下需要比较的次数为（&nbsp; &nbsp; ）<ul><li>4</li><li>6</li><li>m-5</li><li>m-6</li><ul></ul></ul></div>','<div >A</div>',2,'5',3,16),(343,2,'<div>下列数据中,()是非线性数据结构<ul><li>栈</li><li>队列</li><li>完全二叉树</li><li>堆</li><ul></ul></ul></div>','<div >CD</div>',4,'1',3,16),(344,2,'<div>数据结构分为逻辑结构和存储结构，下列数据结构中不属于存储结构的是？<ul><li>线性链表</li><li>二叉链表</li><li>栈与队列</li><li>循环队列</li><ul></ul></ul></div>','<div >CD</div>',4,'2',3,16),(345,2,'<div><span>下列叙述中正确的是（</span><span>）</span><ul><li>在循环队列中，队头指针和队尾指针的动态变化决定队列的长度</li><li>在循环队列中，队尾指针的动态变化决定队列的长度</li><li>在带链的队列中，队头指针与队尾指针的动态变化决定队列的长度</li><li>在带链的栈中，栈顶指针的动态变化决定栈中元素的个数</li><ul></ul></ul></div>','<div >AD</div>',4,'3',3,16),(346,2,'<div>已知输入序列为abcd经过输出受限的双向队列后能得到的输出序列有()<ul><li>dacb</li><li>cadb</li><li>dbca</li><li>bdac</li><li>以上答案都不对</li><ul></ul></ul></div>','<div >BD</div>',4,'4',3,16),(347,3,'<div>假设循环队列Q的存储容量是maxsize，队头和队尾指针分别为front和rear，则该<span>队列包含的数据元素个数为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span></div>','<div>（maxsize + rear - front）% maxsize</div>',4,'1',3,16),(348,3,'<div>在一个容量为25的循环队列中，若头指针front=18，尾指针rear=9，则该循环队列中共有<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>个元素。</div>','<div >16</div>',4,'2',3,16),(350,4,'<div><p>  <span>循环队列的队首、队尾指针分别为f、r，最大长度n，判断队空的条件是（）</span></p></div>','<div><div>  这道题答案是r==f。<br> 原始状态下，循环队列无法使用r==f判断是否为空，原因在于队列满时r==f也成立，于是为了解决这一问题，我们约定<span>牺牲一个元素空间，以“队列头指针front在队尾指针rear的下一个位置上”作为队列“满”状态的标志。<br> 队空时： front=rear，不能出队。<br> 队满时： (rear+1)%maxsize=front，不能入队。</span><br> 这种情况下，f==r时表明该队列为空。 </div></div><div><div>  这道题答案是r==f。<br> 原始状态下，循环队列无法使用r==f判断是否为空，原因在于队列满时r==f也成立，于是为了解决这一问题，我们约定<span>牺牲一个元素空间，以“队列头指针front在队尾指针rear的下一个位置上”作为队列“满”状态的标志。<br> 队空时： front=rear，不能出队。<br> 队满时： (rear+1)%maxsize=front，不能入队。</span><br> 这种情况下，f==r时表明该队列为空。 </div></div>',10,'2',3,16),(351,4,'<div><div>  已知队列(Queue)支持先进先出的操作add/remove，而栈(Stack)则支持先进后出的操作push/pop，请用两个队列实现栈先进后出的操作，希望该栈的push/pop时间复杂度尽量小。 </div><div>  &nbsp;1) 简述思路(3分) </div><div>  2) 已知这两个队列的容量为M,该栈的容量是多少(1分) </div> 3) 假设队列的每次Add/Remove操作时间复杂度O(1)，N代表存储在栈里的元素个数，请评估该栈的push/pop操作时间复杂度(1分)<br> 4) 写出push/pop的代码，需要考虑栈溢出(stackoverflow)的情况(3分) <p>  <br></p></div>','<div><div> 用队列模拟栈 </div><div>  push是O(1)的，同时保证q[cur]的size &lt;=  1，这样能在pop最近一个push的元素时做到O(1)（但总的时间是没变的，只量把一些两个队列之间的pop和push提前做了），其他情况还是O(n) </div><div><div id=\\\"highlighter_441018\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div><div class=\\\"line number22 index21 alt1\\\">22</div><div class=\\\"line number23 index22 alt2\\\">23</div><div class=\\\"line number24 index23 alt1\\\">24</div><div class=\\\"line number25 index24 alt2\\\">25</div><div class=\\\"line number26 index25 alt1\\\">26</div><div class=\\\"line number27 index26 alt2\\\">27</div><div class=\\\"line number28 index27 alt1\\\">28</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp preprocessor\\\">#include &lt;queue&gt;</code></div><div><code class=\\\"cpp keyword bold\\\">template</code><code class=\\\"cpp plain\\\">&lt;</code><code class=\\\"cpp keyword bold\\\">typename</code> <code class=\\\"cpp plain\\\">T&gt; </code><code class=\\\"cpp keyword bold\\\">class</code> <code class=\\\"cpp plain\\\">MyStack{</code></div><div><code class=\\\"cpp keyword bold\\\">private</code><code class=\\\"cpp plain\\\">:</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">std::queue&lt;T&gt; q[2];</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">cur;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">void</code> <code class=\\\"cpp plain\\\">check(){</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">if</code><code class=\\\"cpp plain\\\">(q[cur].empty() &amp;&amp; !q[!cur].empty()){</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">while</code><code class=\\\"cpp plain\\\">(q[!cur].size() &gt; 1) q[cur].push(q[!cur].front()), q[!cur].pop();</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">cur = !cur;</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"cpp keyword bold\\\">public</code><code class=\\\"cpp plain\\\">:</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">MyStack() : cur(0) { }</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">unsigned </code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">size() </code><code class=\\\"cpp keyword bold\\\">const</code> <code class=\\\"cpp plain\\\">{ </code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">q[0].size() + q[1].size(); }</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp color1 bold\\\">bool</code> <code class=\\\"cpp plain\\\">empty() </code><code class=\\\"cpp keyword bold\\\">const</code> <code class=\\\"cpp plain\\\">{ </code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">q[0].empty() &amp;&amp; q[1].empty(); }</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">void</code> <code class=\\\"cpp plain\\\">push(</code><code class=\\\"cpp keyword bold\\\">const</code> <code class=\\\"cpp plain\\\">T&amp; e){&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp comments\\\">//O(1)</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </code><code class=\\\"cpp keyword bold\\\">if</code><code class=\\\"cpp plain\\\">(!q[cur].empty()) q[!cur].push(q[cur].front()), q[cur].pop();</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">q[cur].push(e);</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number20 index19 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">const</code> <code class=\\\"cpp plain\\\">T&amp; top() {</code></div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">check();</code></div><div class=\\\"line number22 index21 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">q[cur].front();</code></div><div class=\\\"line number23 index22 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number24 index23 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">void</code> <code class=\\\"cpp plain\\\">pop() {</code></div><div class=\\\"line number25 index24 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">check();</code></div><div class=\\\"line number26 index25 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">q[cur].pop();</code></div><div class=\\\"line number27 index26 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number28 index27 alt1\\\"><code class=\\\"cpp plain\\\">}</code></div></div></td></tr></tbody></table></div></div><div>  <br></div></div>',10,'4',3,16),(352,1,'<div>判断下列说法是否正确：若一棵非空二叉树的先序遍历和后序遍历具有相同的结点访问顺序，则它一定是一棵只有根结点的二又树。（）<br><ul><li>正确</li><li>错误</li><ul></ul></ul></div>','<div>A</div>',2,'1',3,17),(353,1,'<div>由３个结点所构成的二叉树有（）种形态<ul><li>5</li><li>6</li><li>7</li><li>8</li><ul></ul></ul></div>','<div>A</div>',2,'2',3,17),(354,1,'<div><p>  <span>设n，m为一棵二叉树上的两个结点，在中序遍历时，n在m前的条件是（）</span></p><ul><li>n在m右方</li><li>n是m祖先</li><li>n在m左方</li><li>n是m子孙</li><ul></ul></ul></div>','<div>C</div>',2,'3',3,17),(355,1,'<div>把一棵树转换为二叉树后,这棵二叉树的形态是(&nbsp;&nbsp;&nbsp;&nbsp;)<ul><li>唯一的</li><li>有多种</li><li>有多种,但根节点都没有左孩子</li><li>有多种,但根节点都没有右孩子</li><ul></ul></ul></div>','<div>A</div>',2,'4',3,17),(356,1,'<div><div>  已知二叉树Node定义如下, 现在需要设计一个方法交换左子树和右子树, 下列方法中, 可以实现交换的是?（） </div> <div> <div><div id=\\\"highlighter_514576\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">class</code> <code class=\\\"java plain\\\">Node {</code></div><div><code class=\\\"java keyword\\\">public</code><code class=\\\"java plain\\\">:</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">Node* left;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">Node* right;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">char</code> <code class=\\\"java plain\\\">content;</code></div><div><code class=\\\"java spaces\\\">&nbsp;</code>&nbsp;</div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">Node(</code><code class=\\\"java keyword\\\">char</code> <code class=\\\"java plain\\\">content);</code></div><div><code class=\\\"java keyword\\\">private</code><code class=\\\"java plain\\\">:</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">Node(</code><code class=\\\"java keyword\\\">const</code> <code class=\\\"java plain\\\">Node&amp;);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">Node&amp; operator=(</code><code class=\\\"java keyword\\\">const</code> <code class=\\\"java plain\\\">Node&amp; node);</code></div><div><code class=\\\"java plain\\\">};</code></div></div></td></tr></tbody></table></div></div> <br> </div><ul><li>void swap(Node root) {Node* temp=root.left;root.left=root.right;root.right=temp;}</li><li>void swap(Node&amp; left, Node&amp; right) {Node temp=left; left=right;right=temp;}</li><li>void swap(Node* left, Node* right) {Node* temp=left; left=right;right=temp;}</li><li>void swap(Node*&amp; left, Node*&amp; right) {Node* temp=left; left=right;right=temp;}</li><ul></ul></ul></div>','<div>D</div>',2,'5',3,17),(357,2,'<div>根据下面哪些可以确定一棵二叉树？<ul><li>前序遍历和中序遍历</li><li>前序遍历和后序遍历</li><li>中序遍历和后序遍历</li><li>后序遍历</li><ul></ul></ul></div>','<div>AC</div>',4,'1',3,17),(359,2,'<div><span>已知一个二叉树的后序遍历的结果为</span> <span>AEFDHZMG,</span> <span>那么它的中序遍历可能为（）前序遍历可能为（）</span><ul><li>ADEFHMGZ</li><li>ADEFGHMZ</li><li>GDAEFMHZ</li><li>GDAFEMHZ</li><ul></ul></ul></div>','<div>BD</div>',4,'4',3,17),(360,3,'<div><p>  已知二叉树中有<span>50</span>个叶子结点，则该二叉树的总结点数至少是<span><u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span>  </p></div>','<div>99</div>',4,'1',3,17),(361,3,'<div>设一颗完全二叉树共有1699个结点，则该二叉树中叶子结点数为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u> </div>','<div>850</div>',4,'2',3,17),(362,3,'<div>由权值分别为3，8，6，2，5的叶子结点生成一棵哈夫曼树，它的带权路径长度为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>？</div>','<div>53</div>',4,'3',3,17),(363,4,'<div><div>  给定权w<span><sub>1</sub>.w<sub>2</sub>.,.....w<sub>m</sub></span><span>。试说明怎样来构造一个具有最小的加权路径长度的七叉树。试对于权</span><span>1,4,9,16，25，36,49.64.81.100</span><span>来构造最优的三叉树</span><span>,</span><span>并给出其最</span><span>小加权路径长度。</span>  </div></div>','<div><div>  要使<span style=\\\"color: rgb(51,51,51);\\\">加权路径长度最小，则使权值大的离根最近，权值小的离根远；即必须保证根度数为k。</span>  </div> <div>  <span>此处结点数为m，树的度数为k，下构造<span style=\\\"color: rgb(51,51,51);\\\">一个具有最小的加权路径长度</span>的k叉树。7叉，3叉同样满足。</span>  </div> <div>  <span style=\\\"color: rgb(51,51,51);\\\"> 1</span><span style=\\\"color: rgb(51,51,51);\\\">.if m &lt;= k 直接合并为一棵树</span>  </div> <div>  <span> 2.if m%(k-1) &lt;= 1, then let n = m%(k-1) + (k-1); else n = m%(k-1) // 使得根节点度为k</span>  </div> <div>  <span> 3.取最小的n个结点合并成一个结点 &nbsp;// 最小的n个处于离根最远处</span>  </div> <div>  <span> 4.结点按权值升序排序</span>  </div> <div>  <span> 5.取前k个权值最小结点合并</span>  </div> <div>  <span> 6.repeat 4-5， 直到合并所有节点。</span>  </div> <div>  <span><br> </span>  </div> <div>  <span>sol:</span>  </div> <div>  <span><span style=\\\"color: rgb(51,51,51);\\\"> 最</span><span style=\\\"color: rgb(51,51,51);\\\">小加权路径长度 = 705</span><br> </span>  </div></div>',10,'1',3,17),(364,4,'<div><p>  <span>设完全二叉树的顺序存储结构中存储数据ABCDE，要求给出该二叉树的链式存储结构并给出该二叉树的前序、中序和后序遍历序列。</span></p></div>','<div><span style=\\\"color: rgb(57,57,57);\\\">前序ABDEC，中序DBEAC，后序DEBCA。</span></div>',10,'2',3,17),(365,4,'<div>一棵排序二叉树，令 f=(最大值+最小值)/2， 设计一个算法，找出距离f值最近、大于f值的结点。 复杂度如果是O(n<sup>2</sup>)则不得分。</div>','<div>1：先找到值最小的节点，用O(h)的复杂度，h是值最小节点的高度 2：从最小的节点开始，依次找到当前节点的successor，然后把successor设置为当前节点，一直到当前节点大于f时，停止寻找 3：因为这个算法最多遍历边2次，变的数量比节点的数量小1，所以复杂度是O(n)</div>',10,'4',3,17),(366,1,'<div>评定一个有向图是否存在回路除了可以利用拓扑排序方法外，还可以利用<ul><li>广度优先遍历算法</li><li>深度优先遍历算法</li><li>求关键路径的方法</li><li>求最短路径的Di jkstra方法</li><ul></ul></ul></div>','<div>B</div>',2,'1',3,18),(367,1,'<div><p>  <span>一个n个顶点的连通无向图，其边的个数至少为（ &nbsp;&nbsp;）。</span></p><ul><li>n+1</li><li>n</li><li>n-1</li><li>Nlogn;</li><ul></ul></ul></div>','<div>C</div>',2,'2',3,18),(368,1,'<div>下面关于图的论述中哪个是不正确的？<ul><li>图由顶点和边的集合组成</li><li>有向图中不允许存在没有边或边连接的顶点存在</li><li>图中所有顶点的度之和为边的数量的两倍</li><li>邻接表是图的一种链式存储结构</li><ul></ul></ul></div>','<div>B</div>',2,'3',3,18),(370,1,'<div>有向无环图G中的有向边集合E={＜V1，V2＞，<span>＜V2，V3＞，<span>＜V3，V4＞，</span><span>＜V1，V4＞</span></span>}，则下列属于该<span>有向无环图G的一种拓扑排序序列的是（ &nbsp; &nbsp; ）</span><ul><li>V1,V2,V3,V4</li><li>V2,V3,V4,V1</li><li>V1,V4,V2,V3</li><li>V1,V2,V4,V3</li><ul></ul></ul></div>','<div>A</div>',2,'5',3,18),(371,2,'<div><p>  <span>下列关于<span>AOE</span>网的叙述中，不正确的是（）。</span>  </p><ul><li>关键活动不按期完成就会影响整个工程的完成时间</li><li>任何一个关键活动提前完成，那么整个工程将会提前完成</li><li>所有的关键活动提前完成，那么整个工程将会提前完成</li><li>某些关键活动提前完成，那么整个工程将会提前完成</li><ul></ul></ul></div>','<div>BD</div>',4,'1',3,18),(372,2,'<div><p>  <span>下面哪一方法可以判断出一个有向图是否有环（回路）：（）</span></p><ul><li>深度优先遍历</li><li>拓扑排序</li><li>求最短路径</li><li>求关键路径</li><ul></ul></ul></div>','<div>AB</div>',4,'2',3,18),(373,2,'<div>下面哪一方法可以判断出一个有向图是否有环(回路)()<ul><li>深度优先遍历</li><li>拓扑排序</li><li>Dijkstra求最短路径</li><li>求关键路径</li><ul></ul></ul></div>','<div>AB</div>',4,'4',3,18),(374,3,'<div><p>  <span>n个顶点的连通图用邻接矩阵表示时，该矩阵至少有<u><u>&nbsp;&nbsp;&nbsp;&nbsp;</u></u>  </span>  <span>非零元素。</span></p></div>','<div>2(n-1)</div>',4,'1',3,18),(375,3,'<div>N个顶点的强连通图的边数至少有<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>个？</div>','<div>N</div>',4,'3',3,18),(376,4,'<div>一个有向图在计算机存储器中的映像（或表示）通常有哪几种方法？</div>','<div>有向图:邻接矩阵邻接表十字链表无向图:邻接多重表邻接矩阵邻接表</div>',10,'1',3,18),(379,4,'<div>有1分,2分,5分,10分四种硬币，每种硬币数量无限，给定n分钱，求有多少种组合可以组合成n分钱?</div>','<div>①，四层循环 <br> ②，使用回溯法在空间中搜索<br> 代码为思路： 定义控制台应用程序的入口点。<br><div><div id=\\\"highlighter_205807\\\" class=\\\"syntaxhighlighter  cpp\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div><div class=\\\"line number20 index19 alt1\\\">20</div><div class=\\\"line number21 index20 alt2\\\">21</div><div class=\\\"line number22 index21 alt1\\\">22</div><div class=\\\"line number23 index22 alt2\\\">23</div><div class=\\\"line number24 index23 alt1\\\">24</div><div class=\\\"line number25 index24 alt2\\\">25</div><div class=\\\"line number26 index25 alt1\\\">26</div><div class=\\\"line number27 index26 alt2\\\">27</div><div class=\\\"line number28 index27 alt1\\\">28</div><div class=\\\"line number29 index28 alt2\\\">29</div><div class=\\\"line number30 index29 alt1\\\">30</div><div class=\\\"line number31 index30 alt2\\\">31</div><div class=\\\"line number32 index31 alt1\\\">32</div><div class=\\\"line number33 index32 alt2\\\">33</div><div class=\\\"line number34 index33 alt1\\\">34</div><div class=\\\"line number35 index34 alt2\\\">35</div><div class=\\\"line number36 index35 alt1\\\">36</div><div class=\\\"line number37 index36 alt2\\\">37</div><div class=\\\"line number38 index37 alt1\\\">38</div><div class=\\\"line number39 index38 alt2\\\">39</div><div class=\\\"line number40 index39 alt1\\\">40</div><div class=\\\"line number41 index40 alt2\\\">41</div><div class=\\\"line number42 index41 alt1\\\">42</div><div class=\\\"line number43 index42 alt2\\\">43</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"cpp preprocessor\\\">#include \\\"stdafx.h\\\"</code></div><div>&nbsp;</div><div><code class=\\\"cpp keyword bold\\\">using</code> <code class=\\\"cpp keyword bold\\\">namespace</code> <code class=\\\"cpp plain\\\">std;</code></div><div><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">count = 0;</code></div><div><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">Target = 0;</code></div><div><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">coin[4] = {1, 2, 5, 10};</code></div><div><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">total = 0;</code></div><div><code class=\\\"cpp plain\\\">vector solution;</code></div><div><code class=\\\"cpp keyword bold\\\">void</code> <code class=\\\"cpp plain\\\">dfs(</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">index)</code></div><div><code class=\\\"cpp plain\\\">{</code></div><div><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">if</code> <code class=\\\"cpp plain\\\">( total == Target )</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">{</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">count++;</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">cout &lt;&lt; count &lt;&lt; </code><code class=\\\"cpp string\\\">\\\":\\\"</code> <code class=\\\"cpp plain\\\">;</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">for</code> <code class=\\\"cpp plain\\\">( </code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">i = 0; i &lt; (</code><code class=\\\"cpp color1 bold\\\">int</code><code class=\\\"cpp plain\\\">)solution.size(); i++)</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">{</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">cout &lt;&lt; solution[i] &lt;&lt; </code><code class=\\\"cpp string\\\">\\\" \\\"</code><code class=\\\"cpp plain\\\">;</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">cout &lt;&lt; endl;</code></div><div class=\\\"line number20 index19 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">return</code><code class=\\\"cpp plain\\\">;</code></div><div class=\\\"line number21 index20 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number22 index21 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">if</code> <code class=\\\"cpp plain\\\">( total &gt; Target )</code></div><div class=\\\"line number23 index22 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">return</code><code class=\\\"cpp plain\\\">;</code></div><div class=\\\"line number24 index23 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">for</code> <code class=\\\"cpp plain\\\">( </code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">i = index; i &lt; 4; i++)</code></div><div class=\\\"line number25 index24 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">{</code></div><div class=\\\"line number26 index25 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">total += coin[i];</code></div><div class=\\\"line number27 index26 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">solution.push_back( coin[i] );</code></div><div class=\\\"line number28 index27 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">dfs(i);</code></div><div class=\\\"line number29 index28 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">solution.pop_back();</code></div><div class=\\\"line number30 index29 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">total -= coin[i];</code></div><div class=\\\"line number31 index30 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number32 index31 alt1\\\"><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number33 index32 alt2\\\"><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">_tmain(</code><code class=\\\"cpp color1 bold\\\">int</code> <code class=\\\"cpp plain\\\">argc, _TCHAR *argv[])</code></div><div class=\\\"line number34 index33 alt1\\\"><code class=\\\"cpp plain\\\">{</code></div><div class=\\\"line number35 index34 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">while</code> <code class=\\\"cpp plain\\\">(1)</code></div><div class=\\\"line number36 index35 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">{</code></div><div class=\\\"line number37 index36 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">count = 0;</code></div><div class=\\\"line number38 index37 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">cin &gt;&gt; Target;</code></div><div class=\\\"line number39 index38 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">dfs(0);</code></div><div class=\\\"line number40 index39 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">cout &lt;&lt; count &lt;&lt; endl;</code></div><div class=\\\"line number41 index40 alt2\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp plain\\\">}</code></div><div class=\\\"line number42 index41 alt1\\\"><code class=\\\"cpp spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"cpp keyword bold\\\">return</code> <code class=\\\"cpp plain\\\">0;</code></div><div class=\\\"line number43 index42 alt2\\\"><code class=\\\"cpp plain\\\">}</code></div></div></td></tr></tbody></table></div></div></div>',10,'4',3,18),(380,1,'<div>要判断IP地址是否在同一个网络，下列哪一项运算正确？（）<ul><li>IP非子网掩码</li><li>IP模2加子网掩码</li><li>IP与子网掩码</li><li>IP或子网掩码</li><ul></ul></ul></div><div>请列举7种以上常用的HTML标签，说明其语义。</div>','<div>C</div>',2,'1',4,19),(381,1,'<div>DNS是什么服务（  ）？<ul><li>动态网络服务</li><li>域名服务</li><li>拒绝服务</li><li>都不是</li><ul></ul></ul></div>','<div>B</div>',2,'1',4,19),(382,1,'<div>通过使用下列哪种命令可以获得本机的IP地址<ul><li>ping</li><li>winipcfg</li><li>tracert</li><li>ipconfig</li><ul></ul></ul></div>','<div>D</div>',2,'1',4,19),(383,1,'<div>计算机网络分为局域网、城域网与广域网，其划分的依据是什么？<ul><li>数据传输所使用的介质</li><li>网络的作用范围</li><li>网络的控制方式</li><li>网络的拓扑结构</li><ul></ul></ul></div>','<div>B</div>',2,'1',4,19),(384,1,'<div>以下哪个工作于数据链路层?()<ul><li>tcpdump</li><li>集线器</li><li>交换机</li><li>路由器</li><ul></ul></ul></div>','<div>C</div>',2,'2',4,19),(385,1,'<div>&nbsp;文件传输协议是（ ）上的协议<ul><li>网络层</li><li>运输层</li><li>应用层</li><li>物理层</li><ul></ul></ul></div>','<div>C</div>',2,'2',4,19),(386,1,'<div>下述有关网络分层说法错误的是？<ul><li>http --- 应用层</li><li>ftp ---- 应用层</li><li>ICMP --- 应用层</li><li>802.2 --- 数据链路层</li><ul></ul></ul></div>','<div>C</div>',2,'2',4,19),(387,1,'<div><p><span>计算机与打印机之间的通信属于&nbsp;（） 。</span></p><p><br></p><ul><li>单工通信</li><li>半双工通信</li><li>全双工通信</li><li>都不是</li><ul></ul></ul></div>','<div>A</div>',2,'3',4,19),(388,1,'<div><p><span>在</span><span>Internet</span><span>域名体系中，域的下面可以划分子域，各级域名用圆点分开，按照</span><span> （）</span></p><ul><li>从左到右越来越小的方式分4层排列</li><li>从左到右越来越小的方式分多层排列</li><li>从右到左越来越小的方式分4层排列</li><li>从右到左越来越小的方式分多层排列</li><ul></ul></ul></div>','<div>D</div>',2,'3',4,19),(389,1,'<div><p align=\\\"justify\\\" style=\\\"text-align: justify;\\\"><span>通过POP3 协议接收邮件时，使用的传输层服务类型是（）。</span></p><ul><li>无连接不可靠的数据传输服务</li><li>无连接可靠的数据传输服务</li><li>有连接不可靠的数据传输服务</li><li>有链接可靠的数据传输服务</li><ul></ul></ul></div>','<div>D</div>',2,'3',4,19),(390,1,'<div><div>  一台10M的集线器连接了5台PC，PC机均安装了100M网卡，每台PC能分配到的带宽最大为？ </div> <div>  <br> </div><ul><li>10M</li><li>2M</li><li>20M</li><li>100M</li><ul></ul></ul></div>','<div>A</div>',2,'4',4,19),(391,1,'<div><span>下面关于以太网的描述哪一个是正确的（）</span><ul><li>数据是以广播方式发送的</li><li>所有节点可以同时发送和接收数据</li><li>两个节点相互通信时，第三个节点不检测总线上的信号</li><li>网络中有一个控制中心，用于控制所有节点的发送和接收</li><ul></ul></ul></div>','<div>A</div>',2,'4',4,19),(392,1,'<div>IP地址块为211.168.15.192/26、211.168.15.160/27和211.168.15.128/27三个地址块经聚合后可用地址数为（）？<ul><li>126</li><li>62</li><li>128</li><li>68</li><ul></ul></ul></div>','<div>A</div>',2,'4',4,19),(393,1,'<div>计算机网络是计算机技术和通信技术相结合的产物，这种结合开始于( &nbsp;&nbsp; )。<br><ul><li>20世纪50年代</li><li>20世纪60年代初期</li><li>20世纪60年代中期</li><li>20世纪70年代</li><ul></ul></ul></div>','<div>D</div>',2,'5',4,19),(394,1,'<div>关于DNS服务器叙述正确的是( &nbsp;&nbsp; )。<br><ul><li>主DNS服务器需要启动named进程，而辅DNS服务器不需要</li><li>建立某个分区的DNS服务器需要建立多个主DNS服务器</li><li>DNS服务器配置不需要配置客户端</li><li>DNS Server间的查询模式为递归式（Recursive）</li><ul></ul></ul></div>','<div>A</div>',2,'5',4,19),(395,1,'<div>如果希望监听TCP端口9000，服务器端应该怎样创建socket?<ul><li>new Socket(\\\"localhost\\\",9000);</li><li>new ServerSocket(9000);</li><li>new Socket(9000);</li><li>new ServerSocket(\\\"localhost\\\",9000);</li><ul></ul></ul></div>','<div>B</div>',2,'5',4,19),(396,2,'<div><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\">  &nbsp;<span>一个</span><span>SNMP</span><span>报文共有哪几个部分组成（）</span></p><ul><li>版本</li><li>安全参数</li><li>首部</li><li>SNMP报文的数据部分</li><ul></ul></ul></div>','<div>A D</div>',4,'1',4,19),(397,2,'<div>tcp协议工作于TCP/IP协议栈的哪一层( )<ul><li>应用层</li><li>传输层</li><li>网络层</li><li>链路层</li><li>物理层</li><ul></ul></ul></div>','<div>B</div>',4,'2',4,19),(398,2,'<div>UDP使用（ ）提供可靠性<ul><li>网际协议</li><li>应用层协议</li><li>网络层协议</li><li>传输控制</li><ul></ul></ul></div>','<div>B</div>',4,'3',4,19),(399,2,'<div>下面对路由器的描述正确的是（交换机指二层交换机）（ ）<ul><li>相对于交换机和网桥来说，路由器具有更加复杂的功能</li><li>相对于交换机和网桥来说，路由器具有更低的延迟</li><li>相对于交换机和网桥来说，路由器可以提供更大的带宽和数据转发功能</li><li>路由器可以实现不同子网之间的通信，交换机和网桥不能</li><li>路由器可以实现虚拟局域网之间的通信，交换机和网桥不能</li><ul></ul></ul></div>','<div>A D E</div>',4,'4',4,19),(400,2,'<div>SNMP依赖于（ ）工作<ul><li>IP</li><li>ARP</li><li>TCP</li><li>UDP</li><ul></ul></ul></div>','<div>A B D</div>',4,'5',4,19),(401,3,'<div>http,telnet,ftp的端口是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>,<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>,<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>?(FTP写最常用的那一个端口就好)</div>','<div>80 23 21</div>',4,'3',4,19),(402,4,'<div>请列举OSI七层协议模型的内容。TCP属于哪一层？HTTP属于哪一层？</div>','<div><div><span>OSI</span><span>分层（</span><span>7</span><span>层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</span></div><div><span>TCP在传输层</span></div><div><span>HTTP在应用层</span></div></div>',10,'1',4,19),(403,4,'<div>ARP是地址解析协议，简单语言解释一下工作原理。</div>','<div>答:1：首先，每个主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址之间的对应关系。<br>2：当源主机要发送数据时，首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送ARP数据包，该数据包包括的内容有：源主机 IP地址，源主机MAC地址，目的主机的IP 地址。<br>3：当本网络的所有主机收到该ARP数据包时，首先检查数据包中的IP地址是否是自己的IP地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的IP和MAC地址写入到ARP列表中，如果已经存在，则覆盖，然后将自己的MAC地址写入ARP响应包中，告诉源主机自己是它想要找的MAC地址。<br>4：源主机收到ARP响应包后。将目的主机的IP和MAC地址写入ARP列表，并利用此信息发送数据。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。<br>广播发送ARP请求，单播发送ARP响应。<br></div>',10,'3',4,19),(404,1,'<div>只能输入零和非零开头的数字，正确的正则表达式是（）<ul><li>^(0|[1-9][0-9]*)$</li><li>^(0|[1-9][0-9])$</li><li>^\\\\+[1-9][0-9]*$</li><li>^(0|[1-9][1-9]*)$</li><ul></ul></ul></div>','<div>A</div>',2,'1',4,20),(405,1,'<div>正则表达式(01|10|1001|0110)*与下列哪个表达式一样？<ul><li>(0|1)*</li><li>(01|01)*</li><li>(01|10)*</li><li>(11|01)*</li><li>(01|1)*</li><ul></ul></ul></div>','<div>C</div>',2,'2',4,20),(406,1,'<div>下面哪个字符串不能被正则表达式\\\"a(bc)*d?\\\"匹配？<ul><li>ad</li><li>abcd</li><li>abc</li><li>abccd</li><ul></ul></ul></div>','<div>D</div>',2,'3',4,20),(407,1,'<div><div>  以下代码将打印出 </div> <div><div id=\\\"highlighter_718624\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java spaces\\\">&nbsp;</code><code class=\\\"java keyword\\\">public</code> <code class=\\\"java keyword\\\">static</code> <code class=\\\"java keyword\\\">void</code> <code class=\\\"java plain\\\">main (String[] args) {&nbsp;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">String classFile = </code><code class=\\\"java string\\\">\\\"com.jd.\\\"</code><code class=\\\"java plain\\\">. replaceAll(</code><code class=\\\"java string\\\">\\\".\\\"</code><code class=\\\"java plain\\\">, </code><code class=\\\"java string\\\">\\\"/\\\"</code><code class=\\\"java plain\\\">) + </code><code class=\\\"java string\\\">\\\"MyClass.class\\\"</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp; </code><code class=\\\"java plain\\\">System.out.println(classFile);</code></div><div><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div></div><ul><li>com. jd</li><li>com/jd/MyClass.class</li><li>///////MyClass.class</li><li>com.jd.MyClass</li><ul></ul></ul></div>','<div>C</div>',2,'5',4,20),(408,2,'<div>正则表达式 2[0-4]\\\\d|25[0-5]|[01]?\\\\d\\\\d?$ 能匹配以下哪个表达式    ？<ul><li>255</li><li>256</li><li>2</li><li>25a</li><ul></ul></ul></div>','<div>A C</div>',4,'3',4,20),(409,2,'<div>正则表达式A*B可以匹配（）<ul><li>A</li><li>ACB</li><li>AB</li><li>AAB</li><ul></ul></ul></div>','<div>C D</div>',4,'4',4,20),(410,4,'<div>用PHP写一个正则表达式，匹配下面的字符串；英文字母开头，由英文字母、阿拉伯数字、下划线组成，长度大于等于6个字符，小于等于15个字符的字符串。</div>','<div id=\\\"highlighter_72483\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java plain\\\">&lt;?php</code></div><div><code class=\\\"java plain\\\">$subject = </code><code class=\\\"java string\\\">\\\"aaaaaaaaaaaaaaa\\\"</code><code class=\\\"java plain\\\">;&nbsp;&nbsp; </code><code class=\\\"java comments\\\">//15个</code></div><div><code class=\\\"java plain\\\">preg_match(</code><code class=\\\"java string\\\">\'/^[a-zA-Z][a-zA-Z0-9_]{5,14}$/\'</code><code class=\\\"java plain\\\">, $subject, $matches);</code></div><div><code class=\\\"java plain\\\">var_dump($matches);</code></div><div><code class=\\\"java comments\\\">// 有结果</code></div><div>&nbsp;</div><div><code class=\\\"java plain\\\">$subject = </code><code class=\\\"java string\\\">\\\"aaaaaaaaaaaaaaa1\\\"</code><code class=\\\"java plain\\\">;&nbsp; </code><code class=\\\"java comments\\\">//16个</code></div><div><code class=\\\"java plain\\\">preg_match(</code><code class=\\\"java string\\\">\'/^[a-zA-Z][a-zA-Z0-9_]{5,14}$/\'</code><code class=\\\"java plain\\\">, $subject, $matches);</code></div><div><code class=\\\"java plain\\\">var_dump($matches);</code></div><div><code class=\\\"java comments\\\">// null</code></div></div></td></tr></tbody></table></div>',10,'3',4,20),(411,4,'<div>使用字符串的正则判断是否全部由数字组成。</div>','<div id=\\\"highlighter_210836\\\"><div style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td><div>1</div><div>2</div><div>3</div><div>4</div><div>5</div><div>6</div><div>7</div><div>8</div><div>9</div><div>10</div><div>11</div><div class=\\\"line number12 index11 alt1\\\">12</div><div class=\\\"line number13 index12 alt2\\\">13</div><div class=\\\"line number14 index13 alt1\\\">14</div><div class=\\\"line number15 index14 alt2\\\">15</div><div class=\\\"line number16 index15 alt1\\\">16</div><div class=\\\"line number17 index16 alt2\\\">17</div><div class=\\\"line number18 index17 alt1\\\">18</div><div class=\\\"line number19 index18 alt2\\\">19</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div><code class=\\\"java keyword\\\">import</code> <code class=\\\"java plain\\\">java.util.Scanner;</code></div><div><code class=\\\"java keyword\\\">import</code> <code class=\\\"java plain\\\">java.util.regex.Matcher;</code></div><div><code class=\\\"java keyword\\\">import</code> <code class=\\\"java plain\\\">java.util.regex.Pattern;</code></div><div><code class=\\\"java keyword\\\">public</code> <code class=\\\"java keyword\\\">class</code> <code class=\\\"java plain\\\">JAVA {</code></div><div><code class=\\\"java keyword\\\">public</code> <code class=\\\"java keyword\\\">static</code> <code class=\\\"java keyword\\\">void</code> <code class=\\\"java plain\\\">main(String[] args) {</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">String regEx = </code><code class=\\\"java string\\\">\\\"\\\\D+\\\"</code><code class=\\\"java plain\\\">;</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">Scanner in = </code><code class=\\\"java keyword\\\">new</code> <code class=\\\"java plain\\\">Scanner(System.in);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">while</code> <code class=\\\"java plain\\\">(in.hasNext()) {</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">String str = in.next();</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">Pattern p = Pattern.compile(regEx);</code></div><div><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">Matcher m = p.matcher(str);</code></div><div class=\\\"line number12 index11 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java keyword\\\">if</code> <code class=\\\"java plain\\\">(!m.find()) {</code></div><div class=\\\"line number13 index12 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">System.out.println(</code><code class=\\\"java string\\\">\\\"输入的字符串全是数字\\\"</code><code class=\\\"java plain\\\">);</code></div><div class=\\\"line number14 index13 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">} </code><code class=\\\"java keyword\\\">else</code> <code class=\\\"java plain\\\">{</code></div><div class=\\\"line number15 index14 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">System.out.println(</code><code class=\\\"java string\\\">\\\"输入的字符串不全是数字\\\"</code><code class=\\\"java plain\\\">);</code></div><div class=\\\"line number16 index15 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number17 index16 alt2\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number18 index17 alt1\\\"><code class=\\\"java spaces\\\">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class=\\\"java plain\\\">}</code></div><div class=\\\"line number19 index18 alt2\\\"><code class=\\\"java plain\\\">}</code></div></div></td></tr></tbody></table></div>',10,'3',4,20),(412,1,'<div>为数据表创建索引的目的是？<ul><li>提高查询的检索性能</li><li>创建唯一索引</li><li>创建主键</li><li>归类</li><ul></ul></ul></div>','<div>A</div>',2,'1',4,21),(413,1,'<div>不属于关系数据库的是（）<br><ul><li>Oracle</li><li>Essbase</li><li>SQL Server</li><li>DB2</li><ul></ul></ul></div>','<div>B</div>',2,'2',4,21),(414,1,'<div><p><b><span>在下述关于数据库系统的叙述中，正确的是（　　）。</span></b></p><ul><li>数据库中只存在数据项之间的联系</li><li>数据库的数据项之间和记录之间都存在联系</li><li>数据库的数据项之间无联系，记录之间存在联系</li><li>数据库的数据项之间和记录之间都不存在联系</li><ul></ul></ul></div>','<div>B</div>',2,'3',4,21),(415,1,'<div><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\"><span>如果对一个表创建索引，下列索引的设计不正确的是（）</span></p><ul><li>一个聚集索引</li><li>多个聚集索引</li><li>一个非聚集索引</li><li>多个非聚集索引</li><ul></ul></ul></div>','<div>B</div>',2,'4',4,21),(416,1,'<div>在数据库系统中，产生不一致的根本原因是（ ）<ul><li>数据存储量太大</li><li>没有严格保护数据</li><li>未对数据进行完整性控制</li><li>数据冗余</li><ul></ul></ul></div>','<div>D</div>',2,'5',4,21),(417,2,'<div>通过JDBC访问数据库包含下面哪几步？<ul><li>载入JDBC驱动程序</li><li>建立连接</li><li>执行查询或更新</li><li>关闭连接</li><ul></ul></ul></div>','<div>A B C D</div>',4,'1',4,21),(418,2,'<div>数据库以及线程发生死锁的必要条件是什么？<ul><li>互斥条件：一个资源每次只能被一个进程使用</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。</li><li>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</li><ul></ul></ul></div>','<div>A B C D</div>',4,'2',4,21),(419,2,'<div>以下选项中哪些是SQL的DML语句？<ul><li>select</li><li>insert</li><li>alter</li><li>delete</li><li>create</li><ul></ul></ul></div>','<div>A B D</div>',4,'3',4,21),(420,2,'<div>对数据表进行修改的语句正确的是（）<ul><li>alter table employee add memo</li><li>alter table employee drop column age</li><li>alter table employee add column</li><li>alter table employee drop age</li><ul></ul></ul></div>','<div>B D</div>',4,'4',4,21),(421,2,'<div>关于ACID下面说法正确的是?<ul><li>A是可用性。整个操作中的所有动作是保证高可用性，系统必须提供要求的稳定性，以保证事务的提交。</li><li>C一致性。在事务开始之前和结束后，数据库的约束保持不变。</li><li>I隔离性。两个同时运行的事务的执行是互不影响，中间结果不可交叉访问。</li><li>D持久性。在事务提交以后，该事务所作的更改持久保存在存储介质之中，不会被回滚。</li><ul></ul></ul></div>','<div>B D</div>',4,'5',4,21),(422,3,'<div><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\">  <span>关系数据库管理系统能实现的专门运算包括选择、连接和<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span> </p></div>','<div>投影</div>',4,'1',4,21),(423,3,'<div>SQL中，基本表结构的修改用<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>关键字。','<div>ALTER</div>',4,'2',4,21),(424,3,'<div>SQL SELECT语句为了将查询结果存放到临时表中应使用<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>短语。','<div>INTO CURSOR</div>',4,'1',4,21),(425,3,'<div>设有关系 R(S,D,M), 其函数依赖集 F={S D,D->M}. 则关系 R 至多满足<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>范式。','<div>第一</div>',4,'1',4,21),(426,4,'<div><p style=\\\"margin-left: 0.0cm;\\\"><span style=\\\"color: rgb(68,68,68);\\\">表：<span>tableName</span>，字段：<span>id</span>，如何只显示重复数据<span>?</span>如何不显示重复数据<span>?(oracle</span>语句<span>)</span></span></p></div>','<div><div>  1）显示重复数据： </div><div><div>   SELECT id FROM tableName WHERE id IN  </div><div>   (SELECT id FROM tableName GROUP BY id HAVING count(id)&gt;1)  </div></div><div><br></div><div>  2）不显示重复数据 </div><div><div>   SELECT id FROM tableName WHERE id IN  </div><div>   (SELECT id FROM tableName GROUP BY id HAVING count(id)=1)  </div></div><div><br></div></div>',10,'1',4,21),(427,4,'<div>假设京东商品表为jd_sku，请用一条SQL语句查询出所有字段shop_id取值重复的记录。</div>','<div>select * from jd_sku where shop_id in (select shop_id from jd_sku group by shop_id having(count(shop_id)&gt;1))</div>',10,'2',4,21),(428,4,'<div><div>  写出下面2个PHP操作Mysql函数的作用及区别。 </div><div>  mysql_num_rows() </div><div>  mysql_affected_rows() </div></div>','<div><div>  都是取得结果集影响的行数。 </div><div>  mysql_num_row() 只对select 有效。 </div><div>  mysql_affected_rows() 获取insert update delete 的影响行数 </div></div>',10,'3',4,21),(429,4,'<div>对于一个存在系统性能的系统，说出你的诊断处理思路。</div>','<div><p><span>1)</span>做<span>statspack</span>收集系统相关信息<span><br></span>了解系统大致情况<span>/</span>确定是否存在参数设置不合适的地方<span>/</span>查看<span>top 5 event/</span>查看<span>top sql</span>等<span><br>2)</span>查<span>v$system_event/v$session_event/v$session_wait<br></span>从<span>v$system_event</span>开始<span>,</span>确定需要什么资源<span>(db file sequential read)</span>等<span><br></span>深入研究<span>v$session_event,</span>确定等待事件涉及的会话<span><br></span>从<span>v$session_wait</span>确定详细的资源争用情况<span>(p1-p3</span>的值<span>:file_id/block_id/blocks</span>等<span>)<br>3)</span>通过<span>v$sql/v$sqltext/v$sqlarea</span>表确定<span>disk_reads</span>、<span>(buffer_gets/executions)</span>值较大的<span>SQL</span> </p></div>',10,'4',4,21),(430,1,'<div><p style=\\\"margin-left: 0.0cm;\\\"><span>C</span><span>语言的长整型数值在计算机中占用的字节个数是()</span></p><ul><li>1</li><li>2</li><li>3</li><li>4</li><ul></ul></ul></div>','<div>D</div>',2,'1',4,22),(431,1,'<div><span>关于操作系统，下列描述当前，错误的是（）</span><ul><li>进程间的基本关系为同步与互斥</li><li>并发性是指若干事件在同一时间内间隔内发生</li><li>如果某一进程在运行时，因某种原因暂停，此时将脱离运行状态，而进入自由状态</li><li>产生死锁的必要条件：互斥条件，请求与保持条件，不剥夺条件以及循环等待条件</li><li>进程的特性包括：动态性，并发性以及异步性</li><ul></ul></ul></div>','<div>C</div>',2,'2',4,22),(432,1,'<div>文件操作的唯一依据是？<ul><li>文件名</li><li>文件句柄</li><li>物理地址</li><ul></ul></ul></div>','<div>B</div>',2,'3',4,22),(433,1,'<div><span>在请求分页系统中，页面分配策略与页面置换策略不能组合使用的是（）。</span><p align=\\\"justify\\\" style=\\\"text-align: justify;\\\"><br></p><ul><li>可变分配，全局置换</li><li>可变分配，局部置换</li><li>固定分配，全局置换</li><li>固定分配，局部置换</li><ul></ul></ul></div>','<div>C</div>',2,'4',4,22),(434,1,'<div>分时系统的响应与下列哪一个因素无关。（&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ）<br><ul><li>时间片长短</li><li>系统时钟的频率</li><li>终端用户数</li><li>主存和后援存储器之间的信息对换量</li><ul></ul></ul></div>','<div>B</div>',2,'5',4,22),(435,2,'<div>Java多线程有几种实现方法？<br><ul><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Thread接口</li><li>以上都不正确</li><ul></ul></ul></div>','<div>A B</div>',4,'1',4,22),(436,2,'<div>轮询任务调度与抢占式任务调度的区别？<ul><li>抢占式调度优点是其简洁性，它无需记录当前所有连接的状态，所以它是一种无状态调度</li><li>轮询调度优点是其简洁性，它无需记录当前所有连接的状态，所以它是一种无状态调度</li><li>轮询调度实现相对较复杂</li><li>抢占式调度实现相对较复杂</li><ul></ul></ul></div>','<div>B D</div>',4,'2',4,22),(437,2,'<div>关于进程和线程，下面说法正确的是<ul><li>线程是资源分配和拥有的单位</li><li>线程和进程都可并发执行</li><li>在linux系统中，线程是处理器调度的基本单位</li><li>线程的粒度小于进程，通常多线程比多进程并发性更高</li><li>不同的线程共享相同的栈空间</li><ul></ul></ul></div>','<div>B C D</div>',4,'3',4,22),(438,2,'<div>下列方法中哪个是线程执行的方法？ （）<ul><li>run（）</li><li>start（）</li><li>sleep（）</li><li>suspend（）</li><ul></ul></ul></div>','<div>A</div>',4,'4',4,22),(439,2,'<div>下列关于线程调度的叙述中，错误的是（）。<ul><li>调用线程的sleep()方法，可以使比当前线程优先级低的线程获得运行机会</li><li>调用线程的yeild()方法，只会使与当前线程相同优先级的线程获得运行机会</li><li>当有比当前线程的优先级高的线程出现时，高优先级线程将抢占CPU并运行</li><li>一个线程由于某些原因进入阻塞状态，会放弃CPU</li><li>具有相同优先级的多个线程的调度一定是分时的</li><li>分时调度模型是让所有线程轮流获得CPU使用权</li><ul></ul></ul></div>','<div>B C E</div>',4,'5',4,22),(440,3,'<div>在RedHat中，从root用户切换到user1用户，命令是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。','<div>su user1</div>',4,'1',4,22),(441,3,'<div>假设在n进制下，下面的等式成，17*456=8206，n值是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。','<div>9</div>',4,'3',4,22),(442,3,'<div>在一个请求页式存储管理系统中，进程P共有5页，访问序列为3，2，1，0，3，2，4，3，2，1，0，4，当分配给该进程的页帧数为3时，使用FIFO置换算法访问过程中缺页率为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>，使用LRU算法的缺页率为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。(小数点后保留三位)','<div>0.750, 0.833</div>',4,'4',4,22),(443,4,'<div>请问JAVA线程操作中sleep()和wait()有什么区别？</div>','<div>1. sleep是Thread类的方法，是线程用来 控制自身流程的。wait是Object类的方法，用来线程间的通 &nbsp; &nbsp; &nbsp;信，这个方法会使当前拥有该对象锁的进程等待知道其他线程，主要是用于不同线程之间的调度的。<br>2. 每个对象都有一个锁来控制同步访问。Synchronized关键字可以和对象的锁交互，来实现线程的同 &nbsp; &nbsp; &nbsp;步。sleep方法没有释放锁，而wait方法释放了锁，使得其他线程可以使用同步控制块或者方法。&nbsp;<br>3. wait只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用&nbsp;<br>4. sleep必须捕获异常，而wait不需要捕获异常&nbsp;<br></div>',10,'2',4,22),(444,4,'<div><p>  简述计算机的存储系统分为哪几个层次，为什么这样的分层能够提高程序的执行效率。</p></div>','<div><span>所谓存储系统的层次结构，就是把各种不同存储容量、存取速度和价格的存储器按层次结构组成多层存储器，并通过管理软件和辅助硬件有机组合成统一的整体，使所存放的程序和数据按层次分布在各种存储器中。目前，在计算机系统中通常采用三级层次结构来构成存储系统，主要由高速缓冲存储器Cache、主存储器和辅助存储器组成。</span><br><span>&nbsp; &nbsp; &nbsp; 存储系统多级层次结构中，由上向下分三级，其容量逐渐增大，速度逐级降低，成本则逐次减少。整个结构又可以看成两个层次：它们分别是cache一主存层次和主存一辅存层次。这个层次系统中的每一种存储器都不再是孤立的存储器，而是一个有机的整体。它们在辅助硬件和计算机操作系统的管理下，可把主存一辅存层次作为一个存储整体，形成的可寻址存储空间比主存储器空间大得多。由于辅存容量大，价格低，使得存储系统的整体平均价格降低。由于Cache的存取速度可以和CPU的工作速度相媲美，故cache一主存层次可以缩小主存和CPU之间的速度差距，从整体上提高存储器系统的存取速度。尽管Cache成本高，但由于容量较小，故不会使存储系统的整体价格增加很多。</span><br><span>&nbsp; &nbsp; &nbsp; 综上所述，一个较大的存储系统是由各种不同类型的存储设备构成，是一个具有多级层次结构的存储系统。该系统既有与CPU相近的速度，又有极大的容量，而成本又是较低的。其中高速缓存解决了存储系统的速度问题，辅助存储器则解决了存储系统的容量问题。采用多级层次结构的存储器系统可以有效的解决存储器的速度、容量和价格之间的矛盾</span></div>',10,'3',4,22),(445,4,'<div>windows内存管理的机制以及优缺点<br></div>','<div><p>分页存储管理基本思想：</p><p>用户程序的地址空间被划分成若干固定大小的区域，称为“页”，相应地，内存空间分成若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了离散分配。</p><p>分段存储管理基本思想：</p><p>将用户程序地址空间分成若干个大小不等的段，每段可以定义一组相对完整的逻辑信息。存储分配时，以段为单位，段与段在内存中可以不相邻接，也实现了离散分配。</p><p>段页式存储管理基本思想：</p><p>分页系统能有效地提高内存的利用率，而分段系统能反映程序的逻辑结构，便于段的共享与保护，将分页与分段两种存储方式结合起来，就形成了段页式存储管理方式。</p><p>在段页式存储管理系统中，作业的地址空间首先被分成若干个逻辑分段，每段都有自己的段号，然后再将每段分成若干个大小相等的页。对于主存空间也分成大小相等的页，主存的分配以页为单位。</p><p>段页式系统中，作业的地址结构包含三部分的内容：段号      页号      页内位移量</p><p>程序员按照分段系统的地址结构将地址分为段号与段内位移量，地址变换机构将段内位移量分解为页号和页内位移量。</p><p>为实现段页式存储管理，系统应为每个进程设置一个段表，包括每段的段号，该段的页表始址和页表长度。每个段有自己的页表，记录段中的每一页的页号和存放在主存中的物理块号。</p></div>',10,'4',4,22),(446,1,'<div>后缀式abc+*所表达的表达式为:（）<ul><li>a+b*c</li><li>a*(b+c)</li><li>a*b+c</li><li>(a+b)*c</li><ul></ul></ul></div>','<div>B</div>',2,'1',4,23),(447,1,'<div>在分时操作系统中，进程调度采用（）算法<ul><li>先来先服务</li><li>最到优先权</li><li>时间片轮转</li><li>随机</li><ul></ul></ul></div>','<div>C</div>',2,'2',4,23),(448,1,'<div><p align=\\\"justify\\\" style=\\\"text-align: justify;\\\"><span>在系统内存中设置磁盘缓冲区的主要目的是（）。</span></p><ul><li>减少磁盘 I/O 次数</li><li>减少平均寻道时间</li><li>提高磁盘数据可靠性</li><li>实现设备无关性</li><ul></ul></ul></div>','<div>A</div>',2,'3',4,23),(449,1,'<div><p align=\\\"justify\\\" style=\\\"text-align: justify;\\\"><span>某硬盘有200 个磁道（最外侧磁道号为 0），磁道访问请求序列为：130,42,180,15,199，当前磁头位于第 58号磁道并从外侧向内侧移动。按照 SCAN 调度方法处理完上述请求后，磁头移过的磁道数是（）。</span></p><ul><li>208</li><li>287</li><li>325</li><li>382</li><ul></ul></ul></div>','<div>C</div>',2,'4',4,23),(450,1,'<div>磁盘阵列需要的配置文件和逻辑设备是（）<ul><li>raidtab与hda0</li><li>Raid.conf与sdc0</li><li>Raidtab与md0</li><li>Raid.conf与md0</li><ul></ul></ul></div>','<div>C</div>',2,'5',4,23),(451,2,'<div><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\"><span>线性窥孔优化的特点包括（）</span></p><ul><li>优化对象只能是中间代码</li><li>每次处理的是一组相邻的指令</li><li>优化对象可以是中间代码，也可以是目标代码</li><li>对优化对象进行线性扫描</li><ul></ul></ul></div>','<div>B C D</div>',4,'1',4,23),(452,2,'<div>主存贮器和CPU之间增加cache的目的是( )。<ul><li>解决CPU和主存之间的速度匹配问题</li><li>扩大主存贮器容量</li><li>扩大CPU中通用寄存器的数量</li><li>既扩大主存贮器容量，又扩大CPU中通用寄存器的数量</li><ul></ul></ul></div>','<div>A</div>',4,'2',4,23),(453,2,'<div>处理器执行的指令被分为两类，其中一类被称为特权指令，它只允许（）使用。<ul><li>操作员</li><li>联机用户</li><li>操作系统</li><li>目标程序</li><ul></ul></ul></div>','<div>C</div>',4,'3',4,23),(454,2,'<div>操作系统死锁的必要条件（多选题）：（）<ul><li>互斥条件</li><li>系统资源有限</li><li>进程调度不合理</li><li>环路等待条件</li><ul></ul></ul></div>','<div>A D</div>',4,'4',4,23),(455,2,'<div>CPU与外设的传输数据的方式是（）。<ul><li>程序方式</li><li>中断</li><li>DMA</li><li>通道方式</li><ul></ul></ul></div>','<div>A B C</div>',4,'5',4,23),(456,3,'<div>某缓存系统采用LRU淘汰算法，假定缓存容量为4，并且初始为空，那么在顺序访问以下数据项的时候 1,5,1,3,5,2,4,1,2 出现缓存直接命中的次数是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>，最后缓存中即将准备淘汰的数据项是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。','<div>直接命中的次数是3次，分别是访问1，5，1，3，5，2，4，1，2时。最后缓存中即将准备淘汰的数据项是5</div>',4,'3',4,23),(457,3,'<div>写出表达式((A+B)*C-(D-E)*(F+G))的前缀表达式<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。','<div>-*+ABC*-DE+FG</div>',4,'4',4,23),(458,3,'<div>程序的局部变量存在于<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>中，全局变量存在于<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>中，动态申请数据存在于<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>中。','<div>1、栈; 2、全局区（静态区）; 3、堆。</div>',4,'5',4,23),(459,4,'<div>通信系统由哪些部分组成？各组成部分的作用是什么？</div>','<div>通信系统由信源（发送端）、信宿（接收端）、信道、消息和协议组成。信源是信息的发送方；信宿是信息的接收方；消息是通信双方发送的数据内容，包括文本、音频、视频数据等；信道是消息传递的介质，可以是光纤、同轴电缆等有线传输信道，也可以是wifi等无线传输信道；协议是通信双方发送数据 时共同遵守的规则，包括通信如何建立，数据报格式等。</div>',10,'1',4,23),(460,4,'<div>编译器自动对齐的原因是什么？</div>','<div>编译器自动对齐的原因：为了提高程序的性能，数据结构（尤其是栈）应该尽可能地在自然边界上对齐。原因在于，为了访问未对齐的内存，处理器需要作两次内存访问；然而，对齐的内存访问仅需要一次访问。</div>',10,'2',4,23),(461,4,'<div>为什么Windows下有些文件被删除后还能通过一些磁盘恢复软件将其数据恢复？</div>','<div><span style=\\\"color: rgb(51,51,51);font-family: sans-serif;line-height: 19.488px;background-color: rgb(255,255,255);\\\">“删除文件”只是改变文件在FAT中的链接指向，而“格式化”也不是真正删除数据区中的数据，只是重写了FAT表，并没有把DATA区的数据清除。至于硬盘分区，是修改了MBR和DBR，绝大部分的DATA区的数据并没有被改变。只要没有覆盖这个文件，即使MBR、FAT、DIR全部坏了，只要找到一个文件的起始保存位置，就可使用磁盘编辑软件把这个文件恢复出来，这是许多硬盘数据能够得以修复的原因。</span></div>',10,'3',4,23),(462,1,'<div>戴文打算进行一场沙漠徒步旅行。计划第一天吃完所带食物的1/3，第二天吃饭第一天所剩食物的1/4，第三天吃完第二天所剩食物的1/5，请问第几天后所剩食物为原来所带食物的2/9？<ul><li>6</li><li>7</li><li>8</li><li>9</li><ul></ul></ul></div>','<div>B</div>',2,'1',5,24),(463,1,'<div>戴文打算进行一场沙漠徒步旅行。计划第一天吃完所带食物的1/3，第二天吃饭第一天所剩食物的1/4，第三天吃完第二天所剩食物的1/5，请问第几天后所剩食物为原来所带食物的2/9？</div><ul><li>分类和预测</li><li>数据预处理</li><li>数据流挖掘</li><li>频繁模式挖掘</li><ul></ul></ul></div>','<div>B</div>',2,'2',5,24),(464,1,'<div>小明的游戏账号密码是一串8位数字，只记前面5个数字为38034.但他肯定，后面3个数字全是奇数，最后一个数字是5，且后3个数字中相邻数字不相同，小明至少要试多少次才能保证登入（）<ul><li>20</li><li>18</li><li>16</li><li>15</li><ul></ul></ul></div>','<div>C</div>',2,'3',5,24),(465,1,'<div>有20个自然数1-20.每次取两个数字,取出不放回，其中一个数字是另一个数字2倍多。则最多取出来（）个数字。<ul><li>18</li><li>16</li><li>14</li><li>12</li><ul></ul></ul></div>','<div>A</div>',2,'4',5,24),(466,1,'<div><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\"><span>王师傅</span><span>是卖鞋的，一只鞋进价</span><span>45</span><span>元，现亏本甩卖顾客来</span><span>35</span><span>元买了一双鞋，给了王师傅</span><span>100</span><span>元假钱，王师傅没零钱，于是找邻居换了</span><span>100</span><span>元，事后邻居存钱过程职工发现钱是假的，被银行没收了，王师傅又赔了邻居</span><span>100</span><span>，请问王师傅一共亏了多少（）</span></p><ul><li>155</li><li>110</li><li>180</li><li>220</li><li>255</li><ul></ul></ul></div>','<div>A</div>',2,'5',5,24),(467,3,'<div>若D1=[a1,a2,a3],D2=[1,2,3],则D1*D2集合共有<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>个元组。','<div>9</div>',4,'2',5,24),(468,3,'<div>7个相同的球放到4个不同的盒子里的，每个盒子至少放一个，方法有<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>种。','<div>20</div>',4,'3',5,24),(469,4,'<div>在3*7的方格中，一共能组成多少个长方形（包括正方形）？','<div>6*7+6*6+6*5+6*4+6*3+6*2+6*1=6*(1+2+3+4+5+6+7)=6*28=168</div>',10,'1',5,24),(470,4,'<div>有2n个人排队进电影院，票价是50美分。在这2n个人当中，其中n个人只有50美分，另外n个人有1美元（纸票子）。愚蠢的电影院开始卖票时1分钱也没有。<br>问： 有多少种排队方法 使得 每当一个拥有1美元买票时，电影院都有50美分找钱<br>注： <br>1美元=100美分<br>拥有1美元的人，拥有的是纸币，没法破成2个50美分</div>','<div><div>  答案：(C(2n,n)-C(2n,n-1))*A(n,n)*A(n,n) </div><div>  这是著名的卡特兰数列，下面介绍求法（有点难度，好好理解哈） </div><div>我们先不考虑人与人的差别，比如先把排队“甲乙”和“乙甲”看做等同的（这样做是为了简化问题，便于理解。最后结果要再乘以人的排列数）<br>我们可以把拿50美分的人看做1，<span>拿1美元的人</span>看做0，这些排队者的组合就是01的排列<br>这里需要满足从第一个数开始的任意连续子序列中，0的个数不多于1的个数，也就是排队者从前往后数任意长度的队列中，拿100美分的人数不能多于拿50美分的人数（否则找不开零钱）<br>假设我们不考虑这个限制条件，那么全部的01排列共有C（2n,n）种，也就是一半0一半1的情况<br>现在我们再把其中不符合要求的数量去掉<br>在任何不符合条件的序列中，找出使得0的个数超过1的个数的第一个0的位置，然后在导致并包括这个0的部分序列中，以1代替所有的0并以0代表所有的1。结果总的序列变成一个有(n+1)个1和(n-1)个0的序列。而且这个过程是可逆的，也就是说任何一个有(n+1)个1和(n-1)个0构成的序列都能反推出一个不符合条件的序列，所以不符合条件的序列个数为C（2n,n-1） </div><div>  因此总的符合条件的组合数为<span>C(2n,n)-C(2n,n-1)</span></div><div>  然后再考虑人的差异，n个拿50美分的人和n个拿1美元的人各有<span>A(n,n)</span>中排列 </div><div>  因此最终结果为<span>(C(2n,n)-C(2n,n-1))*A(n,n)*A(n,n)</span><br><br></div></div>',10,'4',5,24),(471,1,'<div>某盒子中有6个白球6个红球，随机抽取一次，把这个球做标记，再次放到盒子里，问第二次还能抽到这个球，并且还是白球的概率是多少？（）<ul><li>1/24</li><li>1/12</li><li>1/4</li><li>1/2</li><ul></ul></ul></div>','<div>A</div>',2,'1',5,25),(472,1,'<div>你有100个球，红的50个，蓝的也是50个,你需要把它们（所有的球）放在两个罐子中（随便怎么放），请问怎样放使你从中拿出红球（拿一次）的机率最大？<ul><li>一个罐子50个红球 ，另一个罐子50个篮球</li><li>一个罐子不放球 ，另一个罐子放100个球</li><li>一个罐子1个红球 ，另一个罐子49个红球，50个篮球</li><li>一个罐子1个红球，50个篮球  ，另一个罐子49个红球</li><ul></ul></ul></div>','<div>C</div>',2,'2',5,25),(473,1,'<div>从一副牌(52张，不含大小怪)里抽出两张牌，其中一红一黑的概率是<ul><li>25/51</li><li>1/3</li><li>1/2</li><li>26/51</li><ul></ul></ul></div>','<div>D</div>',2,'3',5,25),(474,1,'<div><span>符号集</span><span>a</span><span>、</span><span>b</span><span>、</span><span>c</span><span>、</span><span>d</span><span>，它们相互独立，相应概率为</span><span>1/2</span><span>、</span><span>1/4</span><span>、</span><span>1/8/</span><span>、</span><span>1/16</span><span>，其中包含信息量最小的符号是（</span><span>）</span><ul><li>a</li><li>b</li><li>c</li><li>d</li><ul></ul></ul></div>','<div>A</div>',2,'4',5,25),(475,1,'<div>小a和小b一起玩一个游戏，两个人一起抛掷一枚硬币，正面为H，反面为T。两个人把抛到的结果写成一个序列。如果出现HHT则小a获胜，游戏结束。如果HTT出现则小b获胜。小a想问一下他获胜的概率是多少？<ul><li>3/4</li><li>1/2</li><li>2/3</li><li>5/9</li><li>1/3</li><li>1/4</li><ul></ul></ul></div>','<div>C</div>',2,'5',5,25),(476,2,'<div>2月28日出生和2月29日出生的人的比例是多少？2012年2月28日和2012年2月29日出生的人的比例是多少？<ul><li>1:1和1:1</li><li>4:1和1:1</li><li>1:1和4:1</li><li>4:1和4:1</li><ul></ul></ul></div>','<div>B</div>',4,'1',5,25),(477,2,'<div>若AB为任意两个随机事件，则（）<ul><li>P(AB)&gt;=(P(A)+P(B))/2</li><li>P(AB)&lt;=P(A)P(B)</li><li>P(AB)&lt;=(P(A)+P(B))/2</li><li>P(AB)&gt;=P(A)P(B)</li><ul></ul></ul></div>','<div>C</div>',4,'4',5,25),(478,3,'<div>小明投硬币，投出正面就停止，投出反面继续投硬币，直到投出正面为止。在整个过程中，你预期小明投出的正面，反面次数比例为<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。','<div>1:1</div>',4,'1',5,25),(479,3,'<div>店主销售电话卡，他以60元的价格各销售了两张。其中一张是赚了20%，另一张是亏了20%。 请问他总共赚了<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>钱(亏了的话请用负数表示)？','<div><div>  有两个电话卡，a（赚钱）和b（亏钱），a的成本为x，x(1+0.2)=60,所以x=50,a赚10元 </div><div>  b的成本为y，y(1-0.2)=60,y=75,b亏15元 </div><div>  所以综合起来 亏5元 </div></div>',4,'2',5,25),(480,3,'<div>一个家庭有两个小孩，其中一个是女孩、另一个也是女孩的概率是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>（假定生男生女概率一样）？','<div>1/3</div>',4,'3',5,25),(481,3,'<div>已知每10 万人中有1 人得艾滋病。现在有一种检查，如果被测者患病则一定能查出来。如果被测者没病，有1%的测试出错也显示阳性。现在一个人检查结果是阳性。问真正得病的概率是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>？','<div><div>  设A表示得艾滋病事件，B表示检查阳性的事件， </div><div>  由题意可知 P(A)=1/10<sup>5</sup>, P(A<sup>-</sup>)=1- 1/10<sup>5</sup>,P(B|A)=1,P(B|A<span><sup>-</sup></span>)=10<sup>-2</sup>; </div><div>  则检查是阳性前提，是艾滋病的概率: </div><div>P(A|B)=P(AB)/P(B)=P(BA)/P(B)=(P(A)*P(B|A))/(P(BA)+P(BA<sup>-</sup>)) </div><div>  &nbsp; &nbsp; &nbsp; =(P(A)*P(B|A))/( P(A)*P(B|A)+P(A<sup>-</sup>)*P(B|A<sup>-</sup>))=1/10<sup>3</sup></div></div>',4,'5',5,25),(482,4,'<div>假设在一个重女轻男的国家里所有家庭都想生女孩。政策规定每家只能生一个，但如果生了一个男孩，便可再生一个，直到生下的是女孩为止。请问这个国家当年出生的男女比例是多少。</div>','<div><div>  答案是 1：1 </div><div><br></div><div>  概率论上分析： 无论你自己期望男女 但是生男女的概率都是50% 故男女比例1：1 </div><div>  具体分析一下： </div><div><span style=\\\"color: rgb(51,51,51);font-family: Arial;line-height: 26.0px;background-color: rgb(255,255,255);\\\">假设这个国家有n对夫妇，那么n对夫妇将生下n个女孩，这n个女孩是这样生下的，假设生男生女的概率是50%，那么n/2个女孩是第一胎生下的，同时将有n/2个男孩生下，n/2对生男孩的夫妇将继续生，其中n/4的夫妇生下女孩，n/4的夫妇继续生下男孩，然后是n/8的夫妇顺利得到女孩，又有n/8的夫妇生下男孩，依此类推，这个国家将生下n/2 + n/4 + n/8 + ...的男孩，所以男女比例是(n/2 + n/4 + n/8 + ...)：n = n : n = 1 : 1</span><br></div></div>',10,'2',5,25),(483,4,'<div>假设我们有三个箱子，分别是红色，蓝色和绿色。在红色箱子中有3个苹果，4个橘子，3个柠檬。在蓝色箱子中有1个苹果，1个橘子和0个柠檬，在绿色箱子中有3个苹果，3 个橘子和4 个柠檬。如果我们选择箱子的概率是红色0.2，蓝色0.2，绿色0.6，并且选择一个箱子后，以均匀的概率随机移除一个水果。那么移除苹果的概率是多少？请给出步骤。<br>如果我们发现移除的水果是橘子，那么这个橘子来自绿色箱子的概率是多少？请给出步骤。<br><br></div>','<div><div>事件（选择箱子和在选择了的箱子中移除水果）的概率是独立的，所以：</div><div>1.移除苹果的概率 P = P(选择红箱子 &amp; 移除苹果)+<span>&nbsp;P(选择蓝箱子 &amp; 移除苹果)+</span> <span>&nbsp;P(选择绿箱子 &amp; 移除苹果)</span> =&nbsp;<span>P(选择红箱子)*P(红箱子移除苹果) +<span>P(选择蓝箱子)*P(蓝箱子移除苹果)+<span>P(选择绿箱子)*P(绿箱子移除苹果)</span> </span> = 0.2*3/(3+4+3)+0.2*1/(1+1+0)+0.6*3/(3+3+4)=0.34</span> </div><div><span> <br></span> </div><div><span>2.来自绿色箱子的概率 P = P(橘子来自绿色箱子 | 移除的是橘子) = P(移除的绿箱子里面的橘子)/P(移除的是橘子)&nbsp;</span> </div><div><span> <span>&nbsp;P(移除的绿箱子里面的橘子) = P(选中绿色箱子)*P(在绿箱子里移除橘子) = 0.6*3/(3+3+4) = 0.18</span> </span> </div><div><span> <span>P(移除的是橘子) &nbsp;=&nbsp;</span> <span>P(选中红色箱子)*P(在红箱子里移除橘子) +<span>P(选中蓝色箱子)*P(在蓝箱子里移除橘子) +<span>P(选中绿色箱子)*P(在绿箱子里移除橘子)&nbsp;</span> </span> </span> = 0.2*4/(3+4+3) + 0.2*1/(1+1+0)+0.6*3/(3+3+4) = 0.08+0.1+0.18 = 0.36<br></span> </div><div><span>故 P = 0.18/0.36 = 0.5</span> </div></div>',10,'3',5,25),(484,4,'<div><div>  甲乙丙丁4个人轮流顺序抽签（共4张签）。任何第一个抽中“请客”的人即请大家吃饭。假设： </div><div>  A）4张签中共有1张请客的签； </div><div>  &nbsp;B）4张签中共有2张请客的签； </div><div>  C）4张签中共有3张请客的签； </div><div>  请问A）、B）、C）三种情况下甲乙丙丁每个人请大家吃饭的概率分别有多大？ </div></div>','<div><div>  A:全为1/4 </div><div>  B:甲=1/2,乙=（1 - 甲）*(2/3) =（1/2)*(2/3)=1/3,丙=1-甲-乙=1/6， </div><div>  C:甲=3/4,乙=1 - 甲=1/4 </div><div>  B，C两种情况下，丁不需要抽签，丁的概率都是0， </div></div>',10,'4',5,25),(485,1,'<div><div>  设 f: N x N -> N , f(x, y) = x * y ,则   f是单射、满射或双射？ </div> <div>  <br> </div><ul><li>f既是单射也是满射，即双射；</li><li>f既不是单射也不是满射；</li><li>f是单射但不是满射；</li><li>f不是单射但是满射。</li><ul></ul></ul></div>','<div>D</div>',2,'1',5,26),(486,1,'<div><div>  设 R是复数集合C上的一个二元关系且满足xRy 当且仅当x-y=a+bi ；若a,b 不全为0，则R<span>满足下列性质的论断哪个是正确的？（自反性；反自反性；对称性；反对称性；传递性）</span>  </div><ul><li>R满足自反和反自反性质；</li><li>R满足对称和反对称性质；</li><li>R满足反自反和反对称性质；</li><li>R满足对称和传递性质。</li><ul></ul></ul></div>','<div>C</div>',2,'1',5,26),(487,3,'<div>A\\\\(B∩C)等价于<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>。','<div>(A\\\\B)∪(A\\\\C)</div>',4,'1',5,26),(488,1,'<div><p>  n个人拎着水桶在一个水龙头前面排队打水，水桶有大有小，水桶必须打满水，水流恒定。说法不正确的是（） </p><ul><li>让水桶大的人先打水，可以使得每个人排队时间之和最小</li><li>让水桶小的人先打水，可以使得每个人排队时间之和最小</li><li>让水桶小的人先打水，在某个确定的时间t内，可以让尽可能多的人打上水</li><li>若要在尽可能短的时间内，n个人都打完水，按照什么顺序其实都一样</li><ul></ul></ul></div>','<div>A</div>',2,'1',5,27),(489,1,'<div><div>  下列论断哪个是错误的？ </div><ul><li>直线上互不相交的开区间的全体所构成的集合是至多可数的；</li><li>设A是有限集，B是可数集，则A到B的所有映射之集是可数的；</li><li>设∑为一个有限字母表，∑上所有字（包括空字）之集记为∑*，则∑*是可数的；</li><li>若A是可数集，则A的所有子集所构成的集合是可数的</li><ul></ul></ul></div>','<div>A</div>',2,'1',5,27),(490,1,'<div><div>  设R和S是非空集合A上的等价关系，则以下各式哪个是等价关系？ </div><ul><li>(A×A)\\\\R</li><li>r(R\\\\S)</li><li>R\\\\S</li><li>R◦R</li><ul></ul></ul></div>','<div>D</div>',2,'1',5,27),(491,1,'<div><p>  <span>需求分析阶段的任务是确定（<span> <span> </span> </span>）</span>  </p><ul class=\\\"subject-des-list\\\"><li>软件开发方法</li><li>软件开发工具</li><li>软件开发费</li><li>软件系统的功能</li><ul></ul></ul></div>','<div>D</div>',2,'1',6,29),(492,1,'<div><p>  <span>在McCall软件质量度量模型中，（）属于面向软件产品修改。</span></p><ul class=\\\"subject-des-list\\\"><li>可靠性</li><li>可重用性</li><li>适用性</li><li>可移植性</li><ul></ul></ul></div>','<div>C</div>',2,'2',6,29),(493,1,'<div><div class=\\\"WordSection1\\\">  <p style=\\\"margin-left: 18.0pt;text-indent: -18.0pt;\\\">    <span></span>    <span>软件文档是软件工程实施中的重要部分，它不仅是软件开发各阶段的重要依据，而且影响软件的<span>_______</span>    </span>  </p></div><ul class=\\\"subject-des-list\\\"><li>可理解性</li><li>可维护性</li><li>可扩展性</li><li>可移植</li><ul></ul></ul></div>','<div>B</div>',2,'3',6,29),(494,1,'<div><p>  <span>下列属于维护阶段的文档是 <span>(&nbsp;&nbsp;)</span>。</span></p><ul class=\\\"subject-des-list\\\"><li>软件规格说明</li><li>用户操作手册</li><li>软件问题报告</li><li>软件测试分析报告</li><ul></ul></ul></div>','<div>C</div>',2,'4',6,29),(495,1,'<div><p>  <span>在系统简化设计过程中，因为软件易于实现或实现成本相对较低，因此首选采用软件简化设计或者说通过软件简化设计来代替硬件简化设计。（</span>  <span>）</span></p><ul class=\\\"subject-des-list\\\"><li>正确</li><li>错误</li><ul></ul></ul></div>','<div>B</div>',2,'5',6,29),(496,2,'<div><div>  在软件生命周期中，软件开发时期由（）阶段组成。 </div><ul class=\\\"subject-des-list\\\"><li>详细设计</li><li>可行性研究</li><li>需求分析</li><li>总体设计</li><ul></ul></ul></div>','<div>AD</div>',4,'1',6,29),(497,2,'<div><div>  在软件工程方法学中，包含（）三个元素。 </div><ul class=\\\"subject-des-list\\\"><li>方法</li><li>工具</li><li>过程</li><li>管理</li><ul></ul></ul></div>','<div>ABC</div>',4,'2',6,29),(498,2,'<div>面向对象设计的原则包括（&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;）<ul class=\\\"subject-des-list\\\"><li>模块化</li><li>抽象</li><li>信息隐藏</li><li>高内聚</li><li>低耦合</li><li>可重用</li><ul></ul></ul></div>','<div>ABCDEF</div>',4,'3',6,29),(499,2,'<div><p>  <span>Which of these are valid software configuration items? </span>  </p><ul class=\\\"subject-des-list\\\"><li>software tools</li><li>documentation</li><li>executable programs</li><li>test data</li><ul></ul></ul></div>','<div>ABC</div>',4,'4',6,29),(500,2,'<div><p style=\\\"margin-left: 21.0pt;text-indent: -21.0pt;\\\">  <span>下列属于度量效益方法的是（&nbsp;）。</span></p><p style=\\\"margin-left: 21.0pt;\\\">  <br></p><ul class=\\\"subject-des-list\\\"><li>货币的时间价值</li><li>投资回收期</li><li>收入</li><li>投资回报率</li><ul></ul></ul></div>','<div>ABC</div>',4,'5',6,29),(501,3,'<div><p>  <span>McCall模型产品修改纬度的质量因素有<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span>  <span>、<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span>  <span>、灵活性。</span></p></div>','<div class=\\\"answer-brief nc-post-content\\\">可维护性，可测试性</div>',4,'1',6,29),(502,3,'<div><span>UML</span><span>的类包含三个部分：类的名称、<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span><span>、<u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span><span>。</span></div>','<div class=\\\"answer-brief nc-post-content\\\">1.属性 2.方法</div>',4,'2',6,29),(503,3,'<div><span>从工程管理的角度看，软件设计可分为</span><span><u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span><span>和</span><span><u>&nbsp;&nbsp;&nbsp;&nbsp;</u></span><span>两大步骤。</span></div>','<div class=\\\"answer-brief nc-post-content\\\">概要设计，详细设计</div>',4,'4',6,29),(504,4,'<div><p>  <span>在软件产品与其他工业产品之间的区别主要有哪些？并描述这些不同？</span></p></div>','<div class=\\\"answer-brief nc-post-content\\\"><div>  目标用户不同，软件产品可针对企业和用户，其他工业产品只针对用户 </div> <div>  时效性不同，软件产品需要在后续过程中不断改进，出现bug及时修复，其他工业产品不需要 </div></div>',10,'1',6,29),(505,4,'<div>阶段评审的与同行评审的区别？</div>','<div class=\\\"answer-brief nc-post-content\\\">同行评审目的:发现小规模工作产品的错误,只要是找错误;<br> 阶段评审目的:评审模块 阶段作品的正确性 可行性 及完整性 <br> 同行评审人数:3-7人 人员必须经过同行评审会议的培训,由SQA指导 <br> 阶段评审人数:5人左右 评审人必须是专家 具有系统评审资格 <br> 同行评审内容:内容小 一般文档 &lt; 40页, 代码 &lt; 500行 <br> 阶段评审内容: 内容多,主要看重点 <br> 同行评审时间:一小部分工作产品完成 <br> 阶段评审时间: 通常是设置在关键路径的时间点上!</div> ',10,'2',6,29),(506,4,'<div>确定并简要描述大部分现代系统开发方法学公认的8个基本阶段。</div>','<div class=\\\"answer-brief nc-post-content\\\">1.范围定义阶段.2.问题分析阶段.3.需求分析阶段.4.逻辑设计阶段.5.决策分析阶段.6.物理设计和集成阶段.7.构造和测试阶段.8.安装和发布阶段.</div> ',10,'4',6,29),(507,1,'<div>某学生成绩管理系统软件的功能是：输入学生成绩（0 ~ 100分），然后输出成绩的等次。小王为测试该软件，推测软件容易在0分和100分的边界值时容易产生错误，于是他分别测试了0分和100分的两种情况。小王的软件测试方法属于（）。<ul class=\\\"subject-des-list\\\"><li>静态测试</li><li>白盒测试</li><li>边缘值分析法</li><li>错误推测法</li><ul></ul></ul></div>','<div>C</div>',2,'1',6,30),(508,1,'<div>用边界值分析法，假定1&lt;X&lt;10，那么X在测试中应该取的边界值是( )<ul class=\\\"subject-des-list\\\"><li>X=1，X=2，X=9，X=10</li><li>X=2，X=9</li><li>X=1，X=10</li><li>X=1，X=5，X=6，X=10</li><ul></ul></ul></div>','<div>A</div>',2,'2',6,30),(509,1,'<div>测试人员要坚持原则，缺陷未修复完坚决不予通过。请判断这句话的正确与否。<ul class=\\\"subject-des-list\\\"><li>T</li><li>F</li><ul></ul></ul></div>','<div>B</div>',2,'3',6,30),(510,1,'<div>项目立项前测试人员不需要提交任何工件。请判断这句话的正确与否。<ul class=\\\"subject-des-list\\\"><li>T</li><li>F</li><ul></ul></ul></div>','<div>A</div>',2,'4',6,30),(511,2,'<div>下面哪些属于网游的测试内容？<ul class=\\\"subject-des-list\\\"><li>客户端性能</li><li>服务器端性能</li><li>从运行完 game.exe 打开游戏界面后可进行的各种操作、玩法</li><li>界面</li><ul></ul></ul></div>','<div>ABCD</div>',4,'1',6,30),(512,2,'<div>下面哪些测试属于黑盒测试方法（）<ul class=\\\"subject-des-list\\\"><li>路径测试</li><li>等价类划分</li><li>边界值分析</li><li>条件判断</li><li>循环测试</li><li>因果图分析</li><li>正交分析法</li><ul></ul></ul></div>','<div>BCFG</div>',4,'2',6,30),(513,2,'<div>对手机软件的压力测试通常可以包括【多选】（ ）<ul class=\\\"subject-des-list\\\"><li>存储压力</li><li>响应能力压力</li><li>网络流量压力</li><li>并发压力</li><ul></ul></ul></div>','<div>ABC</div>',4,'3',6,30),(514,3,'<div><p style=\\\"margin-left: 0.0cm;text-indent: 0.0cm;\\\">  <span>基础测试的工作开展更多站在</span><u>&nbsp;&nbsp;&nbsp;&nbsp;</u><span>的角度上；系统测试站在</span><u>&nbsp;&nbsp;&nbsp;&nbsp;</u><span>的角度上。</span>  </p></div>','<div class=\\\"answer-brief nc-post-content\\\"><div>  1.测试人员&nbsp; </div><div>  2.用户 </div></div>',4,'1',6,30),(515,4,'<div>简述你对黑盒测试与白盒测试的理解？并列举白盒/黑盒测试的方法有哪些？</div>','<div class=\\\"answer-brief nc-post-content\\\">简单来说，白盒测试指的是代码层级的测试，黑盒测试指的是针对软件的功能进行测试，不涉及代码逻辑结构。常见的黑盒测试方法为等价类划分、边界值划分、因果图法、场景法等。白盒测试方法可分为逻辑覆盖、循环覆盖和基本路径测试。</div>',10,'1',6,30),(516,4,'<div>假设京东有一个web API: http://p.jd.com?p1=90&amp;p0=100，输入打折价p1和原价p0，返回折扣信息0.9，请设计测试用例进行测试。</div>','<div class=\\\"answer-brief nc-post-content\\\"><div>  1 输入打折价错误+输入原价错误 （输入值不在正常范围内） </div><div>  2&nbsp;<span>输入打折价错误+输入原价正确</span></div><div>  <span>3&nbsp;<span>输入打折价正确+输入原价错误</span>  </span></div><div>  <span>4 <span>输入打折价正确+输入原价正确 （打折价高于原价）</span>  </span></div><div>  <span>5 <span>输入打折价正确+输入原价正确 <span>（打折价高于原价 返回折扣信息不对）</span>    </span>  </span></div><div>  <span>6 <span>输入打折价正确+输入原价正确&nbsp;</span>    <span>（打折价高于原价 返回折扣信息对）</span>  </span></div><div>  <br></div></div>',10,'2',6,30),(517,4,'<div>软件的缺陷等级应如何划分?</div>','<div class=\\\"answer-brief nc-post-content\\\"><div>  软件缺陷的等级可以用严重性和优先级来描述；<br> 严重性：衡量缺陷对客户满意度影响的满意程度，分为<br>  1,致命错误，可能导致本模块以及其他相关的模块异常，死机等问题；<br>  2.严重错误，问题局限在本模块，导致模块功能失常或异常退出；<br> 3.一般错误，模块功能部分失效；<br>  4.建议模块，有问题提出人对测试模块的改进建议；<br> 优先级：缺陷被修复的紧急程度；<br>  1.立即解决（P1级）：缺陷导致系统功能几乎不能使用或者测试不能继续，需立即修复；<br>  2.高优先级（P2级）：缺陷严重，影响测试，需优先考虑；<br> 3.正常排队（P3级）：缺陷需要正常排队等待修复；<br> 4.低优先级（P4级）：缺陷可以在有时间的时候被纠正；<br>  <br></div></div>',10,'3',6,30),(518,1,'<div><div><div id=\\\"highlighter_492351\\\" class=\\\"syntaxhighlighter  cpp\\\"><div class=\\\"toolbar\\\" style=\\\"display:none;\\\"></div><table border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\"><tbody><tr><td class=\\\"gutter\\\"><div class=\\\"line number1 index0 alt2\\\">1</div></td><td class=\\\"code\\\"><div class=\\\"container\\\"><div class=\\\"line number1 index0 alt2\\\"><code class=\\\"cpp plain\\\">将原始数据进行集成，变换，维度规约，数值规约是在以下哪个步骤的任务</code></div></div></td></tr></tbody></table></div></div><br><ul class=\\\"subject-des-list\\\"><li>分类和预测</li><li>数据预处理</li><li>数据流挖掘</li><li>频繁模式挖掘</li><ul></ul></ul></div>','<div>B</div>',2,'2',6,31),(519,1,'<div><span>下列描述中，错误的是</span><ul class=\\\"subject-des-list\\\"><li>SQL语言又称为结构化查询语言</li><li>java中”static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问</li><li>面向对象开发中，引用传递意味着传递的并不是实际的对象，而是对象的引用，因此，外部对引用对象所做的改变不会反映到所引用的对象上</li><li>java是强类型语言，javascript是弱类型语言</li><li>面向对象的三大特性包括：封装，继承，多态</li><ul></ul></ul></div>','<div>C</div>',2,'3',6,31),(520,2,'<div><span>面向对象的基本要素（）</span><ul class=\\\"subject-des-list\\\"><li>封装</li><li>继承</li><li>多态</li><li>重载</li><ul></ul></ul></div>','<div>ABC</div>',4,'1',6,31),(521,3,'<div><div>  为了某项目需要，我们准备构造了一种面向对象的脚本语言，例如，对所有的整数，我们都通过Integer类型的对象来描述。在计算“1+2”时，这里的“1”，“2”和结果“3”分别为一个Integer对象。为了降低设计复杂度，我们决定让Integer对象都是只读对象，也即在计算a=a+b后，对象a引用的是一个新的对象，而非改a所指对象的值。考虑到性能问题，我们又引入两种优化方案： </div><div>  （1）对于数值相等的Integer对象，我们不会重复创建。例如，计算“1+1”，这里两个“1”的引用的是同一个对象； </div><div>  （2）脚本语言解析器启动时，默认创建数值范围[1,32]的32个Integer对象。现在，假设我们要计算表达式“1+2+3+…+40”，在计算过程需要新创建的Integer对象个数是<u>&nbsp;&nbsp;&nbsp;&nbsp;</u>个？&nbsp; </div></div>','<div>40</div>',4,'1',6,31);
/*!40000 ALTER TABLE `question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `question_type`
--

DROP TABLE IF EXISTS `question_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `question_type` (
  `question_type_id` int(12) unsigned NOT NULL AUTO_INCREMENT COMMENT '问题类型id',
  `question_type` varchar(255) NOT NULL COMMENT '问题类型',
  PRIMARY KEY (`question_type_id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `question_type`
--

LOCK TABLES `question_type` WRITE;
/*!40000 ALTER TABLE `question_type` DISABLE KEYS */;
INSERT INTO `question_type` VALUES (1,'单选题'),(2,'不定项选择题'),(3,'填空题'),(4,'问答题');
/*!40000 ALTER TABLE `question_type` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `subject`
--

DROP TABLE IF EXISTS `subject`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `subject` (
  `subject_id` int(12) unsigned NOT NULL AUTO_INCREMENT COMMENT '学科id',
  `subject` varchar(255) NOT NULL COMMENT '学科',
  PRIMARY KEY (`subject_id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `subject`
--

LOCK TABLES `subject` WRITE;
/*!40000 ALTER TABLE `subject` DISABLE KEYS */;
INSERT INTO `subject` VALUES (1,'算法'),(2,'编程语言'),(3,'数据结构'),(4,'计算机基础'),(5,'数学和逻辑'),(6,'软件开发');
/*!40000 ALTER TABLE `subject` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `test_paper`
--

DROP TABLE IF EXISTS `test_paper`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `test_paper` (
  `test_paper_id` int(12) unsigned NOT NULL AUTO_INCREMENT COMMENT '试卷id',
  `creator_id` varchar(20) NOT NULL COMMENT '创建者id',
  `subject_id` int(12) unsigned NOT NULL COMMENT '学科id',
  `title` varchar(255) DEFAULT NULL COMMENT '试卷标题',
  `total_score` int(4) DEFAULT NULL COMMENT '总分值',
  `difficulty_degree` enum('5','4','3','2','1') DEFAULT NULL COMMENT '试卷总体难度(1~5)',
  `semester` int(1) DEFAULT NULL COMMENT '学期',
  `school_year` varchar(20) DEFAULT NULL COMMENT '学年（2008-2009）',
  PRIMARY KEY (`test_paper_id`),
  KEY `creator_id` (`creator_id`),
  KEY `subject_id` (`subject_id`),
  CONSTRAINT `test_paper_ibfk_1` FOREIGN KEY (`creator_id`) REFERENCES `account` (`account_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `test_paper_ibfk_2` FOREIGN KEY (`subject_id`) REFERENCES `subject` (`subject_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `test_paper`
--

LOCK TABLES `test_paper` WRITE;
/*!40000 ALTER TABLE `test_paper` DISABLE KEYS */;
/*!40000 ALTER TABLE `test_paper` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `test_paper_contain`
--

DROP TABLE IF EXISTS `test_paper_contain`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `test_paper_contain` (
  `id` int(12) NOT NULL,
  `question_id` int(12) unsigned NOT NULL COMMENT '试题id',
  `test_paper_id` int(12) unsigned NOT NULL COMMENT '试卷id',
  `set_score` int(2) DEFAULT NULL COMMENT '调整分值，默认null则取问题原本分值',
  `question_number` int(3) NOT NULL COMMENT '大题号',
  `question_number_2` int(3) NOT NULL COMMENT '小题号',
  PRIMARY KEY (`id`),
  KEY `question_id` (`question_id`),
  KEY `test_paper_id` (`test_paper_id`),
  CONSTRAINT `test_paper_contain_ibfk_1` FOREIGN KEY (`question_id`) REFERENCES `question` (`question_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `test_paper_contain_ibfk_2` FOREIGN KEY (`test_paper_id`) REFERENCES `test_paper` (`test_paper_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `test_paper_contain`
--

LOCK TABLES `test_paper_contain` WRITE;
/*!40000 ALTER TABLE `test_paper_contain` DISABLE KEYS */;
/*!40000 ALTER TABLE `test_paper_contain` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-11-29 22:23:50
